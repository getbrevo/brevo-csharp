/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using brevo_csharp.Client;
using brevo_csharp.Model;

namespace brevo_csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DomainsApi
    {
        private brevo_csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DomainsApi(String basePath)
        {
            this.Configuration = new brevo_csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DomainsApi(brevo_csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = brevo_csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public brevo_csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public brevo_csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Authenticate a domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns>AuthenticateDomainModel</returns>
        public AuthenticateDomainModel AuthenticateDomain (string apiKey, string partnerKey, string domainName)
        {
             ApiResponse<AuthenticateDomainModel> localVarResponse = AuthenticateDomainWithHttpInfo(apiKey, partnerKey, domainName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate a domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns>ApiResponse of AuthenticateDomainModel</returns>
        public ApiResponse< AuthenticateDomainModel > AuthenticateDomainWithHttpInfo (string apiKey, string partnerKey, string domainName)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400, "Missing required parameter 'domainName' when calling DomainsApi->AuthenticateDomain");

            var localVarPath = "./senders/domains/{domainName}/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainName != null) localVarPathParams.Add("domainName", this.Configuration.ApiClient.ParameterToString(domainName)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticateDomainModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (AuthenticateDomainModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticateDomainModel)));
        }

        /// <summary>
        /// Authenticate a domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns>Task of AuthenticateDomainModel</returns>
        public async System.Threading.Tasks.Task<AuthenticateDomainModel> AuthenticateDomainAsync (string apiKey, string partnerKey, string domainName)
        {
             ApiResponse<AuthenticateDomainModel> localVarResponse = await AuthenticateDomainAsyncWithHttpInfo(apiKey, partnerKey, domainName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate a domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns>Task of ApiResponse (AuthenticateDomainModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticateDomainModel>> AuthenticateDomainAsyncWithHttpInfo (string apiKey, string partnerKey, string domainName)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400, "Missing required parameter 'domainName' when calling DomainsApi->AuthenticateDomain");

            var localVarPath = "./senders/domains/{domainName}/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainName != null) localVarPathParams.Add("domainName", this.Configuration.ApiClient.ParameterToString(domainName)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticateDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticateDomainModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (AuthenticateDomainModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticateDomainModel)));
        }

        /// <summary>
        /// Create a new domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">domain&#39;s name (optional)</param>
        /// <returns>CreateDomainModel</returns>
        public CreateDomainModel CreateDomain (string apiKey, string partnerKey, CreateDomain domainName = null)
        {
             ApiResponse<CreateDomainModel> localVarResponse = CreateDomainWithHttpInfo(apiKey, partnerKey, domainName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">domain&#39;s name (optional)</param>
        /// <returns>ApiResponse of CreateDomainModel</returns>
        public ApiResponse< CreateDomainModel > CreateDomainWithHttpInfo (string apiKey, string partnerKey, CreateDomain domainName = null)
        {

            var localVarPath = "./senders/domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainName != null && domainName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(domainName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = domainName; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateDomainModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateDomainModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateDomainModel)));
        }

        /// <summary>
        /// Create a new domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">domain&#39;s name (optional)</param>
        /// <returns>Task of CreateDomainModel</returns>
        public async System.Threading.Tasks.Task<CreateDomainModel> CreateDomainAsync (string apiKey, string partnerKey, CreateDomain domainName = null)
        {
             ApiResponse<CreateDomainModel> localVarResponse = await CreateDomainAsyncWithHttpInfo(apiKey, partnerKey, domainName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">domain&#39;s name (optional)</param>
        /// <returns>Task of ApiResponse (CreateDomainModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateDomainModel>> CreateDomainAsyncWithHttpInfo (string apiKey, string partnerKey, CreateDomain domainName = null)
        {

            var localVarPath = "./senders/domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainName != null && domainName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(domainName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = domainName; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateDomainModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateDomainModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateDomainModel)));
        }

        /// <summary>
        /// Delete a domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns></returns>
        public void DeleteDomain (string apiKey, string partnerKey, string domainName)
        {
             DeleteDomainWithHttpInfo(apiKey, partnerKey, domainName);
        }

        /// <summary>
        /// Delete a domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDomainWithHttpInfo (string apiKey, string partnerKey, string domainName)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400, "Missing required parameter 'domainName' when calling DomainsApi->DeleteDomain");

            var localVarPath = "./senders/domains/{domainName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainName != null) localVarPathParams.Add("domainName", this.Configuration.ApiClient.ParameterToString(domainName)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDomainAsync (string apiKey, string partnerKey, string domainName)
        {
             await DeleteDomainAsyncWithHttpInfo(apiKey, partnerKey, domainName);

        }

        /// <summary>
        /// Delete a domain 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDomainAsyncWithHttpInfo (string apiKey, string partnerKey, string domainName)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400, "Missing required parameter 'domainName' when calling DomainsApi->DeleteDomain");

            var localVarPath = "./senders/domains/{domainName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainName != null) localVarPathParams.Add("domainName", this.Configuration.ApiClient.ParameterToString(domainName)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Validate domain configuration 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns>GetDomainConfigurationModel</returns>
        public GetDomainConfigurationModel GetDomainConfiguration (string apiKey, string partnerKey, string domainName)
        {
             ApiResponse<GetDomainConfigurationModel> localVarResponse = GetDomainConfigurationWithHttpInfo(apiKey, partnerKey, domainName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate domain configuration 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns>ApiResponse of GetDomainConfigurationModel</returns>
        public ApiResponse< GetDomainConfigurationModel > GetDomainConfigurationWithHttpInfo (string apiKey, string partnerKey, string domainName)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400, "Missing required parameter 'domainName' when calling DomainsApi->GetDomainConfiguration");

            var localVarPath = "./senders/domains/{domainName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainName != null) localVarPathParams.Add("domainName", this.Configuration.ApiClient.ParameterToString(domainName)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDomainConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDomainConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDomainConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDomainConfigurationModel)));
        }

        /// <summary>
        /// Validate domain configuration 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns>Task of GetDomainConfigurationModel</returns>
        public async System.Threading.Tasks.Task<GetDomainConfigurationModel> GetDomainConfigurationAsync (string apiKey, string partnerKey, string domainName)
        {
             ApiResponse<GetDomainConfigurationModel> localVarResponse = await GetDomainConfigurationAsyncWithHttpInfo(apiKey, partnerKey, domainName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate domain configuration 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainName">Domain name</param>
        /// <returns>Task of ApiResponse (GetDomainConfigurationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDomainConfigurationModel>> GetDomainConfigurationAsyncWithHttpInfo (string apiKey, string partnerKey, string domainName)
        {
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400, "Missing required parameter 'domainName' when calling DomainsApi->GetDomainConfiguration");

            var localVarPath = "./senders/domains/{domainName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainName != null) localVarPathParams.Add("domainName", this.Configuration.ApiClient.ParameterToString(domainName)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDomainConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDomainConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDomainConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDomainConfigurationModel)));
        }

        /// <summary>
        /// Get the list of all your domains 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetDomainsList</returns>
        public GetDomainsList GetDomains (string apiKey, string partnerKey)
        {
             ApiResponse<GetDomainsList> localVarResponse = GetDomainsWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all your domains 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetDomainsList</returns>
        public ApiResponse< GetDomainsList > GetDomainsWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./senders/domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDomains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDomainsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDomainsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDomainsList)));
        }

        /// <summary>
        /// Get the list of all your domains 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetDomainsList</returns>
        public async System.Threading.Tasks.Task<GetDomainsList> GetDomainsAsync (string apiKey, string partnerKey)
        {
             ApiResponse<GetDomainsList> localVarResponse = await GetDomainsAsyncWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of all your domains 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetDomainsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDomainsList>> GetDomainsAsyncWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./senders/domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDomains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDomainsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDomainsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDomainsList)));
        }

    }
}
