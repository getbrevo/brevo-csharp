/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using brevo_csharp.Client;
using brevo_csharp.Model;

namespace brevo_csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SendersApi
    {
        private brevo_csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SendersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SendersApi(String basePath)
        {
            this.Configuration = new brevo_csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SendersApi(brevo_csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = brevo_csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public brevo_csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public brevo_csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">sender&#39;s name (optional)</param>
        /// <returns>CreateSenderModel</returns>
        public CreateSenderModel CreateSender (string apiKey, string partnerKey, CreateSender sender = null)
        {
             ApiResponse<CreateSenderModel> localVarResponse = CreateSenderWithHttpInfo(apiKey, partnerKey, sender);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">sender&#39;s name (optional)</param>
        /// <returns>ApiResponse of CreateSenderModel</returns>
        public ApiResponse< CreateSenderModel > CreateSenderWithHttpInfo (string apiKey, string partnerKey, CreateSender sender = null)
        {

            var localVarPath = "./senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sender != null && sender.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sender; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSenderModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateSenderModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSenderModel)));
        }

        /// <summary>
        /// Create a new sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">sender&#39;s name (optional)</param>
        /// <returns>Task of CreateSenderModel</returns>
        public async System.Threading.Tasks.Task<CreateSenderModel> CreateSenderAsync (string apiKey, string partnerKey, CreateSender sender = null)
        {
             ApiResponse<CreateSenderModel> localVarResponse = await CreateSenderAsyncWithHttpInfo(apiKey, partnerKey, sender);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sender">sender&#39;s name (optional)</param>
        /// <returns>Task of ApiResponse (CreateSenderModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSenderModel>> CreateSenderAsyncWithHttpInfo (string apiKey, string partnerKey, CreateSender sender = null)
        {

            var localVarPath = "./senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sender != null && sender.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sender; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSenderModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateSenderModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSenderModel)));
        }

        /// <summary>
        /// Delete a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <returns></returns>
        public void DeleteSender (string apiKey, string partnerKey, long? senderId)
        {
             DeleteSenderWithHttpInfo(apiKey, partnerKey, senderId);
        }

        /// <summary>
        /// Delete a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSenderWithHttpInfo (string apiKey, string partnerKey, long? senderId)
        {
            // verify the required parameter 'senderId' is set
            if (senderId == null)
                throw new ApiException(400, "Missing required parameter 'senderId' when calling SendersApi->DeleteSender");

            var localVarPath = "./senders/{senderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderId != null) localVarPathParams.Add("senderId", this.Configuration.ApiClient.ParameterToString(senderId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSenderAsync (string apiKey, string partnerKey, long? senderId)
        {
             await DeleteSenderAsyncWithHttpInfo(apiKey, partnerKey, senderId);

        }

        /// <summary>
        /// Delete a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSenderAsyncWithHttpInfo (string apiKey, string partnerKey, long? senderId)
        {
            // verify the required parameter 'senderId' is set
            if (senderId == null)
                throw new ApiException(400, "Missing required parameter 'senderId' when calling SendersApi->DeleteSender");

            var localVarPath = "./senders/{senderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderId != null) localVarPathParams.Add("senderId", this.Configuration.ApiClient.ParameterToString(senderId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all the dedicated IPs for your account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetIps</returns>
        public GetIps GetIps (string apiKey, string partnerKey)
        {
             ApiResponse<GetIps> localVarResponse = GetIpsWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the dedicated IPs for your account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetIps</returns>
        public ApiResponse< GetIps > GetIpsWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./senders/ips";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetIps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetIps) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetIps)));
        }

        /// <summary>
        /// Get all the dedicated IPs for your account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetIps</returns>
        public async System.Threading.Tasks.Task<GetIps> GetIpsAsync (string apiKey, string partnerKey)
        {
             ApiResponse<GetIps> localVarResponse = await GetIpsAsyncWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the dedicated IPs for your account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetIps)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetIps>> GetIpsAsyncWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./senders/ips";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetIps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetIps) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetIps)));
        }

        /// <summary>
        /// Get all the dedicated IPs for a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <returns>GetIpsFromSender</returns>
        public GetIpsFromSender GetIpsFromSender (string apiKey, string partnerKey, long? senderId)
        {
             ApiResponse<GetIpsFromSender> localVarResponse = GetIpsFromSenderWithHttpInfo(apiKey, partnerKey, senderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the dedicated IPs for a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <returns>ApiResponse of GetIpsFromSender</returns>
        public ApiResponse< GetIpsFromSender > GetIpsFromSenderWithHttpInfo (string apiKey, string partnerKey, long? senderId)
        {
            // verify the required parameter 'senderId' is set
            if (senderId == null)
                throw new ApiException(400, "Missing required parameter 'senderId' when calling SendersApi->GetIpsFromSender");

            var localVarPath = "./senders/{senderId}/ips";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderId != null) localVarPathParams.Add("senderId", this.Configuration.ApiClient.ParameterToString(senderId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIpsFromSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetIpsFromSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetIpsFromSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetIpsFromSender)));
        }

        /// <summary>
        /// Get all the dedicated IPs for a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <returns>Task of GetIpsFromSender</returns>
        public async System.Threading.Tasks.Task<GetIpsFromSender> GetIpsFromSenderAsync (string apiKey, string partnerKey, long? senderId)
        {
             ApiResponse<GetIpsFromSender> localVarResponse = await GetIpsFromSenderAsyncWithHttpInfo(apiKey, partnerKey, senderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the dedicated IPs for a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <returns>Task of ApiResponse (GetIpsFromSender)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetIpsFromSender>> GetIpsFromSenderAsyncWithHttpInfo (string apiKey, string partnerKey, long? senderId)
        {
            // verify the required parameter 'senderId' is set
            if (senderId == null)
                throw new ApiException(400, "Missing required parameter 'senderId' when calling SendersApi->GetIpsFromSender");

            var localVarPath = "./senders/{senderId}/ips";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderId != null) localVarPathParams.Add("senderId", this.Configuration.ApiClient.ParameterToString(senderId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIpsFromSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetIpsFromSender>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetIpsFromSender) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetIpsFromSender)));
        }

        /// <summary>
        /// Get the list of all your senders 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip">Filter your senders for a specific ip (available for dedicated IP usage only) (optional)</param>
        /// <param name="domain">Filter your senders for a specific domain (optional)</param>
        /// <returns>GetSendersList</returns>
        public GetSendersList GetSenders (string apiKey, string partnerKey, string ip = null, string domain = null)
        {
             ApiResponse<GetSendersList> localVarResponse = GetSendersWithHttpInfo(apiKey, partnerKey, ip, domain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all your senders 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip">Filter your senders for a specific ip (available for dedicated IP usage only) (optional)</param>
        /// <param name="domain">Filter your senders for a specific domain (optional)</param>
        /// <returns>ApiResponse of GetSendersList</returns>
        public ApiResponse< GetSendersList > GetSendersWithHttpInfo (string apiKey, string partnerKey, string ip = null, string domain = null)
        {

            var localVarPath = "./senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ip", ip)); // query parameter
            if (domain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domain", domain)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSendersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSendersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSendersList)));
        }

        /// <summary>
        /// Get the list of all your senders 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip">Filter your senders for a specific ip (available for dedicated IP usage only) (optional)</param>
        /// <param name="domain">Filter your senders for a specific domain (optional)</param>
        /// <returns>Task of GetSendersList</returns>
        public async System.Threading.Tasks.Task<GetSendersList> GetSendersAsync (string apiKey, string partnerKey, string ip = null, string domain = null)
        {
             ApiResponse<GetSendersList> localVarResponse = await GetSendersAsyncWithHttpInfo(apiKey, partnerKey, ip, domain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of all your senders 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ip">Filter your senders for a specific ip (available for dedicated IP usage only) (optional)</param>
        /// <param name="domain">Filter your senders for a specific domain (optional)</param>
        /// <returns>Task of ApiResponse (GetSendersList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSendersList>> GetSendersAsyncWithHttpInfo (string apiKey, string partnerKey, string ip = null, string domain = null)
        {

            var localVarPath = "./senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ip", ip)); // query parameter
            if (domain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domain", domain)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSendersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSendersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSendersList)));
        }

        /// <summary>
        /// Update a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <param name="sender">sender&#39;s name (optional)</param>
        /// <returns></returns>
        public void UpdateSender (string apiKey, string partnerKey, long? senderId, UpdateSender sender = null)
        {
             UpdateSenderWithHttpInfo(apiKey, partnerKey, senderId, sender);
        }

        /// <summary>
        /// Update a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <param name="sender">sender&#39;s name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSenderWithHttpInfo (string apiKey, string partnerKey, long? senderId, UpdateSender sender = null)
        {
            // verify the required parameter 'senderId' is set
            if (senderId == null)
                throw new ApiException(400, "Missing required parameter 'senderId' when calling SendersApi->UpdateSender");

            var localVarPath = "./senders/{senderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderId != null) localVarPathParams.Add("senderId", this.Configuration.ApiClient.ParameterToString(senderId)); // path parameter
            if (sender != null && sender.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sender; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <param name="sender">sender&#39;s name (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSenderAsync (string apiKey, string partnerKey, long? senderId, UpdateSender sender = null)
        {
             await UpdateSenderAsyncWithHttpInfo(apiKey, partnerKey, senderId, sender);

        }

        /// <summary>
        /// Update a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <param name="sender">sender&#39;s name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSenderAsyncWithHttpInfo (string apiKey, string partnerKey, long? senderId, UpdateSender sender = null)
        {
            // verify the required parameter 'senderId' is set
            if (senderId == null)
                throw new ApiException(400, "Missing required parameter 'senderId' when calling SendersApi->UpdateSender");

            var localVarPath = "./senders/{senderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderId != null) localVarPathParams.Add("senderId", this.Configuration.ApiClient.ParameterToString(senderId)); // path parameter
            if (sender != null && sender.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sender; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <param name="otp">otp (optional)</param>
        /// <returns></returns>
        public void ValidateSenderByOTP (string apiKey, string partnerKey, long? senderId, Otp otp = null)
        {
             ValidateSenderByOTPWithHttpInfo(apiKey, partnerKey, senderId, otp);
        }

        /// <summary>
        /// Update a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <param name="otp">otp (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ValidateSenderByOTPWithHttpInfo (string apiKey, string partnerKey, long? senderId, Otp otp = null)
        {
            // verify the required parameter 'senderId' is set
            if (senderId == null)
                throw new ApiException(400, "Missing required parameter 'senderId' when calling SendersApi->ValidateSenderByOTP");

            var localVarPath = "./senders/{senderId}/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderId != null) localVarPathParams.Add("senderId", this.Configuration.ApiClient.ParameterToString(senderId)); // path parameter
            if (otp != null && otp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(otp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = otp; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateSenderByOTP", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <param name="otp">otp (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateSenderByOTPAsync (string apiKey, string partnerKey, long? senderId, Otp otp = null)
        {
             await ValidateSenderByOTPAsyncWithHttpInfo(apiKey, partnerKey, senderId, otp);

        }

        /// <summary>
        /// Update a sender 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">Id of the sender</param>
        /// <param name="otp">otp (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidateSenderByOTPAsyncWithHttpInfo (string apiKey, string partnerKey, long? senderId, Otp otp = null)
        {
            // verify the required parameter 'senderId' is set
            if (senderId == null)
                throw new ApiException(400, "Missing required parameter 'senderId' when calling SendersApi->ValidateSenderByOTP");

            var localVarPath = "./senders/{senderId}/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderId != null) localVarPathParams.Add("senderId", this.Configuration.ApiClient.ParameterToString(senderId)); // path parameter
            if (otp != null && otp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(otp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = otp; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateSenderByOTP", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
