/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using brevo_csharp.Client;
using brevo_csharp.Model;

namespace brevo_csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRewardApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get code count
        /// </summary>
        /// <remarks>
        /// Get code count
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cpid">Code Pool ID</param>
        /// <returns>MainCodeCountHttpResponse</returns>
        MainCodeCountHttpResponse GetCodeCount (Guid? pid, Guid? cpid);

        /// <summary>
        /// Get code count
        /// </summary>
        /// <remarks>
        /// Get code count
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cpid">Code Pool ID</param>
        /// <returns>ApiResponse of MainCodeCountHttpResponse</returns>
        ApiResponse<MainCodeCountHttpResponse> GetCodeCountWithHttpInfo (Guid? pid, Guid? cpid);
        /// <summary>
        /// Get Reward Page API
        /// </summary>
        /// <remarks>
        /// Returns a reward page
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="state">State of the reward (optional, default to all)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>MainRewardPage</returns>
        MainRewardPage LoyaltyOfferProgramsPidOffersGet (Guid? pid, int? limit = null, int? offset = null, string state = null, string version = null);

        /// <summary>
        /// Get Reward Page API
        /// </summary>
        /// <remarks>
        /// Returns a reward page
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="state">State of the reward (optional, default to all)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>ApiResponse of MainRewardPage</returns>
        ApiResponse<MainRewardPage> LoyaltyOfferProgramsPidOffersGetWithHttpInfo (Guid? pid, int? limit = null, int? offset = null, string state = null, string version = null);
        /// <summary>
        /// Create a reward
        /// </summary>
        /// <remarks>
        /// Creates a new reward in loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Reward creation payload</param>
        /// <returns>MainCreateRewardResponse</returns>
        MainCreateRewardResponse LoyaltyOfferProgramsPidOffersPost (Guid? pid, MainCreateRewardPayload payload);

        /// <summary>
        /// Create a reward
        /// </summary>
        /// <remarks>
        /// Creates a new reward in loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Reward creation payload</param>
        /// <returns>ApiResponse of MainCreateRewardResponse</returns>
        ApiResponse<MainCreateRewardResponse> LoyaltyOfferProgramsPidOffersPostWithHttpInfo (Guid? pid, MainCreateRewardPayload payload);
        /// <summary>
        /// Create a voucher
        /// </summary>
        /// <remarks>
        /// Create a voucher and attribute it to a specific membership.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Voucher creation payload</param>
        /// <returns>MainRewardAttribution</returns>
        MainRewardAttribution LoyaltyOfferProgramsPidRewardsAttributePost (Guid? pid, MainAttributeRewardPayload payload);

        /// <summary>
        /// Create a voucher
        /// </summary>
        /// <remarks>
        /// Create a voucher and attribute it to a specific membership.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Voucher creation payload</param>
        /// <returns>ApiResponse of MainRewardAttribution</returns>
        ApiResponse<MainRewardAttribution> LoyaltyOfferProgramsPidRewardsAttributePostWithHttpInfo (Guid? pid, MainAttributeRewardPayload payload);
        /// <summary>
        /// Create redeem voucher request
        /// </summary>
        /// <remarks>
        /// Creates a request to redeem a voucher.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Redeem transaction creation payload</param>
        /// <returns>MainRedeem</returns>
        MainRedeem LoyaltyOfferProgramsPidRewardsRedeemPost (Guid? pid, MainCreateRedeemPayload payload);

        /// <summary>
        /// Create redeem voucher request
        /// </summary>
        /// <remarks>
        /// Creates a request to redeem a voucher.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Redeem transaction creation payload</param>
        /// <returns>ApiResponse of MainRedeem</returns>
        ApiResponse<MainRedeem> LoyaltyOfferProgramsPidRewardsRedeemPostWithHttpInfo (Guid? pid, MainCreateRedeemPayload payload);
        /// <summary>
        /// Complete redeem voucher request
        /// </summary>
        /// <remarks>
        /// Completes voucher redeem request.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Redeem transaction ID</param>
        /// <returns>MainRedeem</returns>
        MainRedeem LoyaltyOfferProgramsPidRewardsRedeemTidCompletePost (Guid? pid, string tid);

        /// <summary>
        /// Complete redeem voucher request
        /// </summary>
        /// <remarks>
        /// Completes voucher redeem request.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Redeem transaction ID</param>
        /// <returns>ApiResponse of MainRedeem</returns>
        ApiResponse<MainRedeem> LoyaltyOfferProgramsPidRewardsRedeemTidCompletePostWithHttpInfo (Guid? pid, string tid);
        /// <summary>
        /// Revoke vouchers
        /// </summary>
        /// <remarks>
        /// Revoke attributed vouchers.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="attributedRewardIds">Reward Attribution IDs (comma seperated) (optional)</param>
        /// <returns>string</returns>
        string LoyaltyOfferProgramsPidRewardsRevokeDelete (Guid? pid, string attributedRewardIds = null);

        /// <summary>
        /// Revoke vouchers
        /// </summary>
        /// <remarks>
        /// Revoke attributed vouchers.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="attributedRewardIds">Reward Attribution IDs (comma seperated) (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> LoyaltyOfferProgramsPidRewardsRevokeDeleteWithHttpInfo (Guid? pid, string attributedRewardIds = null);
        /// <summary>
        /// Get reward information
        /// </summary>
        /// <remarks>
        /// Returns reward information.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="rid">Reward ID</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>MainReward</returns>
        MainReward LoyaltyOfferProgramsPidRewardsRidGet (Guid? pid, Guid? rid, string version = null);

        /// <summary>
        /// Get reward information
        /// </summary>
        /// <remarks>
        /// Returns reward information.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="rid">Reward ID</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>ApiResponse of MainReward</returns>
        ApiResponse<MainReward> LoyaltyOfferProgramsPidRewardsRidGetWithHttpInfo (Guid? pid, Guid? rid, string version = null);
        /// <summary>
        /// Validate a reward
        /// </summary>
        /// <remarks>
        /// Validates a reward.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="body">Reward validation payload</param>
        /// <returns>MainRewardValidate</returns>
        MainRewardValidate LoyaltyOfferProgramsPidRewardsValidatePost (Guid? pid, MainValidateRewardPayload body);

        /// <summary>
        /// Validate a reward
        /// </summary>
        /// <remarks>
        /// Validates a reward.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="body">Reward validation payload</param>
        /// <returns>ApiResponse of MainRewardValidate</returns>
        ApiResponse<MainRewardValidate> LoyaltyOfferProgramsPidRewardsValidatePostWithHttpInfo (Guid? pid, MainValidateRewardPayload body);
        /// <summary>
        /// Get voucher for a contact
        /// </summary>
        /// <remarks>
        /// Get voucher for a contact
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="sort">Sort order (optional, default to desc)</param>
        /// <param name="sortField">Sort field (optional, default to updatedAt)</param>
        /// <param name="metadataKeyValue">Metadata value for a Key filter (optional)</param>
        /// <param name="rewardId">Reward ID (optional)</param>
        /// <returns>MainModelContactRewardsResp</returns>
        MainModelContactRewardsResp LoyaltyOfferProgramsPidVouchersGet (Guid? pid, int? contactId, int? limit = null, int? offset = null, string sort = null, string sortField = null, string metadataKeyValue = null, string rewardId = null);

        /// <summary>
        /// Get voucher for a contact
        /// </summary>
        /// <remarks>
        /// Get voucher for a contact
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="sort">Sort order (optional, default to desc)</param>
        /// <param name="sortField">Sort field (optional, default to updatedAt)</param>
        /// <param name="metadataKeyValue">Metadata value for a Key filter (optional)</param>
        /// <param name="rewardId">Reward ID (optional)</param>
        /// <returns>ApiResponse of MainModelContactRewardsResp</returns>
        ApiResponse<MainModelContactRewardsResp> LoyaltyOfferProgramsPidVouchersGetWithHttpInfo (Guid? pid, int? contactId, int? limit = null, int? offset = null, string sort = null, string sortField = null, string metadataKeyValue = null, string rewardId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get code count
        /// </summary>
        /// <remarks>
        /// Get code count
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cpid">Code Pool ID</param>
        /// <returns>Task of MainCodeCountHttpResponse</returns>
        System.Threading.Tasks.Task<MainCodeCountHttpResponse> GetCodeCountAsync (Guid? pid, Guid? cpid);

        /// <summary>
        /// Get code count
        /// </summary>
        /// <remarks>
        /// Get code count
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cpid">Code Pool ID</param>
        /// <returns>Task of ApiResponse (MainCodeCountHttpResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainCodeCountHttpResponse>> GetCodeCountAsyncWithHttpInfo (Guid? pid, Guid? cpid);
        /// <summary>
        /// Get Reward Page API
        /// </summary>
        /// <remarks>
        /// Returns a reward page
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="state">State of the reward (optional, default to all)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of MainRewardPage</returns>
        System.Threading.Tasks.Task<MainRewardPage> LoyaltyOfferProgramsPidOffersGetAsync (Guid? pid, int? limit = null, int? offset = null, string state = null, string version = null);

        /// <summary>
        /// Get Reward Page API
        /// </summary>
        /// <remarks>
        /// Returns a reward page
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="state">State of the reward (optional, default to all)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (MainRewardPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainRewardPage>> LoyaltyOfferProgramsPidOffersGetAsyncWithHttpInfo (Guid? pid, int? limit = null, int? offset = null, string state = null, string version = null);
        /// <summary>
        /// Create a reward
        /// </summary>
        /// <remarks>
        /// Creates a new reward in loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Reward creation payload</param>
        /// <returns>Task of MainCreateRewardResponse</returns>
        System.Threading.Tasks.Task<MainCreateRewardResponse> LoyaltyOfferProgramsPidOffersPostAsync (Guid? pid, MainCreateRewardPayload payload);

        /// <summary>
        /// Create a reward
        /// </summary>
        /// <remarks>
        /// Creates a new reward in loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Reward creation payload</param>
        /// <returns>Task of ApiResponse (MainCreateRewardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainCreateRewardResponse>> LoyaltyOfferProgramsPidOffersPostAsyncWithHttpInfo (Guid? pid, MainCreateRewardPayload payload);
        /// <summary>
        /// Create a voucher
        /// </summary>
        /// <remarks>
        /// Create a voucher and attribute it to a specific membership.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Voucher creation payload</param>
        /// <returns>Task of MainRewardAttribution</returns>
        System.Threading.Tasks.Task<MainRewardAttribution> LoyaltyOfferProgramsPidRewardsAttributePostAsync (Guid? pid, MainAttributeRewardPayload payload);

        /// <summary>
        /// Create a voucher
        /// </summary>
        /// <remarks>
        /// Create a voucher and attribute it to a specific membership.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Voucher creation payload</param>
        /// <returns>Task of ApiResponse (MainRewardAttribution)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainRewardAttribution>> LoyaltyOfferProgramsPidRewardsAttributePostAsyncWithHttpInfo (Guid? pid, MainAttributeRewardPayload payload);
        /// <summary>
        /// Create redeem voucher request
        /// </summary>
        /// <remarks>
        /// Creates a request to redeem a voucher.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Redeem transaction creation payload</param>
        /// <returns>Task of MainRedeem</returns>
        System.Threading.Tasks.Task<MainRedeem> LoyaltyOfferProgramsPidRewardsRedeemPostAsync (Guid? pid, MainCreateRedeemPayload payload);

        /// <summary>
        /// Create redeem voucher request
        /// </summary>
        /// <remarks>
        /// Creates a request to redeem a voucher.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Redeem transaction creation payload</param>
        /// <returns>Task of ApiResponse (MainRedeem)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainRedeem>> LoyaltyOfferProgramsPidRewardsRedeemPostAsyncWithHttpInfo (Guid? pid, MainCreateRedeemPayload payload);
        /// <summary>
        /// Complete redeem voucher request
        /// </summary>
        /// <remarks>
        /// Completes voucher redeem request.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Redeem transaction ID</param>
        /// <returns>Task of MainRedeem</returns>
        System.Threading.Tasks.Task<MainRedeem> LoyaltyOfferProgramsPidRewardsRedeemTidCompletePostAsync (Guid? pid, string tid);

        /// <summary>
        /// Complete redeem voucher request
        /// </summary>
        /// <remarks>
        /// Completes voucher redeem request.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Redeem transaction ID</param>
        /// <returns>Task of ApiResponse (MainRedeem)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainRedeem>> LoyaltyOfferProgramsPidRewardsRedeemTidCompletePostAsyncWithHttpInfo (Guid? pid, string tid);
        /// <summary>
        /// Revoke vouchers
        /// </summary>
        /// <remarks>
        /// Revoke attributed vouchers.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="attributedRewardIds">Reward Attribution IDs (comma seperated) (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> LoyaltyOfferProgramsPidRewardsRevokeDeleteAsync (Guid? pid, string attributedRewardIds = null);

        /// <summary>
        /// Revoke vouchers
        /// </summary>
        /// <remarks>
        /// Revoke attributed vouchers.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="attributedRewardIds">Reward Attribution IDs (comma seperated) (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> LoyaltyOfferProgramsPidRewardsRevokeDeleteAsyncWithHttpInfo (Guid? pid, string attributedRewardIds = null);
        /// <summary>
        /// Get reward information
        /// </summary>
        /// <remarks>
        /// Returns reward information.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="rid">Reward ID</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of MainReward</returns>
        System.Threading.Tasks.Task<MainReward> LoyaltyOfferProgramsPidRewardsRidGetAsync (Guid? pid, Guid? rid, string version = null);

        /// <summary>
        /// Get reward information
        /// </summary>
        /// <remarks>
        /// Returns reward information.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="rid">Reward ID</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (MainReward)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainReward>> LoyaltyOfferProgramsPidRewardsRidGetAsyncWithHttpInfo (Guid? pid, Guid? rid, string version = null);
        /// <summary>
        /// Validate a reward
        /// </summary>
        /// <remarks>
        /// Validates a reward.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="body">Reward validation payload</param>
        /// <returns>Task of MainRewardValidate</returns>
        System.Threading.Tasks.Task<MainRewardValidate> LoyaltyOfferProgramsPidRewardsValidatePostAsync (Guid? pid, MainValidateRewardPayload body);

        /// <summary>
        /// Validate a reward
        /// </summary>
        /// <remarks>
        /// Validates a reward.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="body">Reward validation payload</param>
        /// <returns>Task of ApiResponse (MainRewardValidate)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainRewardValidate>> LoyaltyOfferProgramsPidRewardsValidatePostAsyncWithHttpInfo (Guid? pid, MainValidateRewardPayload body);
        /// <summary>
        /// Get voucher for a contact
        /// </summary>
        /// <remarks>
        /// Get voucher for a contact
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="sort">Sort order (optional, default to desc)</param>
        /// <param name="sortField">Sort field (optional, default to updatedAt)</param>
        /// <param name="metadataKeyValue">Metadata value for a Key filter (optional)</param>
        /// <param name="rewardId">Reward ID (optional)</param>
        /// <returns>Task of MainModelContactRewardsResp</returns>
        System.Threading.Tasks.Task<MainModelContactRewardsResp> LoyaltyOfferProgramsPidVouchersGetAsync (Guid? pid, int? contactId, int? limit = null, int? offset = null, string sort = null, string sortField = null, string metadataKeyValue = null, string rewardId = null);

        /// <summary>
        /// Get voucher for a contact
        /// </summary>
        /// <remarks>
        /// Get voucher for a contact
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="sort">Sort order (optional, default to desc)</param>
        /// <param name="sortField">Sort field (optional, default to updatedAt)</param>
        /// <param name="metadataKeyValue">Metadata value for a Key filter (optional)</param>
        /// <param name="rewardId">Reward ID (optional)</param>
        /// <returns>Task of ApiResponse (MainModelContactRewardsResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainModelContactRewardsResp>> LoyaltyOfferProgramsPidVouchersGetAsyncWithHttpInfo (Guid? pid, int? contactId, int? limit = null, int? offset = null, string sort = null, string sortField = null, string metadataKeyValue = null, string rewardId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RewardApi : IRewardApi
    {
        private brevo_csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RewardApi(String basePath)
        {
            this.Configuration = new brevo_csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RewardApi(brevo_csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = brevo_csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public brevo_csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public brevo_csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get code count Get code count
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cpid">Code Pool ID</param>
        /// <returns>MainCodeCountHttpResponse</returns>
        public MainCodeCountHttpResponse GetCodeCount (Guid? pid, Guid? cpid)
        {
             ApiResponse<MainCodeCountHttpResponse> localVarResponse = GetCodeCountWithHttpInfo(pid, cpid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get code count Get code count
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cpid">Code Pool ID</param>
        /// <returns>ApiResponse of MainCodeCountHttpResponse</returns>
        public ApiResponse< MainCodeCountHttpResponse > GetCodeCountWithHttpInfo (Guid? pid, Guid? cpid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->GetCodeCount");
            // verify the required parameter 'cpid' is set
            if (cpid == null)
                throw new ApiException(400, "Missing required parameter 'cpid' when calling RewardApi->GetCodeCount");

            var localVarPath = "./loyalty/offer/programs/{pid}/code-pools/{cpid}/codes-count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (cpid != null) localVarPathParams.Add("cpid", this.Configuration.ApiClient.ParameterToString(cpid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCodeCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainCodeCountHttpResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainCodeCountHttpResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainCodeCountHttpResponse)));
        }

        /// <summary>
        /// Get code count Get code count
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cpid">Code Pool ID</param>
        /// <returns>Task of MainCodeCountHttpResponse</returns>
        public async System.Threading.Tasks.Task<MainCodeCountHttpResponse> GetCodeCountAsync (Guid? pid, Guid? cpid)
        {
             ApiResponse<MainCodeCountHttpResponse> localVarResponse = await GetCodeCountAsyncWithHttpInfo(pid, cpid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get code count Get code count
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cpid">Code Pool ID</param>
        /// <returns>Task of ApiResponse (MainCodeCountHttpResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainCodeCountHttpResponse>> GetCodeCountAsyncWithHttpInfo (Guid? pid, Guid? cpid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->GetCodeCount");
            // verify the required parameter 'cpid' is set
            if (cpid == null)
                throw new ApiException(400, "Missing required parameter 'cpid' when calling RewardApi->GetCodeCount");

            var localVarPath = "./loyalty/offer/programs/{pid}/code-pools/{cpid}/codes-count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (cpid != null) localVarPathParams.Add("cpid", this.Configuration.ApiClient.ParameterToString(cpid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCodeCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainCodeCountHttpResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainCodeCountHttpResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainCodeCountHttpResponse)));
        }

        /// <summary>
        /// Get Reward Page API Returns a reward page
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="state">State of the reward (optional, default to all)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>MainRewardPage</returns>
        public MainRewardPage LoyaltyOfferProgramsPidOffersGet (Guid? pid, int? limit = null, int? offset = null, string state = null, string version = null)
        {
             ApiResponse<MainRewardPage> localVarResponse = LoyaltyOfferProgramsPidOffersGetWithHttpInfo(pid, limit, offset, state, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reward Page API Returns a reward page
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="state">State of the reward (optional, default to all)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>ApiResponse of MainRewardPage</returns>
        public ApiResponse< MainRewardPage > LoyaltyOfferProgramsPidOffersGetWithHttpInfo (Guid? pid, int? limit = null, int? offset = null, string state = null, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidOffersGet");

            var localVarPath = "./loyalty/offer/programs/{pid}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidOffersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainRewardPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainRewardPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainRewardPage)));
        }

        /// <summary>
        /// Get Reward Page API Returns a reward page
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="state">State of the reward (optional, default to all)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of MainRewardPage</returns>
        public async System.Threading.Tasks.Task<MainRewardPage> LoyaltyOfferProgramsPidOffersGetAsync (Guid? pid, int? limit = null, int? offset = null, string state = null, string version = null)
        {
             ApiResponse<MainRewardPage> localVarResponse = await LoyaltyOfferProgramsPidOffersGetAsyncWithHttpInfo(pid, limit, offset, state, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Reward Page API Returns a reward page
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="state">State of the reward (optional, default to all)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (MainRewardPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainRewardPage>> LoyaltyOfferProgramsPidOffersGetAsyncWithHttpInfo (Guid? pid, int? limit = null, int? offset = null, string state = null, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidOffersGet");

            var localVarPath = "./loyalty/offer/programs/{pid}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidOffersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainRewardPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainRewardPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainRewardPage)));
        }

        /// <summary>
        /// Create a reward Creates a new reward in loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Reward creation payload</param>
        /// <returns>MainCreateRewardResponse</returns>
        public MainCreateRewardResponse LoyaltyOfferProgramsPidOffersPost (Guid? pid, MainCreateRewardPayload payload)
        {
             ApiResponse<MainCreateRewardResponse> localVarResponse = LoyaltyOfferProgramsPidOffersPostWithHttpInfo(pid, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a reward Creates a new reward in loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Reward creation payload</param>
        /// <returns>ApiResponse of MainCreateRewardResponse</returns>
        public ApiResponse< MainCreateRewardResponse > LoyaltyOfferProgramsPidOffersPostWithHttpInfo (Guid? pid, MainCreateRewardPayload payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidOffersPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RewardApi->LoyaltyOfferProgramsPidOffersPost");

            var localVarPath = "./loyalty/offer/programs/{pid}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidOffersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainCreateRewardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainCreateRewardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainCreateRewardResponse)));
        }

        /// <summary>
        /// Create a reward Creates a new reward in loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Reward creation payload</param>
        /// <returns>Task of MainCreateRewardResponse</returns>
        public async System.Threading.Tasks.Task<MainCreateRewardResponse> LoyaltyOfferProgramsPidOffersPostAsync (Guid? pid, MainCreateRewardPayload payload)
        {
             ApiResponse<MainCreateRewardResponse> localVarResponse = await LoyaltyOfferProgramsPidOffersPostAsyncWithHttpInfo(pid, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a reward Creates a new reward in loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Reward creation payload</param>
        /// <returns>Task of ApiResponse (MainCreateRewardResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainCreateRewardResponse>> LoyaltyOfferProgramsPidOffersPostAsyncWithHttpInfo (Guid? pid, MainCreateRewardPayload payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidOffersPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RewardApi->LoyaltyOfferProgramsPidOffersPost");

            var localVarPath = "./loyalty/offer/programs/{pid}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidOffersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainCreateRewardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainCreateRewardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainCreateRewardResponse)));
        }

        /// <summary>
        /// Create a voucher Create a voucher and attribute it to a specific membership.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Voucher creation payload</param>
        /// <returns>MainRewardAttribution</returns>
        public MainRewardAttribution LoyaltyOfferProgramsPidRewardsAttributePost (Guid? pid, MainAttributeRewardPayload payload)
        {
             ApiResponse<MainRewardAttribution> localVarResponse = LoyaltyOfferProgramsPidRewardsAttributePostWithHttpInfo(pid, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a voucher Create a voucher and attribute it to a specific membership.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Voucher creation payload</param>
        /// <returns>ApiResponse of MainRewardAttribution</returns>
        public ApiResponse< MainRewardAttribution > LoyaltyOfferProgramsPidRewardsAttributePostWithHttpInfo (Guid? pid, MainAttributeRewardPayload payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsAttributePost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RewardApi->LoyaltyOfferProgramsPidRewardsAttributePost");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/attribute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsAttributePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainRewardAttribution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainRewardAttribution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainRewardAttribution)));
        }

        /// <summary>
        /// Create a voucher Create a voucher and attribute it to a specific membership.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Voucher creation payload</param>
        /// <returns>Task of MainRewardAttribution</returns>
        public async System.Threading.Tasks.Task<MainRewardAttribution> LoyaltyOfferProgramsPidRewardsAttributePostAsync (Guid? pid, MainAttributeRewardPayload payload)
        {
             ApiResponse<MainRewardAttribution> localVarResponse = await LoyaltyOfferProgramsPidRewardsAttributePostAsyncWithHttpInfo(pid, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a voucher Create a voucher and attribute it to a specific membership.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Voucher creation payload</param>
        /// <returns>Task of ApiResponse (MainRewardAttribution)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainRewardAttribution>> LoyaltyOfferProgramsPidRewardsAttributePostAsyncWithHttpInfo (Guid? pid, MainAttributeRewardPayload payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsAttributePost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RewardApi->LoyaltyOfferProgramsPidRewardsAttributePost");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/attribute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsAttributePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainRewardAttribution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainRewardAttribution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainRewardAttribution)));
        }

        /// <summary>
        /// Create redeem voucher request Creates a request to redeem a voucher.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Redeem transaction creation payload</param>
        /// <returns>MainRedeem</returns>
        public MainRedeem LoyaltyOfferProgramsPidRewardsRedeemPost (Guid? pid, MainCreateRedeemPayload payload)
        {
             ApiResponse<MainRedeem> localVarResponse = LoyaltyOfferProgramsPidRewardsRedeemPostWithHttpInfo(pid, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create redeem voucher request Creates a request to redeem a voucher.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Redeem transaction creation payload</param>
        /// <returns>ApiResponse of MainRedeem</returns>
        public ApiResponse< MainRedeem > LoyaltyOfferProgramsPidRewardsRedeemPostWithHttpInfo (Guid? pid, MainCreateRedeemPayload payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRedeemPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRedeemPost");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/redeem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsRedeemPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainRedeem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainRedeem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainRedeem)));
        }

        /// <summary>
        /// Create redeem voucher request Creates a request to redeem a voucher.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Redeem transaction creation payload</param>
        /// <returns>Task of MainRedeem</returns>
        public async System.Threading.Tasks.Task<MainRedeem> LoyaltyOfferProgramsPidRewardsRedeemPostAsync (Guid? pid, MainCreateRedeemPayload payload)
        {
             ApiResponse<MainRedeem> localVarResponse = await LoyaltyOfferProgramsPidRewardsRedeemPostAsyncWithHttpInfo(pid, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create redeem voucher request Creates a request to redeem a voucher.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Redeem transaction creation payload</param>
        /// <returns>Task of ApiResponse (MainRedeem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainRedeem>> LoyaltyOfferProgramsPidRewardsRedeemPostAsyncWithHttpInfo (Guid? pid, MainCreateRedeemPayload payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRedeemPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRedeemPost");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/redeem";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsRedeemPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainRedeem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainRedeem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainRedeem)));
        }

        /// <summary>
        /// Complete redeem voucher request Completes voucher redeem request.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Redeem transaction ID</param>
        /// <returns>MainRedeem</returns>
        public MainRedeem LoyaltyOfferProgramsPidRewardsRedeemTidCompletePost (Guid? pid, string tid)
        {
             ApiResponse<MainRedeem> localVarResponse = LoyaltyOfferProgramsPidRewardsRedeemTidCompletePostWithHttpInfo(pid, tid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete redeem voucher request Completes voucher redeem request.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Redeem transaction ID</param>
        /// <returns>ApiResponse of MainRedeem</returns>
        public ApiResponse< MainRedeem > LoyaltyOfferProgramsPidRewardsRedeemTidCompletePostWithHttpInfo (Guid? pid, string tid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRedeemTidCompletePost");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRedeemTidCompletePost");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/redeem/{tid}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsRedeemTidCompletePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainRedeem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainRedeem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainRedeem)));
        }

        /// <summary>
        /// Complete redeem voucher request Completes voucher redeem request.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Redeem transaction ID</param>
        /// <returns>Task of MainRedeem</returns>
        public async System.Threading.Tasks.Task<MainRedeem> LoyaltyOfferProgramsPidRewardsRedeemTidCompletePostAsync (Guid? pid, string tid)
        {
             ApiResponse<MainRedeem> localVarResponse = await LoyaltyOfferProgramsPidRewardsRedeemTidCompletePostAsyncWithHttpInfo(pid, tid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete redeem voucher request Completes voucher redeem request.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Redeem transaction ID</param>
        /// <returns>Task of ApiResponse (MainRedeem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainRedeem>> LoyaltyOfferProgramsPidRewardsRedeemTidCompletePostAsyncWithHttpInfo (Guid? pid, string tid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRedeemTidCompletePost");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRedeemTidCompletePost");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/redeem/{tid}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsRedeemTidCompletePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainRedeem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainRedeem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainRedeem)));
        }

        /// <summary>
        /// Revoke vouchers Revoke attributed vouchers.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="attributedRewardIds">Reward Attribution IDs (comma seperated) (optional)</param>
        /// <returns>string</returns>
        public string LoyaltyOfferProgramsPidRewardsRevokeDelete (Guid? pid, string attributedRewardIds = null)
        {
             ApiResponse<string> localVarResponse = LoyaltyOfferProgramsPidRewardsRevokeDeleteWithHttpInfo(pid, attributedRewardIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke vouchers Revoke attributed vouchers.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="attributedRewardIds">Reward Attribution IDs (comma seperated) (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > LoyaltyOfferProgramsPidRewardsRevokeDeleteWithHttpInfo (Guid? pid, string attributedRewardIds = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRevokeDelete");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (attributedRewardIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attributedRewardIds", attributedRewardIds)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsRevokeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Revoke vouchers Revoke attributed vouchers.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="attributedRewardIds">Reward Attribution IDs (comma seperated) (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> LoyaltyOfferProgramsPidRewardsRevokeDeleteAsync (Guid? pid, string attributedRewardIds = null)
        {
             ApiResponse<string> localVarResponse = await LoyaltyOfferProgramsPidRewardsRevokeDeleteAsyncWithHttpInfo(pid, attributedRewardIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revoke vouchers Revoke attributed vouchers.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="attributedRewardIds">Reward Attribution IDs (comma seperated) (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> LoyaltyOfferProgramsPidRewardsRevokeDeleteAsyncWithHttpInfo (Guid? pid, string attributedRewardIds = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRevokeDelete");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (attributedRewardIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attributedRewardIds", attributedRewardIds)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsRevokeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get reward information Returns reward information.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="rid">Reward ID</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>MainReward</returns>
        public MainReward LoyaltyOfferProgramsPidRewardsRidGet (Guid? pid, Guid? rid, string version = null)
        {
             ApiResponse<MainReward> localVarResponse = LoyaltyOfferProgramsPidRewardsRidGetWithHttpInfo(pid, rid, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get reward information Returns reward information.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="rid">Reward ID</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>ApiResponse of MainReward</returns>
        public ApiResponse< MainReward > LoyaltyOfferProgramsPidRewardsRidGetWithHttpInfo (Guid? pid, Guid? rid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRidGet");
            // verify the required parameter 'rid' is set
            if (rid == null)
                throw new ApiException(400, "Missing required parameter 'rid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRidGet");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/{rid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (rid != null) localVarPathParams.Add("rid", this.Configuration.ApiClient.ParameterToString(rid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsRidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainReward>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainReward) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainReward)));
        }

        /// <summary>
        /// Get reward information Returns reward information.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="rid">Reward ID</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of MainReward</returns>
        public async System.Threading.Tasks.Task<MainReward> LoyaltyOfferProgramsPidRewardsRidGetAsync (Guid? pid, Guid? rid, string version = null)
        {
             ApiResponse<MainReward> localVarResponse = await LoyaltyOfferProgramsPidRewardsRidGetAsyncWithHttpInfo(pid, rid, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get reward information Returns reward information.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="rid">Reward ID</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (MainReward)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainReward>> LoyaltyOfferProgramsPidRewardsRidGetAsyncWithHttpInfo (Guid? pid, Guid? rid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRidGet");
            // verify the required parameter 'rid' is set
            if (rid == null)
                throw new ApiException(400, "Missing required parameter 'rid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsRidGet");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/{rid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (rid != null) localVarPathParams.Add("rid", this.Configuration.ApiClient.ParameterToString(rid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsRidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainReward>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainReward) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainReward)));
        }

        /// <summary>
        /// Validate a reward Validates a reward.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="body">Reward validation payload</param>
        /// <returns>MainRewardValidate</returns>
        public MainRewardValidate LoyaltyOfferProgramsPidRewardsValidatePost (Guid? pid, MainValidateRewardPayload body)
        {
             ApiResponse<MainRewardValidate> localVarResponse = LoyaltyOfferProgramsPidRewardsValidatePostWithHttpInfo(pid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a reward Validates a reward.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="body">Reward validation payload</param>
        /// <returns>ApiResponse of MainRewardValidate</returns>
        public ApiResponse< MainRewardValidate > LoyaltyOfferProgramsPidRewardsValidatePostWithHttpInfo (Guid? pid, MainValidateRewardPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsValidatePost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RewardApi->LoyaltyOfferProgramsPidRewardsValidatePost");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsValidatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainRewardValidate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainRewardValidate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainRewardValidate)));
        }

        /// <summary>
        /// Validate a reward Validates a reward.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="body">Reward validation payload</param>
        /// <returns>Task of MainRewardValidate</returns>
        public async System.Threading.Tasks.Task<MainRewardValidate> LoyaltyOfferProgramsPidRewardsValidatePostAsync (Guid? pid, MainValidateRewardPayload body)
        {
             ApiResponse<MainRewardValidate> localVarResponse = await LoyaltyOfferProgramsPidRewardsValidatePostAsyncWithHttpInfo(pid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a reward Validates a reward.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="body">Reward validation payload</param>
        /// <returns>Task of ApiResponse (MainRewardValidate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainRewardValidate>> LoyaltyOfferProgramsPidRewardsValidatePostAsyncWithHttpInfo (Guid? pid, MainValidateRewardPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidRewardsValidatePost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RewardApi->LoyaltyOfferProgramsPidRewardsValidatePost");

            var localVarPath = "./loyalty/offer/programs/{pid}/rewards/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidRewardsValidatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainRewardValidate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainRewardValidate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainRewardValidate)));
        }

        /// <summary>
        /// Get voucher for a contact Get voucher for a contact
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="sort">Sort order (optional, default to desc)</param>
        /// <param name="sortField">Sort field (optional, default to updatedAt)</param>
        /// <param name="metadataKeyValue">Metadata value for a Key filter (optional)</param>
        /// <param name="rewardId">Reward ID (optional)</param>
        /// <returns>MainModelContactRewardsResp</returns>
        public MainModelContactRewardsResp LoyaltyOfferProgramsPidVouchersGet (Guid? pid, int? contactId, int? limit = null, int? offset = null, string sort = null, string sortField = null, string metadataKeyValue = null, string rewardId = null)
        {
             ApiResponse<MainModelContactRewardsResp> localVarResponse = LoyaltyOfferProgramsPidVouchersGetWithHttpInfo(pid, contactId, limit, offset, sort, sortField, metadataKeyValue, rewardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get voucher for a contact Get voucher for a contact
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="sort">Sort order (optional, default to desc)</param>
        /// <param name="sortField">Sort field (optional, default to updatedAt)</param>
        /// <param name="metadataKeyValue">Metadata value for a Key filter (optional)</param>
        /// <param name="rewardId">Reward ID (optional)</param>
        /// <returns>ApiResponse of MainModelContactRewardsResp</returns>
        public ApiResponse< MainModelContactRewardsResp > LoyaltyOfferProgramsPidVouchersGetWithHttpInfo (Guid? pid, int? contactId, int? limit = null, int? offset = null, string sort = null, string sortField = null, string metadataKeyValue = null, string rewardId = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidVouchersGet");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RewardApi->LoyaltyOfferProgramsPidVouchersGet");

            var localVarPath = "./loyalty/offer/programs/{pid}/vouchers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            if (contactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contactId", contactId)); // query parameter
            if (metadataKeyValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata[key][value]", metadataKeyValue)); // query parameter
            if (rewardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rewardId", rewardId)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidVouchersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainModelContactRewardsResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainModelContactRewardsResp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainModelContactRewardsResp)));
        }

        /// <summary>
        /// Get voucher for a contact Get voucher for a contact
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="sort">Sort order (optional, default to desc)</param>
        /// <param name="sortField">Sort field (optional, default to updatedAt)</param>
        /// <param name="metadataKeyValue">Metadata value for a Key filter (optional)</param>
        /// <param name="rewardId">Reward ID (optional)</param>
        /// <returns>Task of MainModelContactRewardsResp</returns>
        public async System.Threading.Tasks.Task<MainModelContactRewardsResp> LoyaltyOfferProgramsPidVouchersGetAsync (Guid? pid, int? contactId, int? limit = null, int? offset = null, string sort = null, string sortField = null, string metadataKeyValue = null, string rewardId = null)
        {
             ApiResponse<MainModelContactRewardsResp> localVarResponse = await LoyaltyOfferProgramsPidVouchersGetAsyncWithHttpInfo(pid, contactId, limit, offset, sort, sortField, metadataKeyValue, rewardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get voucher for a contact Get voucher for a contact
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="limit">Page size (optional, default to 25)</param>
        /// <param name="offset">Pagination offset (optional, default to 0)</param>
        /// <param name="sort">Sort order (optional, default to desc)</param>
        /// <param name="sortField">Sort field (optional, default to updatedAt)</param>
        /// <param name="metadataKeyValue">Metadata value for a Key filter (optional)</param>
        /// <param name="rewardId">Reward ID (optional)</param>
        /// <returns>Task of ApiResponse (MainModelContactRewardsResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainModelContactRewardsResp>> LoyaltyOfferProgramsPidVouchersGetAsyncWithHttpInfo (Guid? pid, int? contactId, int? limit = null, int? offset = null, string sort = null, string sortField = null, string metadataKeyValue = null, string rewardId = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling RewardApi->LoyaltyOfferProgramsPidVouchersGet");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RewardApi->LoyaltyOfferProgramsPidVouchersGet");

            var localVarPath = "./loyalty/offer/programs/{pid}/vouchers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            if (contactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contactId", contactId)); // query parameter
            if (metadataKeyValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata[key][value]", metadataKeyValue)); // query parameter
            if (rewardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rewardId", rewardId)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyOfferProgramsPidVouchersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainModelContactRewardsResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MainModelContactRewardsResp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainModelContactRewardsResp)));
        }

    }
}
