/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using brevo_csharp.Client;
using brevo_csharp.Model;

namespace brevo_csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProgramApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create loyalty program
        /// </summary>
        /// <remarks>
        /// Creates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Loyalty Program Payload</param>
        /// <returns>LoyaltyProgram</returns>
        LoyaltyProgram CreateNewLP (CreateLoyaltyProgramPayload body);

        /// <summary>
        /// Create loyalty program
        /// </summary>
        /// <remarks>
        /// Creates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Loyalty Program Payload</param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        ApiResponse<LoyaltyProgram> CreateNewLPWithHttpInfo (CreateLoyaltyProgramPayload body);
        /// <summary>
        /// Delete subscription member
        /// </summary>
        /// <remarks>
        /// Deletes member from a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="memberContactIds">Member Contact Ids</param>
        /// <returns></returns>
        void DeleteContactMembers (Guid? pid, string memberContactIds);

        /// <summary>
        /// Delete subscription member
        /// </summary>
        /// <remarks>
        /// Deletes member from a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="memberContactIds">Member Contact Ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactMembersWithHttpInfo (Guid? pid, string memberContactIds);
        /// <summary>
        /// Delete Loyalty Program
        /// </summary>
        /// <remarks>
        /// Deletes Loyalty Program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns></returns>
        void DeleteLoyaltyProgram (Guid? pid);

        /// <summary>
        /// Delete Loyalty Program
        /// </summary>
        /// <remarks>
        /// Deletes Loyalty Program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLoyaltyProgramWithHttpInfo (Guid? pid);
        /// <summary>
        /// Get loyalty program list
        /// </summary>
        /// <remarks>
        /// Returns list of loyalty programs
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional)</param>
        /// <param name="offset">Index of the first document in the page (optional)</param>
        /// <param name="sortField">Sort documents by field (optional)</param>
        /// <param name="sort">Sort the documents in the ascending or descending order (optional)</param>
        /// <returns>LoyaltyProgramPage</returns>
        LoyaltyProgramPage GetLPList (int? limit = null, int? offset = null, string sortField = null, string sort = null);

        /// <summary>
        /// Get loyalty program list
        /// </summary>
        /// <remarks>
        /// Returns list of loyalty programs
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional)</param>
        /// <param name="offset">Index of the first document in the page (optional)</param>
        /// <param name="sortField">Sort documents by field (optional)</param>
        /// <param name="sort">Sort the documents in the ascending or descending order (optional)</param>
        /// <returns>ApiResponse of LoyaltyProgramPage</returns>
        ApiResponse<LoyaltyProgramPage> GetLPListWithHttpInfo (int? limit = null, int? offset = null, string sortField = null, string sort = null);
        /// <summary>
        /// Get loyalty program Info
        /// </summary>
        /// <remarks>
        /// Returns loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>LoyaltyProgram</returns>
        LoyaltyProgram GetLoyaltyProgramInfo (Guid? pid);

        /// <summary>
        /// Get loyalty program Info
        /// </summary>
        /// <remarks>
        /// Returns loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        ApiResponse<LoyaltyProgram> GetLoyaltyProgramInfoWithHttpInfo (Guid? pid);
        /// <summary>
        /// Get Subscription Data
        /// </summary>
        /// <remarks>
        /// Get Information of balances, tiers, rewards and subscription members for a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact Id (optional)</param>
        /// <param name="_params">Filter List (optional)</param>
        /// <param name="loyaltySubscriptionId">Loyalty Subscription Id (optional)</param>
        /// <returns>SubscriptionHandlerInfo</returns>
        SubscriptionHandlerInfo GetParameterSubscriptionInfo (Guid? pid, string contactId = null, string _params = null, string loyaltySubscriptionId = null);

        /// <summary>
        /// Get Subscription Data
        /// </summary>
        /// <remarks>
        /// Get Information of balances, tiers, rewards and subscription members for a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact Id (optional)</param>
        /// <param name="_params">Filter List (optional)</param>
        /// <param name="loyaltySubscriptionId">Loyalty Subscription Id (optional)</param>
        /// <returns>ApiResponse of SubscriptionHandlerInfo</returns>
        ApiResponse<SubscriptionHandlerInfo> GetParameterSubscriptionInfoWithHttpInfo (Guid? pid, string contactId = null, string _params = null, string loyaltySubscriptionId = null);
        /// <summary>
        /// Partially update loyalty program
        /// </summary>
        /// <remarks>
        /// Partially updates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Loyalty Program Payload</param>
        /// <returns>LoyaltyProgram</returns>
        LoyaltyProgram PartiallyUpdateLoyaltyProgram (Guid? pid, PatchLoyaltyProgramPayload body);

        /// <summary>
        /// Partially update loyalty program
        /// </summary>
        /// <remarks>
        /// Partially updates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Loyalty Program Payload</param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        ApiResponse<LoyaltyProgram> PartiallyUpdateLoyaltyProgramWithHttpInfo (Guid? pid, PatchLoyaltyProgramPayload body);
        /// <summary>
        /// Publish loyalty program
        /// </summary>
        /// <remarks>
        /// Publishes loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns></returns>
        void PublishLoyaltyProgram (Guid? pid);

        /// <summary>
        /// Publish loyalty program
        /// </summary>
        /// <remarks>
        /// Publishes loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PublishLoyaltyProgramWithHttpInfo (Guid? pid);
        /// <summary>
        /// Create subscription member
        /// </summary>
        /// <remarks>
        /// Add member to a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Add Subscription Member Payload</param>
        /// <returns>SubscriptionMember</returns>
        SubscriptionMember SubscribeMemberToASubscription (Guid? pid, AddSubscriptionMemberPayload body);

        /// <summary>
        /// Create subscription member
        /// </summary>
        /// <remarks>
        /// Add member to a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Add Subscription Member Payload</param>
        /// <returns>ApiResponse of SubscriptionMember</returns>
        ApiResponse<SubscriptionMember> SubscribeMemberToASubscriptionWithHttpInfo (Guid? pid, AddSubscriptionMemberPayload body);
        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        /// Subscribes to a loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Subscription Payload</param>
        /// <returns>Subscription</returns>
        Subscription SubscribeToLoyaltyProgram (Guid? pid, CreateSubscriptionPayload body);

        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        /// Subscribes to a loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Subscription Payload</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> SubscribeToLoyaltyProgramWithHttpInfo (Guid? pid, CreateSubscriptionPayload body);
        /// <summary>
        /// Update loyalty program
        /// </summary>
        /// <remarks>
        /// Updates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Update Loyalty Program Payload</param>
        /// <returns>LoyaltyProgram</returns>
        LoyaltyProgram UpdateLoyaltyProgram (Guid? pid, UpdateLoyaltyProgramPayload body);

        /// <summary>
        /// Update loyalty program
        /// </summary>
        /// <remarks>
        /// Updates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Update Loyalty Program Payload</param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        ApiResponse<LoyaltyProgram> UpdateLoyaltyProgramWithHttpInfo (Guid? pid, UpdateLoyaltyProgramPayload body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create loyalty program
        /// </summary>
        /// <remarks>
        /// Creates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Loyalty Program Payload</param>
        /// <returns>Task of LoyaltyProgram</returns>
        System.Threading.Tasks.Task<LoyaltyProgram> CreateNewLPAsync (CreateLoyaltyProgramPayload body);

        /// <summary>
        /// Create loyalty program
        /// </summary>
        /// <remarks>
        /// Creates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Loyalty Program Payload</param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> CreateNewLPAsyncWithHttpInfo (CreateLoyaltyProgramPayload body);
        /// <summary>
        /// Delete subscription member
        /// </summary>
        /// <remarks>
        /// Deletes member from a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="memberContactIds">Member Contact Ids</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactMembersAsync (Guid? pid, string memberContactIds);

        /// <summary>
        /// Delete subscription member
        /// </summary>
        /// <remarks>
        /// Deletes member from a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="memberContactIds">Member Contact Ids</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactMembersAsyncWithHttpInfo (Guid? pid, string memberContactIds);
        /// <summary>
        /// Delete Loyalty Program
        /// </summary>
        /// <remarks>
        /// Deletes Loyalty Program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLoyaltyProgramAsync (Guid? pid);

        /// <summary>
        /// Delete Loyalty Program
        /// </summary>
        /// <remarks>
        /// Deletes Loyalty Program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLoyaltyProgramAsyncWithHttpInfo (Guid? pid);
        /// <summary>
        /// Get loyalty program list
        /// </summary>
        /// <remarks>
        /// Returns list of loyalty programs
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional)</param>
        /// <param name="offset">Index of the first document in the page (optional)</param>
        /// <param name="sortField">Sort documents by field (optional)</param>
        /// <param name="sort">Sort the documents in the ascending or descending order (optional)</param>
        /// <returns>Task of LoyaltyProgramPage</returns>
        System.Threading.Tasks.Task<LoyaltyProgramPage> GetLPListAsync (int? limit = null, int? offset = null, string sortField = null, string sort = null);

        /// <summary>
        /// Get loyalty program list
        /// </summary>
        /// <remarks>
        /// Returns list of loyalty programs
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional)</param>
        /// <param name="offset">Index of the first document in the page (optional)</param>
        /// <param name="sortField">Sort documents by field (optional)</param>
        /// <param name="sort">Sort the documents in the ascending or descending order (optional)</param>
        /// <returns>Task of ApiResponse (LoyaltyProgramPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyProgramPage>> GetLPListAsyncWithHttpInfo (int? limit = null, int? offset = null, string sortField = null, string sort = null);
        /// <summary>
        /// Get loyalty program Info
        /// </summary>
        /// <remarks>
        /// Returns loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of LoyaltyProgram</returns>
        System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramInfoAsync (Guid? pid);

        /// <summary>
        /// Get loyalty program Info
        /// </summary>
        /// <remarks>
        /// Returns loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> GetLoyaltyProgramInfoAsyncWithHttpInfo (Guid? pid);
        /// <summary>
        /// Get Subscription Data
        /// </summary>
        /// <remarks>
        /// Get Information of balances, tiers, rewards and subscription members for a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact Id (optional)</param>
        /// <param name="_params">Filter List (optional)</param>
        /// <param name="loyaltySubscriptionId">Loyalty Subscription Id (optional)</param>
        /// <returns>Task of SubscriptionHandlerInfo</returns>
        System.Threading.Tasks.Task<SubscriptionHandlerInfo> GetParameterSubscriptionInfoAsync (Guid? pid, string contactId = null, string _params = null, string loyaltySubscriptionId = null);

        /// <summary>
        /// Get Subscription Data
        /// </summary>
        /// <remarks>
        /// Get Information of balances, tiers, rewards and subscription members for a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact Id (optional)</param>
        /// <param name="_params">Filter List (optional)</param>
        /// <param name="loyaltySubscriptionId">Loyalty Subscription Id (optional)</param>
        /// <returns>Task of ApiResponse (SubscriptionHandlerInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionHandlerInfo>> GetParameterSubscriptionInfoAsyncWithHttpInfo (Guid? pid, string contactId = null, string _params = null, string loyaltySubscriptionId = null);
        /// <summary>
        /// Partially update loyalty program
        /// </summary>
        /// <remarks>
        /// Partially updates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Loyalty Program Payload</param>
        /// <returns>Task of LoyaltyProgram</returns>
        System.Threading.Tasks.Task<LoyaltyProgram> PartiallyUpdateLoyaltyProgramAsync (Guid? pid, PatchLoyaltyProgramPayload body);

        /// <summary>
        /// Partially update loyalty program
        /// </summary>
        /// <remarks>
        /// Partially updates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Loyalty Program Payload</param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> PartiallyUpdateLoyaltyProgramAsyncWithHttpInfo (Guid? pid, PatchLoyaltyProgramPayload body);
        /// <summary>
        /// Publish loyalty program
        /// </summary>
        /// <remarks>
        /// Publishes loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PublishLoyaltyProgramAsync (Guid? pid);

        /// <summary>
        /// Publish loyalty program
        /// </summary>
        /// <remarks>
        /// Publishes loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PublishLoyaltyProgramAsyncWithHttpInfo (Guid? pid);
        /// <summary>
        /// Create subscription member
        /// </summary>
        /// <remarks>
        /// Add member to a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Add Subscription Member Payload</param>
        /// <returns>Task of SubscriptionMember</returns>
        System.Threading.Tasks.Task<SubscriptionMember> SubscribeMemberToASubscriptionAsync (Guid? pid, AddSubscriptionMemberPayload body);

        /// <summary>
        /// Create subscription member
        /// </summary>
        /// <remarks>
        /// Add member to a subscription
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Add Subscription Member Payload</param>
        /// <returns>Task of ApiResponse (SubscriptionMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionMember>> SubscribeMemberToASubscriptionAsyncWithHttpInfo (Guid? pid, AddSubscriptionMemberPayload body);
        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        /// Subscribes to a loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Subscription Payload</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> SubscribeToLoyaltyProgramAsync (Guid? pid, CreateSubscriptionPayload body);

        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        /// Subscribes to a loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Subscription Payload</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> SubscribeToLoyaltyProgramAsyncWithHttpInfo (Guid? pid, CreateSubscriptionPayload body);
        /// <summary>
        /// Update loyalty program
        /// </summary>
        /// <remarks>
        /// Updates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Update Loyalty Program Payload</param>
        /// <returns>Task of LoyaltyProgram</returns>
        System.Threading.Tasks.Task<LoyaltyProgram> UpdateLoyaltyProgramAsync (Guid? pid, UpdateLoyaltyProgramPayload body);

        /// <summary>
        /// Update loyalty program
        /// </summary>
        /// <remarks>
        /// Updates loyalty program
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Update Loyalty Program Payload</param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> UpdateLoyaltyProgramAsyncWithHttpInfo (Guid? pid, UpdateLoyaltyProgramPayload body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProgramApi : IProgramApi
    {
        private brevo_csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProgramApi(String basePath)
        {
            this.Configuration = new brevo_csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProgramApi(brevo_csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = brevo_csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public brevo_csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public brevo_csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create loyalty program Creates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Loyalty Program Payload</param>
        /// <returns>LoyaltyProgram</returns>
        public LoyaltyProgram CreateNewLP (CreateLoyaltyProgramPayload body)
        {
             ApiResponse<LoyaltyProgram> localVarResponse = CreateNewLPWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create loyalty program Creates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Loyalty Program Payload</param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        public ApiResponse< LoyaltyProgram > CreateNewLPWithHttpInfo (CreateLoyaltyProgramPayload body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProgramApi->CreateNewLP");

            var localVarPath = "./loyalty/config/programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNewLP", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgram)));
        }

        /// <summary>
        /// Create loyalty program Creates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Loyalty Program Payload</param>
        /// <returns>Task of LoyaltyProgram</returns>
        public async System.Threading.Tasks.Task<LoyaltyProgram> CreateNewLPAsync (CreateLoyaltyProgramPayload body)
        {
             ApiResponse<LoyaltyProgram> localVarResponse = await CreateNewLPAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create loyalty program Creates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Loyalty Program Payload</param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> CreateNewLPAsyncWithHttpInfo (CreateLoyaltyProgramPayload body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProgramApi->CreateNewLP");

            var localVarPath = "./loyalty/config/programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNewLP", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgram)));
        }

        /// <summary>
        /// Delete subscription member Deletes member from a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="memberContactIds">Member Contact Ids</param>
        /// <returns></returns>
        public void DeleteContactMembers (Guid? pid, string memberContactIds)
        {
             DeleteContactMembersWithHttpInfo(pid, memberContactIds);
        }

        /// <summary>
        /// Delete subscription member Deletes member from a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="memberContactIds">Member Contact Ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactMembersWithHttpInfo (Guid? pid, string memberContactIds)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->DeleteContactMembers");
            // verify the required parameter 'memberContactIds' is set
            if (memberContactIds == null)
                throw new ApiException(400, "Missing required parameter 'memberContactIds' when calling ProgramApi->DeleteContactMembers");

            var localVarPath = "./loyalty/config/programs/{pid}/subscription-members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (memberContactIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "memberContactIds", memberContactIds)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete subscription member Deletes member from a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="memberContactIds">Member Contact Ids</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactMembersAsync (Guid? pid, string memberContactIds)
        {
             await DeleteContactMembersAsyncWithHttpInfo(pid, memberContactIds);

        }

        /// <summary>
        /// Delete subscription member Deletes member from a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="memberContactIds">Member Contact Ids</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactMembersAsyncWithHttpInfo (Guid? pid, string memberContactIds)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->DeleteContactMembers");
            // verify the required parameter 'memberContactIds' is set
            if (memberContactIds == null)
                throw new ApiException(400, "Missing required parameter 'memberContactIds' when calling ProgramApi->DeleteContactMembers");

            var localVarPath = "./loyalty/config/programs/{pid}/subscription-members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (memberContactIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "memberContactIds", memberContactIds)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Loyalty Program Deletes Loyalty Program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns></returns>
        public void DeleteLoyaltyProgram (Guid? pid)
        {
             DeleteLoyaltyProgramWithHttpInfo(pid);
        }

        /// <summary>
        /// Delete Loyalty Program Deletes Loyalty Program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLoyaltyProgramWithHttpInfo (Guid? pid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->DeleteLoyaltyProgram");

            var localVarPath = "./loyalty/config/programs/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Loyalty Program Deletes Loyalty Program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLoyaltyProgramAsync (Guid? pid)
        {
             await DeleteLoyaltyProgramAsyncWithHttpInfo(pid);

        }

        /// <summary>
        /// Delete Loyalty Program Deletes Loyalty Program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLoyaltyProgramAsyncWithHttpInfo (Guid? pid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->DeleteLoyaltyProgram");

            var localVarPath = "./loyalty/config/programs/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get loyalty program list Returns list of loyalty programs
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional)</param>
        /// <param name="offset">Index of the first document in the page (optional)</param>
        /// <param name="sortField">Sort documents by field (optional)</param>
        /// <param name="sort">Sort the documents in the ascending or descending order (optional)</param>
        /// <returns>LoyaltyProgramPage</returns>
        public LoyaltyProgramPage GetLPList (int? limit = null, int? offset = null, string sortField = null, string sort = null)
        {
             ApiResponse<LoyaltyProgramPage> localVarResponse = GetLPListWithHttpInfo(limit, offset, sortField, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loyalty program list Returns list of loyalty programs
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional)</param>
        /// <param name="offset">Index of the first document in the page (optional)</param>
        /// <param name="sortField">Sort documents by field (optional)</param>
        /// <param name="sort">Sort the documents in the ascending or descending order (optional)</param>
        /// <returns>ApiResponse of LoyaltyProgramPage</returns>
        public ApiResponse< LoyaltyProgramPage > GetLPListWithHttpInfo (int? limit = null, int? offset = null, string sortField = null, string sort = null)
        {

            var localVarPath = "./loyalty/config/programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLPList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgramPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyProgramPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgramPage)));
        }

        /// <summary>
        /// Get loyalty program list Returns list of loyalty programs
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional)</param>
        /// <param name="offset">Index of the first document in the page (optional)</param>
        /// <param name="sortField">Sort documents by field (optional)</param>
        /// <param name="sort">Sort the documents in the ascending or descending order (optional)</param>
        /// <returns>Task of LoyaltyProgramPage</returns>
        public async System.Threading.Tasks.Task<LoyaltyProgramPage> GetLPListAsync (int? limit = null, int? offset = null, string sortField = null, string sort = null)
        {
             ApiResponse<LoyaltyProgramPage> localVarResponse = await GetLPListAsyncWithHttpInfo(limit, offset, sortField, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loyalty program list Returns list of loyalty programs
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional)</param>
        /// <param name="offset">Index of the first document in the page (optional)</param>
        /// <param name="sortField">Sort documents by field (optional)</param>
        /// <param name="sort">Sort the documents in the ascending or descending order (optional)</param>
        /// <returns>Task of ApiResponse (LoyaltyProgramPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoyaltyProgramPage>> GetLPListAsyncWithHttpInfo (int? limit = null, int? offset = null, string sortField = null, string sort = null)
        {

            var localVarPath = "./loyalty/config/programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLPList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgramPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyProgramPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgramPage)));
        }

        /// <summary>
        /// Get loyalty program Info Returns loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>LoyaltyProgram</returns>
        public LoyaltyProgram GetLoyaltyProgramInfo (Guid? pid)
        {
             ApiResponse<LoyaltyProgram> localVarResponse = GetLoyaltyProgramInfoWithHttpInfo(pid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loyalty program Info Returns loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        public ApiResponse< LoyaltyProgram > GetLoyaltyProgramInfoWithHttpInfo (Guid? pid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->GetLoyaltyProgramInfo");

            var localVarPath = "./loyalty/config/programs/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyProgramInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgram)));
        }

        /// <summary>
        /// Get loyalty program Info Returns loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of LoyaltyProgram</returns>
        public async System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramInfoAsync (Guid? pid)
        {
             ApiResponse<LoyaltyProgram> localVarResponse = await GetLoyaltyProgramInfoAsyncWithHttpInfo(pid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loyalty program Info Returns loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> GetLoyaltyProgramInfoAsyncWithHttpInfo (Guid? pid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->GetLoyaltyProgramInfo");

            var localVarPath = "./loyalty/config/programs/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyProgramInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgram)));
        }

        /// <summary>
        /// Get Subscription Data Get Information of balances, tiers, rewards and subscription members for a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact Id (optional)</param>
        /// <param name="_params">Filter List (optional)</param>
        /// <param name="loyaltySubscriptionId">Loyalty Subscription Id (optional)</param>
        /// <returns>SubscriptionHandlerInfo</returns>
        public SubscriptionHandlerInfo GetParameterSubscriptionInfo (Guid? pid, string contactId = null, string _params = null, string loyaltySubscriptionId = null)
        {
             ApiResponse<SubscriptionHandlerInfo> localVarResponse = GetParameterSubscriptionInfoWithHttpInfo(pid, contactId, _params, loyaltySubscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription Data Get Information of balances, tiers, rewards and subscription members for a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact Id (optional)</param>
        /// <param name="_params">Filter List (optional)</param>
        /// <param name="loyaltySubscriptionId">Loyalty Subscription Id (optional)</param>
        /// <returns>ApiResponse of SubscriptionHandlerInfo</returns>
        public ApiResponse< SubscriptionHandlerInfo > GetParameterSubscriptionInfoWithHttpInfo (Guid? pid, string contactId = null, string _params = null, string loyaltySubscriptionId = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->GetParameterSubscriptionInfo");

            var localVarPath = "./loyalty/config/programs/{pid}/account-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (contactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contactId", contactId)); // query parameter
            if (_params != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "params", _params)); // query parameter
            if (loyaltySubscriptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loyaltySubscriptionId", loyaltySubscriptionId)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterSubscriptionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionHandlerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubscriptionHandlerInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionHandlerInfo)));
        }

        /// <summary>
        /// Get Subscription Data Get Information of balances, tiers, rewards and subscription members for a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact Id (optional)</param>
        /// <param name="_params">Filter List (optional)</param>
        /// <param name="loyaltySubscriptionId">Loyalty Subscription Id (optional)</param>
        /// <returns>Task of SubscriptionHandlerInfo</returns>
        public async System.Threading.Tasks.Task<SubscriptionHandlerInfo> GetParameterSubscriptionInfoAsync (Guid? pid, string contactId = null, string _params = null, string loyaltySubscriptionId = null)
        {
             ApiResponse<SubscriptionHandlerInfo> localVarResponse = await GetParameterSubscriptionInfoAsyncWithHttpInfo(pid, contactId, _params, loyaltySubscriptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Subscription Data Get Information of balances, tiers, rewards and subscription members for a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact Id (optional)</param>
        /// <param name="_params">Filter List (optional)</param>
        /// <param name="loyaltySubscriptionId">Loyalty Subscription Id (optional)</param>
        /// <returns>Task of ApiResponse (SubscriptionHandlerInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionHandlerInfo>> GetParameterSubscriptionInfoAsyncWithHttpInfo (Guid? pid, string contactId = null, string _params = null, string loyaltySubscriptionId = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->GetParameterSubscriptionInfo");

            var localVarPath = "./loyalty/config/programs/{pid}/account-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (contactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contactId", contactId)); // query parameter
            if (_params != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "params", _params)); // query parameter
            if (loyaltySubscriptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loyaltySubscriptionId", loyaltySubscriptionId)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterSubscriptionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionHandlerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubscriptionHandlerInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionHandlerInfo)));
        }

        /// <summary>
        /// Partially update loyalty program Partially updates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Loyalty Program Payload</param>
        /// <returns>LoyaltyProgram</returns>
        public LoyaltyProgram PartiallyUpdateLoyaltyProgram (Guid? pid, PatchLoyaltyProgramPayload body)
        {
             ApiResponse<LoyaltyProgram> localVarResponse = PartiallyUpdateLoyaltyProgramWithHttpInfo(pid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partially update loyalty program Partially updates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Loyalty Program Payload</param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        public ApiResponse< LoyaltyProgram > PartiallyUpdateLoyaltyProgramWithHttpInfo (Guid? pid, PatchLoyaltyProgramPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->PartiallyUpdateLoyaltyProgram");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProgramApi->PartiallyUpdateLoyaltyProgram");

            var localVarPath = "./loyalty/config/programs/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgram)));
        }

        /// <summary>
        /// Partially update loyalty program Partially updates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Loyalty Program Payload</param>
        /// <returns>Task of LoyaltyProgram</returns>
        public async System.Threading.Tasks.Task<LoyaltyProgram> PartiallyUpdateLoyaltyProgramAsync (Guid? pid, PatchLoyaltyProgramPayload body)
        {
             ApiResponse<LoyaltyProgram> localVarResponse = await PartiallyUpdateLoyaltyProgramAsyncWithHttpInfo(pid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partially update loyalty program Partially updates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Loyalty Program Payload</param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> PartiallyUpdateLoyaltyProgramAsyncWithHttpInfo (Guid? pid, PatchLoyaltyProgramPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->PartiallyUpdateLoyaltyProgram");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProgramApi->PartiallyUpdateLoyaltyProgram");

            var localVarPath = "./loyalty/config/programs/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgram)));
        }

        /// <summary>
        /// Publish loyalty program Publishes loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns></returns>
        public void PublishLoyaltyProgram (Guid? pid)
        {
             PublishLoyaltyProgramWithHttpInfo(pid);
        }

        /// <summary>
        /// Publish loyalty program Publishes loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PublishLoyaltyProgramWithHttpInfo (Guid? pid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->PublishLoyaltyProgram");

            var localVarPath = "./loyalty/config/programs/{pid}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Publish loyalty program Publishes loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PublishLoyaltyProgramAsync (Guid? pid)
        {
             await PublishLoyaltyProgramAsyncWithHttpInfo(pid);

        }

        /// <summary>
        /// Publish loyalty program Publishes loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PublishLoyaltyProgramAsyncWithHttpInfo (Guid? pid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->PublishLoyaltyProgram");

            var localVarPath = "./loyalty/config/programs/{pid}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create subscription member Add member to a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Add Subscription Member Payload</param>
        /// <returns>SubscriptionMember</returns>
        public SubscriptionMember SubscribeMemberToASubscription (Guid? pid, AddSubscriptionMemberPayload body)
        {
             ApiResponse<SubscriptionMember> localVarResponse = SubscribeMemberToASubscriptionWithHttpInfo(pid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription member Add member to a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Add Subscription Member Payload</param>
        /// <returns>ApiResponse of SubscriptionMember</returns>
        public ApiResponse< SubscriptionMember > SubscribeMemberToASubscriptionWithHttpInfo (Guid? pid, AddSubscriptionMemberPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->SubscribeMemberToASubscription");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProgramApi->SubscribeMemberToASubscription");

            var localVarPath = "./loyalty/config/programs/{pid}/subscription-members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeMemberToASubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubscriptionMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionMember)));
        }

        /// <summary>
        /// Create subscription member Add member to a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Add Subscription Member Payload</param>
        /// <returns>Task of SubscriptionMember</returns>
        public async System.Threading.Tasks.Task<SubscriptionMember> SubscribeMemberToASubscriptionAsync (Guid? pid, AddSubscriptionMemberPayload body)
        {
             ApiResponse<SubscriptionMember> localVarResponse = await SubscribeMemberToASubscriptionAsyncWithHttpInfo(pid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create subscription member Add member to a subscription
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Add Subscription Member Payload</param>
        /// <returns>Task of ApiResponse (SubscriptionMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionMember>> SubscribeMemberToASubscriptionAsyncWithHttpInfo (Guid? pid, AddSubscriptionMemberPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->SubscribeMemberToASubscription");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProgramApi->SubscribeMemberToASubscription");

            var localVarPath = "./loyalty/config/programs/{pid}/subscription-members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeMemberToASubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubscriptionMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionMember)));
        }

        /// <summary>
        /// Create subscription Subscribes to a loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Subscription Payload</param>
        /// <returns>Subscription</returns>
        public Subscription SubscribeToLoyaltyProgram (Guid? pid, CreateSubscriptionPayload body)
        {
             ApiResponse<Subscription> localVarResponse = SubscribeToLoyaltyProgramWithHttpInfo(pid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription Subscribes to a loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Subscription Payload</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > SubscribeToLoyaltyProgramWithHttpInfo (Guid? pid, CreateSubscriptionPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->SubscribeToLoyaltyProgram");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProgramApi->SubscribeToLoyaltyProgram");

            var localVarPath = "./loyalty/config/programs/{pid}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeToLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Create subscription Subscribes to a loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Subscription Payload</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> SubscribeToLoyaltyProgramAsync (Guid? pid, CreateSubscriptionPayload body)
        {
             ApiResponse<Subscription> localVarResponse = await SubscribeToLoyaltyProgramAsyncWithHttpInfo(pid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create subscription Subscribes to a loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Subscription Payload</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> SubscribeToLoyaltyProgramAsyncWithHttpInfo (Guid? pid, CreateSubscriptionPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->SubscribeToLoyaltyProgram");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProgramApi->SubscribeToLoyaltyProgram");

            var localVarPath = "./loyalty/config/programs/{pid}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeToLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Update loyalty program Updates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Update Loyalty Program Payload</param>
        /// <returns>LoyaltyProgram</returns>
        public LoyaltyProgram UpdateLoyaltyProgram (Guid? pid, UpdateLoyaltyProgramPayload body)
        {
             ApiResponse<LoyaltyProgram> localVarResponse = UpdateLoyaltyProgramWithHttpInfo(pid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update loyalty program Updates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Update Loyalty Program Payload</param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        public ApiResponse< LoyaltyProgram > UpdateLoyaltyProgramWithHttpInfo (Guid? pid, UpdateLoyaltyProgramPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->UpdateLoyaltyProgram");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProgramApi->UpdateLoyaltyProgram");

            var localVarPath = "./loyalty/config/programs/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgram)));
        }

        /// <summary>
        /// Update loyalty program Updates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Update Loyalty Program Payload</param>
        /// <returns>Task of LoyaltyProgram</returns>
        public async System.Threading.Tasks.Task<LoyaltyProgram> UpdateLoyaltyProgramAsync (Guid? pid, UpdateLoyaltyProgramPayload body)
        {
             ApiResponse<LoyaltyProgram> localVarResponse = await UpdateLoyaltyProgramAsyncWithHttpInfo(pid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update loyalty program Updates loyalty program
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Update Loyalty Program Payload</param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> UpdateLoyaltyProgramAsyncWithHttpInfo (Guid? pid, UpdateLoyaltyProgramPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling ProgramApi->UpdateLoyaltyProgram");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProgramApi->UpdateLoyaltyProgram");

            var localVarPath = "./loyalty/config/programs/{pid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgram)));
        }

    }
}
