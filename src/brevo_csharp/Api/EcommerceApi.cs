/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using brevo_csharp.Client;
using brevo_csharp.Model;

namespace brevo_csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEcommerceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create orders in batch
        /// </summary>
        /// <remarks>
        /// Create multiple orders at one time instead of one order at a time
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch"></param>
        /// <returns></returns>
        void CreateBatchOrder (OrderBatch orderBatch);

        /// <summary>
        /// Create orders in batch
        /// </summary>
        /// <remarks>
        /// Create multiple orders at one time instead of one order at a time
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateBatchOrderWithHttpInfo (OrderBatch orderBatch);
        /// <summary>
        /// Managing the status of the order
        /// </summary>
        /// <remarks>
        /// Manages the transactional status of the order
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns></returns>
        void CreateOrder (Order order);

        /// <summary>
        /// Managing the status of the order
        /// </summary>
        /// <remarks>
        /// Manages the transactional status of the order
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateOrderWithHttpInfo (Order order);
        /// <summary>
        /// Create categories in batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchCategory">Values to create a batch of categories</param>
        /// <returns>CreateUpdateBatchCategoryModel</returns>
        CreateUpdateBatchCategoryModel CreateUpdateBatchCategory (CreateUpdateBatchCategory createUpdateBatchCategory);

        /// <summary>
        /// Create categories in batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchCategory">Values to create a batch of categories</param>
        /// <returns>ApiResponse of CreateUpdateBatchCategoryModel</returns>
        ApiResponse<CreateUpdateBatchCategoryModel> CreateUpdateBatchCategoryWithHttpInfo (CreateUpdateBatchCategory createUpdateBatchCategory);
        /// <summary>
        /// Create products in batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchProducts">Values to create a batch of products</param>
        /// <returns>CreateUpdateBatchProductsModel</returns>
        CreateUpdateBatchProductsModel CreateUpdateBatchProducts (CreateUpdateBatchProducts createUpdateBatchProducts);

        /// <summary>
        /// Create products in batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchProducts">Values to create a batch of products</param>
        /// <returns>ApiResponse of CreateUpdateBatchProductsModel</returns>
        ApiResponse<CreateUpdateBatchProductsModel> CreateUpdateBatchProductsWithHttpInfo (CreateUpdateBatchProducts createUpdateBatchProducts);
        /// <summary>
        /// Create/Update a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateCategory">Values to create/update a category</param>
        /// <returns>CreateCategoryModel</returns>
        CreateCategoryModel CreateUpdateCategory (CreateUpdateCategory createUpdateCategory);

        /// <summary>
        /// Create/Update a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateCategory">Values to create/update a category</param>
        /// <returns>ApiResponse of CreateCategoryModel</returns>
        ApiResponse<CreateCategoryModel> CreateUpdateCategoryWithHttpInfo (CreateUpdateCategory createUpdateCategory);
        /// <summary>
        /// Create/Update a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateProduct">Values to create/update a product</param>
        /// <returns>CreateProductModel</returns>
        CreateProductModel CreateUpdateProduct (CreateUpdateProduct createUpdateProduct);

        /// <summary>
        /// Create/Update a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateProduct">Values to create/update a product</param>
        /// <returns>ApiResponse of CreateProductModel</returns>
        ApiResponse<CreateProductModel> CreateUpdateProductWithHttpInfo (CreateUpdateProduct createUpdateProduct);
        /// <summary>
        /// Activate the eCommerce app
        /// </summary>
        /// <remarks>
        /// Getting access to Brevo eCommerce.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void EcommerceActivatePost ();

        /// <summary>
        /// Activate the eCommerce app
        /// </summary>
        /// <remarks>
        /// Getting access to Brevo eCommerce.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EcommerceActivatePostWithHttpInfo ();
        /// <summary>
        /// Get detailed attribution metrics for a single Brevo campaign or workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign type or workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 EcommerceAttributionMetricsConversionSourceConversionSourceIdGet (string conversionSource, string conversionSourceId);

        /// <summary>
        /// Get detailed attribution metrics for a single Brevo campaign or workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign type or workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> EcommerceAttributionMetricsConversionSourceConversionSourceIdGetWithHttpInfo (string conversionSource, string conversionSourceId);
        /// <summary>
        /// Get attribution metrics for one or more Brevo campaigns or workflows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodFrom">When getting metrics for a specific period, define the starting datetime in RFC3339 format (optional)</param>
        /// <param name="periodTo">When getting metrics for a specific period, define the end datetime in RFC3339 format (optional)</param>
        /// <param name="emailCampaignId">The email campaign ID(s) to get metrics for (optional)</param>
        /// <param name="smsCampaignId">The SMS campaign ID(s) to get metrics for (optional)</param>
        /// <param name="automationWorkflowEmailId">The automation workflow ID(s) to get email attribution metrics for (optional)</param>
        /// <param name="automationWorkflowSmsId">The automation workflow ID(s) to get SMS attribution metrics for (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 EcommerceAttributionMetricsGet (DateTime? periodFrom = null, DateTime? periodTo = null, List<string> emailCampaignId = null, List<string> smsCampaignId = null, List<string> automationWorkflowEmailId = null, List<string> automationWorkflowSmsId = null);

        /// <summary>
        /// Get attribution metrics for one or more Brevo campaigns or workflows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodFrom">When getting metrics for a specific period, define the starting datetime in RFC3339 format (optional)</param>
        /// <param name="periodTo">When getting metrics for a specific period, define the end datetime in RFC3339 format (optional)</param>
        /// <param name="emailCampaignId">The email campaign ID(s) to get metrics for (optional)</param>
        /// <param name="smsCampaignId">The SMS campaign ID(s) to get metrics for (optional)</param>
        /// <param name="automationWorkflowEmailId">The automation workflow ID(s) to get email attribution metrics for (optional)</param>
        /// <param name="automationWorkflowSmsId">The automation workflow ID(s) to get SMS attribution metrics for (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> EcommerceAttributionMetricsGetWithHttpInfo (DateTime? periodFrom = null, DateTime? periodTo = null, List<string> emailCampaignId = null, List<string> smsCampaignId = null, List<string> automationWorkflowEmailId = null, List<string> automationWorkflowSmsId = null);
        /// <summary>
        /// Get attributed product sales for a single Brevo campaign or workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign or automation workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 EcommerceAttributionProductsConversionSourceConversionSourceIdGet (string conversionSource, string conversionSourceId);

        /// <summary>
        /// Get attributed product sales for a single Brevo campaign or workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign or automation workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> EcommerceAttributionProductsConversionSourceConversionSourceIdGetWithHttpInfo (string conversionSource, string conversionSourceId);
        /// <summary>
        /// Get the ISO 4217 compliant display currency code for your Brevo account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 EcommerceConfigDisplayCurrencyGet ();

        /// <summary>
        /// Get the ISO 4217 compliant display currency code for your Brevo account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> EcommerceConfigDisplayCurrencyGetWithHttpInfo ();
        /// <summary>
        /// Return all your categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by category ids (optional)</param>
        /// <param name="name">Filter by category name (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the categories modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the categories created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>GetCategories</returns>
        GetCategories GetCategories (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, string modifiedSince = null, string createdSince = null);

        /// <summary>
        /// Return all your categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by category ids (optional)</param>
        /// <param name="name">Filter by category name (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the categories modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the categories created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>ApiResponse of GetCategories</returns>
        ApiResponse<GetCategories> GetCategoriesWithHttpInfo (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, string modifiedSince = null, string createdSince = null);
        /// <summary>
        /// Get a category details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>GetCategoryDetails</returns>
        GetCategoryDetails GetCategoryInfo (string id);

        /// <summary>
        /// Get a category details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>ApiResponse of GetCategoryDetails</returns>
        ApiResponse<GetCategoryDetails> GetCategoryInfoWithHttpInfo (string id);
        /// <summary>
        /// Get order details
        /// </summary>
        /// <remarks>
        /// Get all the orders
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>GetOrders</returns>
        GetOrders GetOrders (long? limit = null, long? offset = null, string sort = null, string modifiedSince = null, string createdSince = null);

        /// <summary>
        /// Get order details
        /// </summary>
        /// <remarks>
        /// Get all the orders
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>ApiResponse of GetOrders</returns>
        ApiResponse<GetOrders> GetOrdersWithHttpInfo (long? limit = null, long? offset = null, string sort = null, string modifiedSince = null, string createdSince = null);
        /// <summary>
        /// Get a product&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>GetProductDetails</returns>
        GetProductDetails GetProductInfo (string id);

        /// <summary>
        /// Get a product&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>ApiResponse of GetProductDetails</returns>
        ApiResponse<GetProductDetails> GetProductInfoWithHttpInfo (string id);
        /// <summary>
        /// Return all your products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by product ids (optional)</param>
        /// <param name="name">Filter by product name, minimum 3 characters should be present for search (optional)</param>
        /// <param name="priceLte">Price filter for products less than and equals to particular amount (optional)</param>
        /// <param name="priceGte">Price filter for products greater than and equals to particular amount (optional)</param>
        /// <param name="priceLt">Price filter for products less than particular amount (optional)</param>
        /// <param name="priceGt">Price filter for products greater than particular amount (optional)</param>
        /// <param name="priceEq">Price filter for products equals to particular amount (optional)</param>
        /// <param name="priceNe">Price filter for products not equals to particular amount (optional)</param>
        /// <param name="categories">Filter by category ids (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>GetProducts</returns>
        GetProducts GetProducts (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, decimal? priceLte = null, decimal? priceGte = null, decimal? priceLt = null, decimal? priceGt = null, decimal? priceEq = null, decimal? priceNe = null, List<string> categories = null, string modifiedSince = null, string createdSince = null);

        /// <summary>
        /// Return all your products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by product ids (optional)</param>
        /// <param name="name">Filter by product name, minimum 3 characters should be present for search (optional)</param>
        /// <param name="priceLte">Price filter for products less than and equals to particular amount (optional)</param>
        /// <param name="priceGte">Price filter for products greater than and equals to particular amount (optional)</param>
        /// <param name="priceLt">Price filter for products less than particular amount (optional)</param>
        /// <param name="priceGt">Price filter for products greater than particular amount (optional)</param>
        /// <param name="priceEq">Price filter for products equals to particular amount (optional)</param>
        /// <param name="priceNe">Price filter for products not equals to particular amount (optional)</param>
        /// <param name="categories">Filter by category ids (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>ApiResponse of GetProducts</returns>
        ApiResponse<GetProducts> GetProductsWithHttpInfo (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, decimal? priceLte = null, decimal? priceGte = null, decimal? priceLt = null, decimal? priceGt = null, decimal? priceEq = null, decimal? priceNe = null, List<string> categories = null, string modifiedSince = null, string createdSince = null);
        /// <summary>
        /// Set the ISO 4217 compliant display currency code for your Brevo account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setConfigDisplayCurrency">set ISO 4217 compliant display currency code payload</param>
        /// <returns>SetConfigDisplayCurrency</returns>
        SetConfigDisplayCurrency SetConfigDisplayCurrency (SetConfigDisplayCurrency setConfigDisplayCurrency);

        /// <summary>
        /// Set the ISO 4217 compliant display currency code for your Brevo account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setConfigDisplayCurrency">set ISO 4217 compliant display currency code payload</param>
        /// <returns>ApiResponse of SetConfigDisplayCurrency</returns>
        ApiResponse<SetConfigDisplayCurrency> SetConfigDisplayCurrencyWithHttpInfo (SetConfigDisplayCurrency setConfigDisplayCurrency);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create orders in batch
        /// </summary>
        /// <remarks>
        /// Create multiple orders at one time instead of one order at a time
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateBatchOrderAsync (OrderBatch orderBatch);

        /// <summary>
        /// Create orders in batch
        /// </summary>
        /// <remarks>
        /// Create multiple orders at one time instead of one order at a time
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateBatchOrderAsyncWithHttpInfo (OrderBatch orderBatch);
        /// <summary>
        /// Managing the status of the order
        /// </summary>
        /// <remarks>
        /// Manages the transactional status of the order
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateOrderAsync (Order order);

        /// <summary>
        /// Managing the status of the order
        /// </summary>
        /// <remarks>
        /// Manages the transactional status of the order
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrderAsyncWithHttpInfo (Order order);
        /// <summary>
        /// Create categories in batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchCategory">Values to create a batch of categories</param>
        /// <returns>Task of CreateUpdateBatchCategoryModel</returns>
        System.Threading.Tasks.Task<CreateUpdateBatchCategoryModel> CreateUpdateBatchCategoryAsync (CreateUpdateBatchCategory createUpdateBatchCategory);

        /// <summary>
        /// Create categories in batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchCategory">Values to create a batch of categories</param>
        /// <returns>Task of ApiResponse (CreateUpdateBatchCategoryModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateUpdateBatchCategoryModel>> CreateUpdateBatchCategoryAsyncWithHttpInfo (CreateUpdateBatchCategory createUpdateBatchCategory);
        /// <summary>
        /// Create products in batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchProducts">Values to create a batch of products</param>
        /// <returns>Task of CreateUpdateBatchProductsModel</returns>
        System.Threading.Tasks.Task<CreateUpdateBatchProductsModel> CreateUpdateBatchProductsAsync (CreateUpdateBatchProducts createUpdateBatchProducts);

        /// <summary>
        /// Create products in batch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchProducts">Values to create a batch of products</param>
        /// <returns>Task of ApiResponse (CreateUpdateBatchProductsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateUpdateBatchProductsModel>> CreateUpdateBatchProductsAsyncWithHttpInfo (CreateUpdateBatchProducts createUpdateBatchProducts);
        /// <summary>
        /// Create/Update a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateCategory">Values to create/update a category</param>
        /// <returns>Task of CreateCategoryModel</returns>
        System.Threading.Tasks.Task<CreateCategoryModel> CreateUpdateCategoryAsync (CreateUpdateCategory createUpdateCategory);

        /// <summary>
        /// Create/Update a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateCategory">Values to create/update a category</param>
        /// <returns>Task of ApiResponse (CreateCategoryModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCategoryModel>> CreateUpdateCategoryAsyncWithHttpInfo (CreateUpdateCategory createUpdateCategory);
        /// <summary>
        /// Create/Update a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateProduct">Values to create/update a product</param>
        /// <returns>Task of CreateProductModel</returns>
        System.Threading.Tasks.Task<CreateProductModel> CreateUpdateProductAsync (CreateUpdateProduct createUpdateProduct);

        /// <summary>
        /// Create/Update a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateProduct">Values to create/update a product</param>
        /// <returns>Task of ApiResponse (CreateProductModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateProductModel>> CreateUpdateProductAsyncWithHttpInfo (CreateUpdateProduct createUpdateProduct);
        /// <summary>
        /// Activate the eCommerce app
        /// </summary>
        /// <remarks>
        /// Getting access to Brevo eCommerce.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EcommerceActivatePostAsync ();

        /// <summary>
        /// Activate the eCommerce app
        /// </summary>
        /// <remarks>
        /// Getting access to Brevo eCommerce.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EcommerceActivatePostAsyncWithHttpInfo ();
        /// <summary>
        /// Get detailed attribution metrics for a single Brevo campaign or workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign type or workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> EcommerceAttributionMetricsConversionSourceConversionSourceIdGetAsync (string conversionSource, string conversionSourceId);

        /// <summary>
        /// Get detailed attribution metrics for a single Brevo campaign or workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign type or workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> EcommerceAttributionMetricsConversionSourceConversionSourceIdGetAsyncWithHttpInfo (string conversionSource, string conversionSourceId);
        /// <summary>
        /// Get attribution metrics for one or more Brevo campaigns or workflows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodFrom">When getting metrics for a specific period, define the starting datetime in RFC3339 format (optional)</param>
        /// <param name="periodTo">When getting metrics for a specific period, define the end datetime in RFC3339 format (optional)</param>
        /// <param name="emailCampaignId">The email campaign ID(s) to get metrics for (optional)</param>
        /// <param name="smsCampaignId">The SMS campaign ID(s) to get metrics for (optional)</param>
        /// <param name="automationWorkflowEmailId">The automation workflow ID(s) to get email attribution metrics for (optional)</param>
        /// <param name="automationWorkflowSmsId">The automation workflow ID(s) to get SMS attribution metrics for (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> EcommerceAttributionMetricsGetAsync (DateTime? periodFrom = null, DateTime? periodTo = null, List<string> emailCampaignId = null, List<string> smsCampaignId = null, List<string> automationWorkflowEmailId = null, List<string> automationWorkflowSmsId = null);

        /// <summary>
        /// Get attribution metrics for one or more Brevo campaigns or workflows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodFrom">When getting metrics for a specific period, define the starting datetime in RFC3339 format (optional)</param>
        /// <param name="periodTo">When getting metrics for a specific period, define the end datetime in RFC3339 format (optional)</param>
        /// <param name="emailCampaignId">The email campaign ID(s) to get metrics for (optional)</param>
        /// <param name="smsCampaignId">The SMS campaign ID(s) to get metrics for (optional)</param>
        /// <param name="automationWorkflowEmailId">The automation workflow ID(s) to get email attribution metrics for (optional)</param>
        /// <param name="automationWorkflowSmsId">The automation workflow ID(s) to get SMS attribution metrics for (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> EcommerceAttributionMetricsGetAsyncWithHttpInfo (DateTime? periodFrom = null, DateTime? periodTo = null, List<string> emailCampaignId = null, List<string> smsCampaignId = null, List<string> automationWorkflowEmailId = null, List<string> automationWorkflowSmsId = null);
        /// <summary>
        /// Get attributed product sales for a single Brevo campaign or workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign or automation workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> EcommerceAttributionProductsConversionSourceConversionSourceIdGetAsync (string conversionSource, string conversionSourceId);

        /// <summary>
        /// Get attributed product sales for a single Brevo campaign or workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign or automation workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> EcommerceAttributionProductsConversionSourceConversionSourceIdGetAsyncWithHttpInfo (string conversionSource, string conversionSourceId);
        /// <summary>
        /// Get the ISO 4217 compliant display currency code for your Brevo account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> EcommerceConfigDisplayCurrencyGetAsync ();

        /// <summary>
        /// Get the ISO 4217 compliant display currency code for your Brevo account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> EcommerceConfigDisplayCurrencyGetAsyncWithHttpInfo ();
        /// <summary>
        /// Return all your categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by category ids (optional)</param>
        /// <param name="name">Filter by category name (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the categories modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the categories created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of GetCategories</returns>
        System.Threading.Tasks.Task<GetCategories> GetCategoriesAsync (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, string modifiedSince = null, string createdSince = null);

        /// <summary>
        /// Return all your categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by category ids (optional)</param>
        /// <param name="name">Filter by category name (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the categories modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the categories created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of ApiResponse (GetCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCategories>> GetCategoriesAsyncWithHttpInfo (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, string modifiedSince = null, string createdSince = null);
        /// <summary>
        /// Get a category details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>Task of GetCategoryDetails</returns>
        System.Threading.Tasks.Task<GetCategoryDetails> GetCategoryInfoAsync (string id);

        /// <summary>
        /// Get a category details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>Task of ApiResponse (GetCategoryDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCategoryDetails>> GetCategoryInfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get order details
        /// </summary>
        /// <remarks>
        /// Get all the orders
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of GetOrders</returns>
        System.Threading.Tasks.Task<GetOrders> GetOrdersAsync (long? limit = null, long? offset = null, string sort = null, string modifiedSince = null, string createdSince = null);

        /// <summary>
        /// Get order details
        /// </summary>
        /// <remarks>
        /// Get all the orders
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of ApiResponse (GetOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOrders>> GetOrdersAsyncWithHttpInfo (long? limit = null, long? offset = null, string sort = null, string modifiedSince = null, string createdSince = null);
        /// <summary>
        /// Get a product&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>Task of GetProductDetails</returns>
        System.Threading.Tasks.Task<GetProductDetails> GetProductInfoAsync (string id);

        /// <summary>
        /// Get a product&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>Task of ApiResponse (GetProductDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductDetails>> GetProductInfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// Return all your products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by product ids (optional)</param>
        /// <param name="name">Filter by product name, minimum 3 characters should be present for search (optional)</param>
        /// <param name="priceLte">Price filter for products less than and equals to particular amount (optional)</param>
        /// <param name="priceGte">Price filter for products greater than and equals to particular amount (optional)</param>
        /// <param name="priceLt">Price filter for products less than particular amount (optional)</param>
        /// <param name="priceGt">Price filter for products greater than particular amount (optional)</param>
        /// <param name="priceEq">Price filter for products equals to particular amount (optional)</param>
        /// <param name="priceNe">Price filter for products not equals to particular amount (optional)</param>
        /// <param name="categories">Filter by category ids (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of GetProducts</returns>
        System.Threading.Tasks.Task<GetProducts> GetProductsAsync (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, decimal? priceLte = null, decimal? priceGte = null, decimal? priceLt = null, decimal? priceGt = null, decimal? priceEq = null, decimal? priceNe = null, List<string> categories = null, string modifiedSince = null, string createdSince = null);

        /// <summary>
        /// Return all your products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by product ids (optional)</param>
        /// <param name="name">Filter by product name, minimum 3 characters should be present for search (optional)</param>
        /// <param name="priceLte">Price filter for products less than and equals to particular amount (optional)</param>
        /// <param name="priceGte">Price filter for products greater than and equals to particular amount (optional)</param>
        /// <param name="priceLt">Price filter for products less than particular amount (optional)</param>
        /// <param name="priceGt">Price filter for products greater than particular amount (optional)</param>
        /// <param name="priceEq">Price filter for products equals to particular amount (optional)</param>
        /// <param name="priceNe">Price filter for products not equals to particular amount (optional)</param>
        /// <param name="categories">Filter by category ids (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of ApiResponse (GetProducts)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProducts>> GetProductsAsyncWithHttpInfo (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, decimal? priceLte = null, decimal? priceGte = null, decimal? priceLt = null, decimal? priceGt = null, decimal? priceEq = null, decimal? priceNe = null, List<string> categories = null, string modifiedSince = null, string createdSince = null);
        /// <summary>
        /// Set the ISO 4217 compliant display currency code for your Brevo account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setConfigDisplayCurrency">set ISO 4217 compliant display currency code payload</param>
        /// <returns>Task of SetConfigDisplayCurrency</returns>
        System.Threading.Tasks.Task<SetConfigDisplayCurrency> SetConfigDisplayCurrencyAsync (SetConfigDisplayCurrency setConfigDisplayCurrency);

        /// <summary>
        /// Set the ISO 4217 compliant display currency code for your Brevo account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setConfigDisplayCurrency">set ISO 4217 compliant display currency code payload</param>
        /// <returns>Task of ApiResponse (SetConfigDisplayCurrency)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetConfigDisplayCurrency>> SetConfigDisplayCurrencyAsyncWithHttpInfo (SetConfigDisplayCurrency setConfigDisplayCurrency);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EcommerceApi : IEcommerceApi
    {
        private brevo_csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EcommerceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EcommerceApi(String basePath)
        {
            this.Configuration = new brevo_csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EcommerceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EcommerceApi(brevo_csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = brevo_csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public brevo_csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public brevo_csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create orders in batch Create multiple orders at one time instead of one order at a time
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch"></param>
        /// <returns></returns>
        public void CreateBatchOrder (OrderBatch orderBatch)
        {
             CreateBatchOrderWithHttpInfo(orderBatch);
        }

        /// <summary>
        /// Create orders in batch Create multiple orders at one time instead of one order at a time
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateBatchOrderWithHttpInfo (OrderBatch orderBatch)
        {
            // verify the required parameter 'orderBatch' is set
            if (orderBatch == null)
                throw new ApiException(400, "Missing required parameter 'orderBatch' when calling EcommerceApi->CreateBatchOrder");

            var localVarPath = "./orders/status/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderBatch != null && orderBatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderBatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderBatch; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBatchOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create orders in batch Create multiple orders at one time instead of one order at a time
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateBatchOrderAsync (OrderBatch orderBatch)
        {
             await CreateBatchOrderAsyncWithHttpInfo(orderBatch);

        }

        /// <summary>
        /// Create orders in batch Create multiple orders at one time instead of one order at a time
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBatch"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateBatchOrderAsyncWithHttpInfo (OrderBatch orderBatch)
        {
            // verify the required parameter 'orderBatch' is set
            if (orderBatch == null)
                throw new ApiException(400, "Missing required parameter 'orderBatch' when calling EcommerceApi->CreateBatchOrder");

            var localVarPath = "./orders/status/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderBatch != null && orderBatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderBatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderBatch; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBatchOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Managing the status of the order Manages the transactional status of the order
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns></returns>
        public void CreateOrder (Order order)
        {
             CreateOrderWithHttpInfo(order);
        }

        /// <summary>
        /// Managing the status of the order Manages the transactional status of the order
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateOrderWithHttpInfo (Order order)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling EcommerceApi->CreateOrder");

            var localVarPath = "./orders/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Managing the status of the order Manages the transactional status of the order
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateOrderAsync (Order order)
        {
             await CreateOrderAsyncWithHttpInfo(order);

        }

        /// <summary>
        /// Managing the status of the order Manages the transactional status of the order
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrderAsyncWithHttpInfo (Order order)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling EcommerceApi->CreateOrder");

            var localVarPath = "./orders/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create categories in batch 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchCategory">Values to create a batch of categories</param>
        /// <returns>CreateUpdateBatchCategoryModel</returns>
        public CreateUpdateBatchCategoryModel CreateUpdateBatchCategory (CreateUpdateBatchCategory createUpdateBatchCategory)
        {
             ApiResponse<CreateUpdateBatchCategoryModel> localVarResponse = CreateUpdateBatchCategoryWithHttpInfo(createUpdateBatchCategory);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create categories in batch 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchCategory">Values to create a batch of categories</param>
        /// <returns>ApiResponse of CreateUpdateBatchCategoryModel</returns>
        public ApiResponse< CreateUpdateBatchCategoryModel > CreateUpdateBatchCategoryWithHttpInfo (CreateUpdateBatchCategory createUpdateBatchCategory)
        {
            // verify the required parameter 'createUpdateBatchCategory' is set
            if (createUpdateBatchCategory == null)
                throw new ApiException(400, "Missing required parameter 'createUpdateBatchCategory' when calling EcommerceApi->CreateUpdateBatchCategory");

            var localVarPath = "./categories/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUpdateBatchCategory != null && createUpdateBatchCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUpdateBatchCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUpdateBatchCategory; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpdateBatchCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateUpdateBatchCategoryModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateUpdateBatchCategoryModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateUpdateBatchCategoryModel)));
        }

        /// <summary>
        /// Create categories in batch 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchCategory">Values to create a batch of categories</param>
        /// <returns>Task of CreateUpdateBatchCategoryModel</returns>
        public async System.Threading.Tasks.Task<CreateUpdateBatchCategoryModel> CreateUpdateBatchCategoryAsync (CreateUpdateBatchCategory createUpdateBatchCategory)
        {
             ApiResponse<CreateUpdateBatchCategoryModel> localVarResponse = await CreateUpdateBatchCategoryAsyncWithHttpInfo(createUpdateBatchCategory);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create categories in batch 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchCategory">Values to create a batch of categories</param>
        /// <returns>Task of ApiResponse (CreateUpdateBatchCategoryModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateUpdateBatchCategoryModel>> CreateUpdateBatchCategoryAsyncWithHttpInfo (CreateUpdateBatchCategory createUpdateBatchCategory)
        {
            // verify the required parameter 'createUpdateBatchCategory' is set
            if (createUpdateBatchCategory == null)
                throw new ApiException(400, "Missing required parameter 'createUpdateBatchCategory' when calling EcommerceApi->CreateUpdateBatchCategory");

            var localVarPath = "./categories/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUpdateBatchCategory != null && createUpdateBatchCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUpdateBatchCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUpdateBatchCategory; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpdateBatchCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateUpdateBatchCategoryModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateUpdateBatchCategoryModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateUpdateBatchCategoryModel)));
        }

        /// <summary>
        /// Create products in batch 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchProducts">Values to create a batch of products</param>
        /// <returns>CreateUpdateBatchProductsModel</returns>
        public CreateUpdateBatchProductsModel CreateUpdateBatchProducts (CreateUpdateBatchProducts createUpdateBatchProducts)
        {
             ApiResponse<CreateUpdateBatchProductsModel> localVarResponse = CreateUpdateBatchProductsWithHttpInfo(createUpdateBatchProducts);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create products in batch 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchProducts">Values to create a batch of products</param>
        /// <returns>ApiResponse of CreateUpdateBatchProductsModel</returns>
        public ApiResponse< CreateUpdateBatchProductsModel > CreateUpdateBatchProductsWithHttpInfo (CreateUpdateBatchProducts createUpdateBatchProducts)
        {
            // verify the required parameter 'createUpdateBatchProducts' is set
            if (createUpdateBatchProducts == null)
                throw new ApiException(400, "Missing required parameter 'createUpdateBatchProducts' when calling EcommerceApi->CreateUpdateBatchProducts");

            var localVarPath = "./products/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUpdateBatchProducts != null && createUpdateBatchProducts.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUpdateBatchProducts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUpdateBatchProducts; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpdateBatchProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateUpdateBatchProductsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateUpdateBatchProductsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateUpdateBatchProductsModel)));
        }

        /// <summary>
        /// Create products in batch 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchProducts">Values to create a batch of products</param>
        /// <returns>Task of CreateUpdateBatchProductsModel</returns>
        public async System.Threading.Tasks.Task<CreateUpdateBatchProductsModel> CreateUpdateBatchProductsAsync (CreateUpdateBatchProducts createUpdateBatchProducts)
        {
             ApiResponse<CreateUpdateBatchProductsModel> localVarResponse = await CreateUpdateBatchProductsAsyncWithHttpInfo(createUpdateBatchProducts);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create products in batch 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateBatchProducts">Values to create a batch of products</param>
        /// <returns>Task of ApiResponse (CreateUpdateBatchProductsModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateUpdateBatchProductsModel>> CreateUpdateBatchProductsAsyncWithHttpInfo (CreateUpdateBatchProducts createUpdateBatchProducts)
        {
            // verify the required parameter 'createUpdateBatchProducts' is set
            if (createUpdateBatchProducts == null)
                throw new ApiException(400, "Missing required parameter 'createUpdateBatchProducts' when calling EcommerceApi->CreateUpdateBatchProducts");

            var localVarPath = "./products/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUpdateBatchProducts != null && createUpdateBatchProducts.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUpdateBatchProducts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUpdateBatchProducts; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpdateBatchProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateUpdateBatchProductsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateUpdateBatchProductsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateUpdateBatchProductsModel)));
        }

        /// <summary>
        /// Create/Update a category 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateCategory">Values to create/update a category</param>
        /// <returns>CreateCategoryModel</returns>
        public CreateCategoryModel CreateUpdateCategory (CreateUpdateCategory createUpdateCategory)
        {
             ApiResponse<CreateCategoryModel> localVarResponse = CreateUpdateCategoryWithHttpInfo(createUpdateCategory);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create/Update a category 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateCategory">Values to create/update a category</param>
        /// <returns>ApiResponse of CreateCategoryModel</returns>
        public ApiResponse< CreateCategoryModel > CreateUpdateCategoryWithHttpInfo (CreateUpdateCategory createUpdateCategory)
        {
            // verify the required parameter 'createUpdateCategory' is set
            if (createUpdateCategory == null)
                throw new ApiException(400, "Missing required parameter 'createUpdateCategory' when calling EcommerceApi->CreateUpdateCategory");

            var localVarPath = "./categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUpdateCategory != null && createUpdateCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUpdateCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUpdateCategory; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpdateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCategoryModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateCategoryModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCategoryModel)));
        }

        /// <summary>
        /// Create/Update a category 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateCategory">Values to create/update a category</param>
        /// <returns>Task of CreateCategoryModel</returns>
        public async System.Threading.Tasks.Task<CreateCategoryModel> CreateUpdateCategoryAsync (CreateUpdateCategory createUpdateCategory)
        {
             ApiResponse<CreateCategoryModel> localVarResponse = await CreateUpdateCategoryAsyncWithHttpInfo(createUpdateCategory);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create/Update a category 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateCategory">Values to create/update a category</param>
        /// <returns>Task of ApiResponse (CreateCategoryModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateCategoryModel>> CreateUpdateCategoryAsyncWithHttpInfo (CreateUpdateCategory createUpdateCategory)
        {
            // verify the required parameter 'createUpdateCategory' is set
            if (createUpdateCategory == null)
                throw new ApiException(400, "Missing required parameter 'createUpdateCategory' when calling EcommerceApi->CreateUpdateCategory");

            var localVarPath = "./categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUpdateCategory != null && createUpdateCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUpdateCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUpdateCategory; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpdateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCategoryModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateCategoryModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCategoryModel)));
        }

        /// <summary>
        /// Create/Update a product 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateProduct">Values to create/update a product</param>
        /// <returns>CreateProductModel</returns>
        public CreateProductModel CreateUpdateProduct (CreateUpdateProduct createUpdateProduct)
        {
             ApiResponse<CreateProductModel> localVarResponse = CreateUpdateProductWithHttpInfo(createUpdateProduct);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create/Update a product 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateProduct">Values to create/update a product</param>
        /// <returns>ApiResponse of CreateProductModel</returns>
        public ApiResponse< CreateProductModel > CreateUpdateProductWithHttpInfo (CreateUpdateProduct createUpdateProduct)
        {
            // verify the required parameter 'createUpdateProduct' is set
            if (createUpdateProduct == null)
                throw new ApiException(400, "Missing required parameter 'createUpdateProduct' when calling EcommerceApi->CreateUpdateProduct");

            var localVarPath = "./products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUpdateProduct != null && createUpdateProduct.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUpdateProduct); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUpdateProduct; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpdateProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateProductModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateProductModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateProductModel)));
        }

        /// <summary>
        /// Create/Update a product 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateProduct">Values to create/update a product</param>
        /// <returns>Task of CreateProductModel</returns>
        public async System.Threading.Tasks.Task<CreateProductModel> CreateUpdateProductAsync (CreateUpdateProduct createUpdateProduct)
        {
             ApiResponse<CreateProductModel> localVarResponse = await CreateUpdateProductAsyncWithHttpInfo(createUpdateProduct);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create/Update a product 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateProduct">Values to create/update a product</param>
        /// <returns>Task of ApiResponse (CreateProductModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateProductModel>> CreateUpdateProductAsyncWithHttpInfo (CreateUpdateProduct createUpdateProduct)
        {
            // verify the required parameter 'createUpdateProduct' is set
            if (createUpdateProduct == null)
                throw new ApiException(400, "Missing required parameter 'createUpdateProduct' when calling EcommerceApi->CreateUpdateProduct");

            var localVarPath = "./products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUpdateProduct != null && createUpdateProduct.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUpdateProduct); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUpdateProduct; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUpdateProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateProductModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateProductModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateProductModel)));
        }

        /// <summary>
        /// Activate the eCommerce app Getting access to Brevo eCommerce.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void EcommerceActivatePost ()
        {
             EcommerceActivatePostWithHttpInfo();
        }

        /// <summary>
        /// Activate the eCommerce app Getting access to Brevo eCommerce.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EcommerceActivatePostWithHttpInfo ()
        {

            var localVarPath = "./ecommerce/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EcommerceActivatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Activate the eCommerce app Getting access to Brevo eCommerce.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EcommerceActivatePostAsync ()
        {
             await EcommerceActivatePostAsyncWithHttpInfo();

        }

        /// <summary>
        /// Activate the eCommerce app Getting access to Brevo eCommerce.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EcommerceActivatePostAsyncWithHttpInfo ()
        {

            var localVarPath = "./ecommerce/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EcommerceActivatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get detailed attribution metrics for a single Brevo campaign or workflow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign type or workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 EcommerceAttributionMetricsConversionSourceConversionSourceIdGet (string conversionSource, string conversionSourceId)
        {
             ApiResponse<InlineResponse2007> localVarResponse = EcommerceAttributionMetricsConversionSourceConversionSourceIdGetWithHttpInfo(conversionSource, conversionSourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed attribution metrics for a single Brevo campaign or workflow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign type or workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > EcommerceAttributionMetricsConversionSourceConversionSourceIdGetWithHttpInfo (string conversionSource, string conversionSourceId)
        {
            // verify the required parameter 'conversionSource' is set
            if (conversionSource == null)
                throw new ApiException(400, "Missing required parameter 'conversionSource' when calling EcommerceApi->EcommerceAttributionMetricsConversionSourceConversionSourceIdGet");
            // verify the required parameter 'conversionSourceId' is set
            if (conversionSourceId == null)
                throw new ApiException(400, "Missing required parameter 'conversionSourceId' when calling EcommerceApi->EcommerceAttributionMetricsConversionSourceConversionSourceIdGet");

            var localVarPath = "./ecommerce/attribution/metrics/{conversionSource}/{conversionSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conversionSource != null) localVarPathParams.Add("conversionSource", this.Configuration.ApiClient.ParameterToString(conversionSource)); // path parameter
            if (conversionSourceId != null) localVarPathParams.Add("conversionSourceId", this.Configuration.ApiClient.ParameterToString(conversionSourceId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EcommerceAttributionMetricsConversionSourceConversionSourceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Get detailed attribution metrics for a single Brevo campaign or workflow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign type or workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> EcommerceAttributionMetricsConversionSourceConversionSourceIdGetAsync (string conversionSource, string conversionSourceId)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await EcommerceAttributionMetricsConversionSourceConversionSourceIdGetAsyncWithHttpInfo(conversionSource, conversionSourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed attribution metrics for a single Brevo campaign or workflow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign type or workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> EcommerceAttributionMetricsConversionSourceConversionSourceIdGetAsyncWithHttpInfo (string conversionSource, string conversionSourceId)
        {
            // verify the required parameter 'conversionSource' is set
            if (conversionSource == null)
                throw new ApiException(400, "Missing required parameter 'conversionSource' when calling EcommerceApi->EcommerceAttributionMetricsConversionSourceConversionSourceIdGet");
            // verify the required parameter 'conversionSourceId' is set
            if (conversionSourceId == null)
                throw new ApiException(400, "Missing required parameter 'conversionSourceId' when calling EcommerceApi->EcommerceAttributionMetricsConversionSourceConversionSourceIdGet");

            var localVarPath = "./ecommerce/attribution/metrics/{conversionSource}/{conversionSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conversionSource != null) localVarPathParams.Add("conversionSource", this.Configuration.ApiClient.ParameterToString(conversionSource)); // path parameter
            if (conversionSourceId != null) localVarPathParams.Add("conversionSourceId", this.Configuration.ApiClient.ParameterToString(conversionSourceId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EcommerceAttributionMetricsConversionSourceConversionSourceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Get attribution metrics for one or more Brevo campaigns or workflows 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodFrom">When getting metrics for a specific period, define the starting datetime in RFC3339 format (optional)</param>
        /// <param name="periodTo">When getting metrics for a specific period, define the end datetime in RFC3339 format (optional)</param>
        /// <param name="emailCampaignId">The email campaign ID(s) to get metrics for (optional)</param>
        /// <param name="smsCampaignId">The SMS campaign ID(s) to get metrics for (optional)</param>
        /// <param name="automationWorkflowEmailId">The automation workflow ID(s) to get email attribution metrics for (optional)</param>
        /// <param name="automationWorkflowSmsId">The automation workflow ID(s) to get SMS attribution metrics for (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 EcommerceAttributionMetricsGet (DateTime? periodFrom = null, DateTime? periodTo = null, List<string> emailCampaignId = null, List<string> smsCampaignId = null, List<string> automationWorkflowEmailId = null, List<string> automationWorkflowSmsId = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = EcommerceAttributionMetricsGetWithHttpInfo(periodFrom, periodTo, emailCampaignId, smsCampaignId, automationWorkflowEmailId, automationWorkflowSmsId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get attribution metrics for one or more Brevo campaigns or workflows 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodFrom">When getting metrics for a specific period, define the starting datetime in RFC3339 format (optional)</param>
        /// <param name="periodTo">When getting metrics for a specific period, define the end datetime in RFC3339 format (optional)</param>
        /// <param name="emailCampaignId">The email campaign ID(s) to get metrics for (optional)</param>
        /// <param name="smsCampaignId">The SMS campaign ID(s) to get metrics for (optional)</param>
        /// <param name="automationWorkflowEmailId">The automation workflow ID(s) to get email attribution metrics for (optional)</param>
        /// <param name="automationWorkflowSmsId">The automation workflow ID(s) to get SMS attribution metrics for (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > EcommerceAttributionMetricsGetWithHttpInfo (DateTime? periodFrom = null, DateTime? periodTo = null, List<string> emailCampaignId = null, List<string> smsCampaignId = null, List<string> automationWorkflowEmailId = null, List<string> automationWorkflowSmsId = null)
        {

            var localVarPath = "./ecommerce/attribution/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (periodFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "periodFrom", periodFrom)); // query parameter
            if (periodTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "periodTo", periodTo)); // query parameter
            if (emailCampaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "emailCampaignId[]", emailCampaignId)); // query parameter
            if (smsCampaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "smsCampaignId[]", smsCampaignId)); // query parameter
            if (automationWorkflowEmailId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "automationWorkflowEmailId[]", automationWorkflowEmailId)); // query parameter
            if (automationWorkflowSmsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "automationWorkflowSmsId[]", automationWorkflowSmsId)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EcommerceAttributionMetricsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Get attribution metrics for one or more Brevo campaigns or workflows 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodFrom">When getting metrics for a specific period, define the starting datetime in RFC3339 format (optional)</param>
        /// <param name="periodTo">When getting metrics for a specific period, define the end datetime in RFC3339 format (optional)</param>
        /// <param name="emailCampaignId">The email campaign ID(s) to get metrics for (optional)</param>
        /// <param name="smsCampaignId">The SMS campaign ID(s) to get metrics for (optional)</param>
        /// <param name="automationWorkflowEmailId">The automation workflow ID(s) to get email attribution metrics for (optional)</param>
        /// <param name="automationWorkflowSmsId">The automation workflow ID(s) to get SMS attribution metrics for (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> EcommerceAttributionMetricsGetAsync (DateTime? periodFrom = null, DateTime? periodTo = null, List<string> emailCampaignId = null, List<string> smsCampaignId = null, List<string> automationWorkflowEmailId = null, List<string> automationWorkflowSmsId = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await EcommerceAttributionMetricsGetAsyncWithHttpInfo(periodFrom, periodTo, emailCampaignId, smsCampaignId, automationWorkflowEmailId, automationWorkflowSmsId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get attribution metrics for one or more Brevo campaigns or workflows 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodFrom">When getting metrics for a specific period, define the starting datetime in RFC3339 format (optional)</param>
        /// <param name="periodTo">When getting metrics for a specific period, define the end datetime in RFC3339 format (optional)</param>
        /// <param name="emailCampaignId">The email campaign ID(s) to get metrics for (optional)</param>
        /// <param name="smsCampaignId">The SMS campaign ID(s) to get metrics for (optional)</param>
        /// <param name="automationWorkflowEmailId">The automation workflow ID(s) to get email attribution metrics for (optional)</param>
        /// <param name="automationWorkflowSmsId">The automation workflow ID(s) to get SMS attribution metrics for (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> EcommerceAttributionMetricsGetAsyncWithHttpInfo (DateTime? periodFrom = null, DateTime? periodTo = null, List<string> emailCampaignId = null, List<string> smsCampaignId = null, List<string> automationWorkflowEmailId = null, List<string> automationWorkflowSmsId = null)
        {

            var localVarPath = "./ecommerce/attribution/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (periodFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "periodFrom", periodFrom)); // query parameter
            if (periodTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "periodTo", periodTo)); // query parameter
            if (emailCampaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "emailCampaignId[]", emailCampaignId)); // query parameter
            if (smsCampaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "smsCampaignId[]", smsCampaignId)); // query parameter
            if (automationWorkflowEmailId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "automationWorkflowEmailId[]", automationWorkflowEmailId)); // query parameter
            if (automationWorkflowSmsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "automationWorkflowSmsId[]", automationWorkflowSmsId)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EcommerceAttributionMetricsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Get attributed product sales for a single Brevo campaign or workflow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign or automation workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 EcommerceAttributionProductsConversionSourceConversionSourceIdGet (string conversionSource, string conversionSourceId)
        {
             ApiResponse<InlineResponse2008> localVarResponse = EcommerceAttributionProductsConversionSourceConversionSourceIdGetWithHttpInfo(conversionSource, conversionSourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get attributed product sales for a single Brevo campaign or workflow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign or automation workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse< InlineResponse2008 > EcommerceAttributionProductsConversionSourceConversionSourceIdGetWithHttpInfo (string conversionSource, string conversionSourceId)
        {
            // verify the required parameter 'conversionSource' is set
            if (conversionSource == null)
                throw new ApiException(400, "Missing required parameter 'conversionSource' when calling EcommerceApi->EcommerceAttributionProductsConversionSourceConversionSourceIdGet");
            // verify the required parameter 'conversionSourceId' is set
            if (conversionSourceId == null)
                throw new ApiException(400, "Missing required parameter 'conversionSourceId' when calling EcommerceApi->EcommerceAttributionProductsConversionSourceConversionSourceIdGet");

            var localVarPath = "./ecommerce/attribution/products/{conversionSource}/{conversionSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conversionSource != null) localVarPathParams.Add("conversionSource", this.Configuration.ApiClient.ParameterToString(conversionSource)); // path parameter
            if (conversionSourceId != null) localVarPathParams.Add("conversionSourceId", this.Configuration.ApiClient.ParameterToString(conversionSourceId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EcommerceAttributionProductsConversionSourceConversionSourceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Get attributed product sales for a single Brevo campaign or workflow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign or automation workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> EcommerceAttributionProductsConversionSourceConversionSourceIdGetAsync (string conversionSource, string conversionSourceId)
        {
             ApiResponse<InlineResponse2008> localVarResponse = await EcommerceAttributionProductsConversionSourceConversionSourceIdGetAsyncWithHttpInfo(conversionSource, conversionSourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get attributed product sales for a single Brevo campaign or workflow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversionSource">The Brevo campaign or automation workflow type for which data will be retrieved</param>
        /// <param name="conversionSourceId">The Brevo campaign or automation workflow id for which data will be retrieved</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> EcommerceAttributionProductsConversionSourceConversionSourceIdGetAsyncWithHttpInfo (string conversionSource, string conversionSourceId)
        {
            // verify the required parameter 'conversionSource' is set
            if (conversionSource == null)
                throw new ApiException(400, "Missing required parameter 'conversionSource' when calling EcommerceApi->EcommerceAttributionProductsConversionSourceConversionSourceIdGet");
            // verify the required parameter 'conversionSourceId' is set
            if (conversionSourceId == null)
                throw new ApiException(400, "Missing required parameter 'conversionSourceId' when calling EcommerceApi->EcommerceAttributionProductsConversionSourceConversionSourceIdGet");

            var localVarPath = "./ecommerce/attribution/products/{conversionSource}/{conversionSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conversionSource != null) localVarPathParams.Add("conversionSource", this.Configuration.ApiClient.ParameterToString(conversionSource)); // path parameter
            if (conversionSourceId != null) localVarPathParams.Add("conversionSourceId", this.Configuration.ApiClient.ParameterToString(conversionSourceId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EcommerceAttributionProductsConversionSourceConversionSourceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Get the ISO 4217 compliant display currency code for your Brevo account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 EcommerceConfigDisplayCurrencyGet ()
        {
             ApiResponse<InlineResponse2005> localVarResponse = EcommerceConfigDisplayCurrencyGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the ISO 4217 compliant display currency code for your Brevo account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse< InlineResponse2005 > EcommerceConfigDisplayCurrencyGetWithHttpInfo ()
        {

            var localVarPath = "./ecommerce/config/displayCurrency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EcommerceConfigDisplayCurrencyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Get the ISO 4217 compliant display currency code for your Brevo account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> EcommerceConfigDisplayCurrencyGetAsync ()
        {
             ApiResponse<InlineResponse2005> localVarResponse = await EcommerceConfigDisplayCurrencyGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the ISO 4217 compliant display currency code for your Brevo account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> EcommerceConfigDisplayCurrencyGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./ecommerce/config/displayCurrency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EcommerceConfigDisplayCurrencyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Return all your categories 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by category ids (optional)</param>
        /// <param name="name">Filter by category name (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the categories modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the categories created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>GetCategories</returns>
        public GetCategories GetCategories (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, string modifiedSince = null, string createdSince = null)
        {
             ApiResponse<GetCategories> localVarResponse = GetCategoriesWithHttpInfo(limit, offset, sort, ids, name, modifiedSince, createdSince);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return all your categories 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by category ids (optional)</param>
        /// <param name="name">Filter by category name (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the categories modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the categories created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>ApiResponse of GetCategories</returns>
        public ApiResponse< GetCategories > GetCategoriesWithHttpInfo (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, string modifiedSince = null, string createdSince = null)
        {

            var localVarPath = "./categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCategories>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCategories) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCategories)));
        }

        /// <summary>
        /// Return all your categories 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by category ids (optional)</param>
        /// <param name="name">Filter by category name (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the categories modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the categories created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of GetCategories</returns>
        public async System.Threading.Tasks.Task<GetCategories> GetCategoriesAsync (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, string modifiedSince = null, string createdSince = null)
        {
             ApiResponse<GetCategories> localVarResponse = await GetCategoriesAsyncWithHttpInfo(limit, offset, sort, ids, name, modifiedSince, createdSince);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return all your categories 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by category ids (optional)</param>
        /// <param name="name">Filter by category name (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the categories modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the categories created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of ApiResponse (GetCategories)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCategories>> GetCategoriesAsyncWithHttpInfo (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, string modifiedSince = null, string createdSince = null)
        {

            var localVarPath = "./categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCategories>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCategories) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCategories)));
        }

        /// <summary>
        /// Get a category details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>GetCategoryDetails</returns>
        public GetCategoryDetails GetCategoryInfo (string id)
        {
             ApiResponse<GetCategoryDetails> localVarResponse = GetCategoryInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a category details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>ApiResponse of GetCategoryDetails</returns>
        public ApiResponse< GetCategoryDetails > GetCategoryInfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EcommerceApi->GetCategoryInfo");

            var localVarPath = "./categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCategoryDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCategoryDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCategoryDetails)));
        }

        /// <summary>
        /// Get a category details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>Task of GetCategoryDetails</returns>
        public async System.Threading.Tasks.Task<GetCategoryDetails> GetCategoryInfoAsync (string id)
        {
             ApiResponse<GetCategoryDetails> localVarResponse = await GetCategoryInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a category details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Category ID</param>
        /// <returns>Task of ApiResponse (GetCategoryDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCategoryDetails>> GetCategoryInfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EcommerceApi->GetCategoryInfo");

            var localVarPath = "./categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCategoryDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCategoryDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCategoryDetails)));
        }

        /// <summary>
        /// Get order details Get all the orders
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>GetOrders</returns>
        public GetOrders GetOrders (long? limit = null, long? offset = null, string sort = null, string modifiedSince = null, string createdSince = null)
        {
             ApiResponse<GetOrders> localVarResponse = GetOrdersWithHttpInfo(limit, offset, sort, modifiedSince, createdSince);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get order details Get all the orders
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>ApiResponse of GetOrders</returns>
        public ApiResponse< GetOrders > GetOrdersWithHttpInfo (long? limit = null, long? offset = null, string sort = null, string modifiedSince = null, string createdSince = null)
        {

            var localVarPath = "./orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetOrders) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrders)));
        }

        /// <summary>
        /// Get order details Get all the orders
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of GetOrders</returns>
        public async System.Threading.Tasks.Task<GetOrders> GetOrdersAsync (long? limit = null, long? offset = null, string sort = null, string modifiedSince = null, string createdSince = null)
        {
             ApiResponse<GetOrders> localVarResponse = await GetOrdersAsyncWithHttpInfo(limit, offset, sort, modifiedSince, createdSince);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get order details Get all the orders
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of ApiResponse (GetOrders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOrders>> GetOrdersAsyncWithHttpInfo (long? limit = null, long? offset = null, string sort = null, string modifiedSince = null, string createdSince = null)
        {

            var localVarPath = "./orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetOrders) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrders)));
        }

        /// <summary>
        /// Get a product&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>GetProductDetails</returns>
        public GetProductDetails GetProductInfo (string id)
        {
             ApiResponse<GetProductDetails> localVarResponse = GetProductInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a product&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>ApiResponse of GetProductDetails</returns>
        public ApiResponse< GetProductDetails > GetProductInfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EcommerceApi->GetProductInfo");

            var localVarPath = "./products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetProductDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetProductDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetProductDetails)));
        }

        /// <summary>
        /// Get a product&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>Task of GetProductDetails</returns>
        public async System.Threading.Tasks.Task<GetProductDetails> GetProductInfoAsync (string id)
        {
             ApiResponse<GetProductDetails> localVarResponse = await GetProductInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a product&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product ID</param>
        /// <returns>Task of ApiResponse (GetProductDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetProductDetails>> GetProductInfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EcommerceApi->GetProductInfo");

            var localVarPath = "./products/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetProductDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetProductDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetProductDetails)));
        }

        /// <summary>
        /// Return all your products 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by product ids (optional)</param>
        /// <param name="name">Filter by product name, minimum 3 characters should be present for search (optional)</param>
        /// <param name="priceLte">Price filter for products less than and equals to particular amount (optional)</param>
        /// <param name="priceGte">Price filter for products greater than and equals to particular amount (optional)</param>
        /// <param name="priceLt">Price filter for products less than particular amount (optional)</param>
        /// <param name="priceGt">Price filter for products greater than particular amount (optional)</param>
        /// <param name="priceEq">Price filter for products equals to particular amount (optional)</param>
        /// <param name="priceNe">Price filter for products not equals to particular amount (optional)</param>
        /// <param name="categories">Filter by category ids (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>GetProducts</returns>
        public GetProducts GetProducts (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, decimal? priceLte = null, decimal? priceGte = null, decimal? priceLt = null, decimal? priceGt = null, decimal? priceEq = null, decimal? priceNe = null, List<string> categories = null, string modifiedSince = null, string createdSince = null)
        {
             ApiResponse<GetProducts> localVarResponse = GetProductsWithHttpInfo(limit, offset, sort, ids, name, priceLte, priceGte, priceLt, priceGt, priceEq, priceNe, categories, modifiedSince, createdSince);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return all your products 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by product ids (optional)</param>
        /// <param name="name">Filter by product name, minimum 3 characters should be present for search (optional)</param>
        /// <param name="priceLte">Price filter for products less than and equals to particular amount (optional)</param>
        /// <param name="priceGte">Price filter for products greater than and equals to particular amount (optional)</param>
        /// <param name="priceLt">Price filter for products less than particular amount (optional)</param>
        /// <param name="priceGt">Price filter for products greater than particular amount (optional)</param>
        /// <param name="priceEq">Price filter for products equals to particular amount (optional)</param>
        /// <param name="priceNe">Price filter for products not equals to particular amount (optional)</param>
        /// <param name="categories">Filter by category ids (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>ApiResponse of GetProducts</returns>
        public ApiResponse< GetProducts > GetProductsWithHttpInfo (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, decimal? priceLte = null, decimal? priceGte = null, decimal? priceLt = null, decimal? priceGt = null, decimal? priceEq = null, decimal? priceNe = null, List<string> categories = null, string modifiedSince = null, string createdSince = null)
        {

            var localVarPath = "./products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (priceLte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[lte]", priceLte)); // query parameter
            if (priceGte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[gte]", priceGte)); // query parameter
            if (priceLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[lt]", priceLt)); // query parameter
            if (priceGt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[gt]", priceGt)); // query parameter
            if (priceEq != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[eq]", priceEq)); // query parameter
            if (priceNe != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[ne]", priceNe)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "categories", categories)); // query parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetProducts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetProducts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetProducts)));
        }

        /// <summary>
        /// Return all your products 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by product ids (optional)</param>
        /// <param name="name">Filter by product name, minimum 3 characters should be present for search (optional)</param>
        /// <param name="priceLte">Price filter for products less than and equals to particular amount (optional)</param>
        /// <param name="priceGte">Price filter for products greater than and equals to particular amount (optional)</param>
        /// <param name="priceLt">Price filter for products less than particular amount (optional)</param>
        /// <param name="priceGt">Price filter for products greater than particular amount (optional)</param>
        /// <param name="priceEq">Price filter for products equals to particular amount (optional)</param>
        /// <param name="priceNe">Price filter for products not equals to particular amount (optional)</param>
        /// <param name="categories">Filter by category ids (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of GetProducts</returns>
        public async System.Threading.Tasks.Task<GetProducts> GetProductsAsync (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, decimal? priceLte = null, decimal? priceGte = null, decimal? priceLt = null, decimal? priceGt = null, decimal? priceEq = null, decimal? priceNe = null, List<string> categories = null, string modifiedSince = null, string createdSince = null)
        {
             ApiResponse<GetProducts> localVarResponse = await GetProductsAsyncWithHttpInfo(limit, offset, sort, ids, name, priceLte, priceGte, priceLt, priceGt, priceEq, priceNe, categories, modifiedSince, createdSince);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return all your products 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="ids">Filter by product ids (optional)</param>
        /// <param name="name">Filter by product name, minimum 3 characters should be present for search (optional)</param>
        /// <param name="priceLte">Price filter for products less than and equals to particular amount (optional)</param>
        /// <param name="priceGte">Price filter for products greater than and equals to particular amount (optional)</param>
        /// <param name="priceLt">Price filter for products less than particular amount (optional)</param>
        /// <param name="priceGt">Price filter for products greater than particular amount (optional)</param>
        /// <param name="priceEq">Price filter for products equals to particular amount (optional)</param>
        /// <param name="priceNe">Price filter for products not equals to particular amount (optional)</param>
        /// <param name="categories">Filter by category ids (optional)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)</param>
        /// <returns>Task of ApiResponse (GetProducts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetProducts>> GetProductsAsyncWithHttpInfo (long? limit = null, long? offset = null, string sort = null, List<string> ids = null, string name = null, decimal? priceLte = null, decimal? priceGte = null, decimal? priceLt = null, decimal? priceGt = null, decimal? priceEq = null, decimal? priceNe = null, List<string> categories = null, string modifiedSince = null, string createdSince = null)
        {

            var localVarPath = "./products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (priceLte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[lte]", priceLte)); // query parameter
            if (priceGte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[gte]", priceGte)); // query parameter
            if (priceLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[lt]", priceLt)); // query parameter
            if (priceGt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[gt]", priceGt)); // query parameter
            if (priceEq != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[eq]", priceEq)); // query parameter
            if (priceNe != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price[ne]", priceNe)); // query parameter
            if (categories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "categories", categories)); // query parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetProducts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetProducts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetProducts)));
        }

        /// <summary>
        /// Set the ISO 4217 compliant display currency code for your Brevo account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setConfigDisplayCurrency">set ISO 4217 compliant display currency code payload</param>
        /// <returns>SetConfigDisplayCurrency</returns>
        public SetConfigDisplayCurrency SetConfigDisplayCurrency (SetConfigDisplayCurrency setConfigDisplayCurrency)
        {
             ApiResponse<SetConfigDisplayCurrency> localVarResponse = SetConfigDisplayCurrencyWithHttpInfo(setConfigDisplayCurrency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the ISO 4217 compliant display currency code for your Brevo account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setConfigDisplayCurrency">set ISO 4217 compliant display currency code payload</param>
        /// <returns>ApiResponse of SetConfigDisplayCurrency</returns>
        public ApiResponse< SetConfigDisplayCurrency > SetConfigDisplayCurrencyWithHttpInfo (SetConfigDisplayCurrency setConfigDisplayCurrency)
        {
            // verify the required parameter 'setConfigDisplayCurrency' is set
            if (setConfigDisplayCurrency == null)
                throw new ApiException(400, "Missing required parameter 'setConfigDisplayCurrency' when calling EcommerceApi->SetConfigDisplayCurrency");

            var localVarPath = "./ecommerce/config/displayCurrency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setConfigDisplayCurrency != null && setConfigDisplayCurrency.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setConfigDisplayCurrency); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setConfigDisplayCurrency; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetConfigDisplayCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetConfigDisplayCurrency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SetConfigDisplayCurrency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetConfigDisplayCurrency)));
        }

        /// <summary>
        /// Set the ISO 4217 compliant display currency code for your Brevo account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setConfigDisplayCurrency">set ISO 4217 compliant display currency code payload</param>
        /// <returns>Task of SetConfigDisplayCurrency</returns>
        public async System.Threading.Tasks.Task<SetConfigDisplayCurrency> SetConfigDisplayCurrencyAsync (SetConfigDisplayCurrency setConfigDisplayCurrency)
        {
             ApiResponse<SetConfigDisplayCurrency> localVarResponse = await SetConfigDisplayCurrencyAsyncWithHttpInfo(setConfigDisplayCurrency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the ISO 4217 compliant display currency code for your Brevo account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setConfigDisplayCurrency">set ISO 4217 compliant display currency code payload</param>
        /// <returns>Task of ApiResponse (SetConfigDisplayCurrency)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetConfigDisplayCurrency>> SetConfigDisplayCurrencyAsyncWithHttpInfo (SetConfigDisplayCurrency setConfigDisplayCurrency)
        {
            // verify the required parameter 'setConfigDisplayCurrency' is set
            if (setConfigDisplayCurrency == null)
                throw new ApiException(400, "Missing required parameter 'setConfigDisplayCurrency' when calling EcommerceApi->SetConfigDisplayCurrency");

            var localVarPath = "./ecommerce/config/displayCurrency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setConfigDisplayCurrency != null && setConfigDisplayCurrency.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setConfigDisplayCurrency); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setConfigDisplayCurrency; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetConfigDisplayCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetConfigDisplayCurrency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SetConfigDisplayCurrency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetConfigDisplayCurrency)));
        }

    }
}
