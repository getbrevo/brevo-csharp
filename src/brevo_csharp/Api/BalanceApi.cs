/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using brevo_csharp.Client;
using brevo_csharp.Model;

namespace brevo_csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBalanceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new transaction
        /// </summary>
        /// <remarks>
        /// Creates new transaction and returns information
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Transaction Payload</param>
        /// <returns>Transaction</returns>
        Transaction BeginTransaction (Guid? pid, CreateTransactionPayload body);

        /// <summary>
        /// Create new transaction
        /// </summary>
        /// <remarks>
        /// Creates new transaction and returns information
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Transaction Payload</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> BeginTransactionWithHttpInfo (Guid? pid, CreateTransactionPayload body);
        /// <summary>
        /// Cancel transaction
        /// </summary>
        /// <remarks>
        /// Cancels transaction
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Transaction</returns>
        Transaction CancelTransaction (Guid? pid, Guid? tid);

        /// <summary>
        /// Cancel transaction
        /// </summary>
        /// <remarks>
        /// Cancels transaction
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> CancelTransactionWithHttpInfo (Guid? pid, Guid? tid);
        /// <summary>
        /// Complete transaction
        /// </summary>
        /// <remarks>
        /// Completes transaction
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Transaction</returns>
        Transaction CompleteTransaction (Guid? pid, Guid? tid);

        /// <summary>
        /// Complete transaction
        /// </summary>
        /// <remarks>
        /// Completes transaction
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> CompleteTransactionWithHttpInfo (Guid? pid, Guid? tid);
        /// <summary>
        /// Create balance limits
        /// </summary>
        /// <remarks>
        /// Creates balance limit and sends the created UUID along with the data
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Balance Definition Payload</param>
        /// <returns>BalanceLimit</returns>
        BalanceLimit CreateBalanceLimit (Guid? pid, Guid? bdid, CreateBalanceLimitPayload body);

        /// <summary>
        /// Create balance limits
        /// </summary>
        /// <remarks>
        /// Creates balance limit and sends the created UUID along with the data
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Balance Definition Payload</param>
        /// <returns>ApiResponse of BalanceLimit</returns>
        ApiResponse<BalanceLimit> CreateBalanceLimitWithHttpInfo (Guid? pid, Guid? bdid, CreateBalanceLimitPayload body);
        /// <summary>
        /// Create balance order
        /// </summary>
        /// <remarks>
        /// Returns created order
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Order Payload</param>
        /// <returns>BalanceOrder</returns>
        BalanceOrder CreateBalanceOrder (Guid? pid, CreateOrderPayload body);

        /// <summary>
        /// Create balance order
        /// </summary>
        /// <remarks>
        /// Returns created order
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Order Payload</param>
        /// <returns>ApiResponse of BalanceOrder</returns>
        ApiResponse<BalanceOrder> CreateBalanceOrderWithHttpInfo (Guid? pid, CreateOrderPayload body);
        /// <summary>
        /// Delete balance definition
        /// </summary>
        /// <remarks>
        /// Delete Balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <returns></returns>
        void DeleteBalanceDefinition (Guid? pid, Guid? bdid);

        /// <summary>
        /// Delete balance definition
        /// </summary>
        /// <remarks>
        /// Delete Balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBalanceDefinitionWithHttpInfo (Guid? pid, Guid? bdid);
        /// <summary>
        /// Delete balance limit
        /// </summary>
        /// <remarks>
        /// Delete balance limit
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <returns></returns>
        void DeleteBalanceLimit (Guid? pid, Guid? bdid, Guid? blid);

        /// <summary>
        /// Delete balance limit
        /// </summary>
        /// <remarks>
        /// Delete balance limit
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBalanceLimitWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid);
        /// <summary>
        /// Get balance definition
        /// </summary>
        /// <remarks>
        /// Returns balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>BalanceDefinition</returns>
        BalanceDefinition GetBalanceDefinition (Guid? pid, Guid? bdid, string version = null);

        /// <summary>
        /// Get balance definition
        /// </summary>
        /// <remarks>
        /// Returns balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>ApiResponse of BalanceDefinition</returns>
        ApiResponse<BalanceDefinition> GetBalanceDefinitionWithHttpInfo (Guid? pid, Guid? bdid, string version = null);
        /// <summary>
        /// Get balance definition list
        /// </summary>
        /// <remarks>
        /// Returns balance definition page
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 200)</param>
        /// <param name="offset">Offset to paginate records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to updated_at)</param>
        /// <param name="sort">Sort direction (optional, default to desc)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>BalanceDefinitionPage</returns>
        BalanceDefinitionPage GetBalanceDefinitionList (Guid? pid, int? limit = null, int? offset = null, string sortField = null, string sort = null, string version = null);

        /// <summary>
        /// Get balance definition list
        /// </summary>
        /// <remarks>
        /// Returns balance definition page
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 200)</param>
        /// <param name="offset">Offset to paginate records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to updated_at)</param>
        /// <param name="sort">Sort direction (optional, default to desc)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>ApiResponse of BalanceDefinitionPage</returns>
        ApiResponse<BalanceDefinitionPage> GetBalanceDefinitionListWithHttpInfo (Guid? pid, int? limit = null, int? offset = null, string sortField = null, string sort = null, string version = null);
        /// <summary>
        /// Get balance limits
        /// </summary>
        /// <remarks>
        /// Fetches balance limits and send the created UUID along with the data
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>BalanceLimit</returns>
        BalanceLimit GetBalanceLimit (Guid? pid, Guid? bdid, Guid? blid, string version = null);

        /// <summary>
        /// Get balance limits
        /// </summary>
        /// <remarks>
        /// Fetches balance limits and send the created UUID along with the data
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>ApiResponse of BalanceLimit</returns>
        ApiResponse<BalanceLimit> GetBalanceLimitWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid, string version = null);
        /// <summary>
        /// Get balance list
        /// </summary>
        /// <remarks>
        /// Returns balance list
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ContactBalancesResp</returns>
        ContactBalancesResp GetContactBalances (Guid? pid);

        /// <summary>
        /// Get balance list
        /// </summary>
        /// <remarks>
        /// Returns balance list
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ApiResponse of ContactBalancesResp</returns>
        ApiResponse<ContactBalancesResp> GetContactBalancesWithHttpInfo (Guid? pid);
        /// <summary>
        /// Get subscription balances
        /// </summary>
        /// <remarks>
        /// Returns subscription balances
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid">Contact Id</param>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ModelSubscriptionBalanceResp</returns>
        ModelSubscriptionBalanceResp GetSubscriptionBalances (string cid, Guid? pid);

        /// <summary>
        /// Get subscription balances
        /// </summary>
        /// <remarks>
        /// Returns subscription balances
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid">Contact Id</param>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ApiResponse of ModelSubscriptionBalanceResp</returns>
        ApiResponse<ModelSubscriptionBalanceResp> GetSubscriptionBalancesWithHttpInfo (string cid, Guid? pid);
        /// <summary>
        /// Get Active Balances API
        /// </summary>
        /// <remarks>
        /// Returns Active Balances
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="offset">Offset (optional)</param>
        /// <param name="sortField">Sort Field (optional)</param>
        /// <param name="sort">Sort Order (optional)</param>
        /// <returns>BalanceLimit</returns>
        BalanceLimit LoyaltyBalanceProgramsPidActiveBalanceGet (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null);

        /// <summary>
        /// Get Active Balances API
        /// </summary>
        /// <remarks>
        /// Returns Active Balances
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="offset">Offset (optional)</param>
        /// <param name="sortField">Sort Field (optional)</param>
        /// <param name="sort">Sort Order (optional)</param>
        /// <returns>ApiResponse of BalanceLimit</returns>
        ApiResponse<BalanceLimit> LoyaltyBalanceProgramsPidActiveBalanceGetWithHttpInfo (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null);
        /// <summary>
        /// Create balance definition
        /// </summary>
        /// <remarks>
        /// Creates balance definition and returns information
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Balance Definition Payload</param>
        /// <returns>BalanceDefinition</returns>
        BalanceDefinition LoyaltyBalanceProgramsPidBalanceDefinitionsPost (Guid? pid, CreateBalanceDefinitionPayload body);

        /// <summary>
        /// Create balance definition
        /// </summary>
        /// <remarks>
        /// Creates balance definition and returns information
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Balance Definition Payload</param>
        /// <returns>ApiResponse of BalanceDefinition</returns>
        ApiResponse<BalanceDefinition> LoyaltyBalanceProgramsPidBalanceDefinitionsPostWithHttpInfo (Guid? pid, CreateBalanceDefinitionPayload body);
        /// <summary>
        /// Create subscription balances
        /// </summary>
        /// <remarks>
        /// Creates a balance for a contact
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="cid">Contact Id</param>
        /// <param name="body">Create Balnce Payload</param>
        /// <returns>Balance</returns>
        Balance LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPost (Guid? pid, string cid, CreateBalancePayload body);

        /// <summary>
        /// Create subscription balances
        /// </summary>
        /// <remarks>
        /// Creates a balance for a contact
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="cid">Contact Id</param>
        /// <param name="body">Create Balnce Payload</param>
        /// <returns>ApiResponse of Balance</returns>
        ApiResponse<Balance> LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPostWithHttpInfo (Guid? pid, string cid, CreateBalancePayload body);
        /// <summary>
        /// Get Transaction History API
        /// </summary>
        /// <remarks>
        /// Returns transaction history
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 20)</param>
        /// <param name="offset">Skip a number of records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to created_at)</param>
        /// <param name="sort">Sort order, either asc or desc (optional, default to desc)</param>
        /// <param name="filters">Filters to apply (optional)</param>
        /// <returns>TransactionHistoryResp</returns>
        TransactionHistoryResp LoyaltyBalanceProgramsPidTransactionHistoryGet (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null, List<string> filters = null);

        /// <summary>
        /// Get Transaction History API
        /// </summary>
        /// <remarks>
        /// Returns transaction history
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 20)</param>
        /// <param name="offset">Skip a number of records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to created_at)</param>
        /// <param name="sort">Sort order, either asc or desc (optional, default to desc)</param>
        /// <param name="filters">Filters to apply (optional)</param>
        /// <returns>ApiResponse of TransactionHistoryResp</returns>
        ApiResponse<TransactionHistoryResp> LoyaltyBalanceProgramsPidTransactionHistoryGetWithHttpInfo (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null, List<string> filters = null);
        /// <summary>
        /// Update balance definition
        /// </summary>
        /// <remarks>
        /// Updates Balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Update Balance Definition Payload</param>
        /// <returns>BalanceDefinition</returns>
        BalanceDefinition UpdateBalanceDefinition (Guid? pid, Guid? bdid, UpdateBalanceDefinitionPayload body);

        /// <summary>
        /// Update balance definition
        /// </summary>
        /// <remarks>
        /// Updates Balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Update Balance Definition Payload</param>
        /// <returns>ApiResponse of BalanceDefinition</returns>
        ApiResponse<BalanceDefinition> UpdateBalanceDefinitionWithHttpInfo (Guid? pid, Guid? bdid, UpdateBalanceDefinitionPayload body);
        /// <summary>
        /// Updates balance limit
        /// </summary>
        /// <remarks>
        /// Updates balance limit
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="body">Balance Limits Payload</param>
        /// <returns>BalanceLimit</returns>
        BalanceLimit UpdateBalanceLimit (Guid? pid, Guid? bdid, Guid? blid, UpdateBalanceLimitPayload body);

        /// <summary>
        /// Updates balance limit
        /// </summary>
        /// <remarks>
        /// Updates balance limit
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="body">Balance Limits Payload</param>
        /// <returns>ApiResponse of BalanceLimit</returns>
        ApiResponse<BalanceLimit> UpdateBalanceLimitWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid, UpdateBalanceLimitPayload body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create new transaction
        /// </summary>
        /// <remarks>
        /// Creates new transaction and returns information
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Transaction Payload</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> BeginTransactionAsync (Guid? pid, CreateTransactionPayload body);

        /// <summary>
        /// Create new transaction
        /// </summary>
        /// <remarks>
        /// Creates new transaction and returns information
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Transaction Payload</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> BeginTransactionAsyncWithHttpInfo (Guid? pid, CreateTransactionPayload body);
        /// <summary>
        /// Cancel transaction
        /// </summary>
        /// <remarks>
        /// Cancels transaction
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> CancelTransactionAsync (Guid? pid, Guid? tid);

        /// <summary>
        /// Cancel transaction
        /// </summary>
        /// <remarks>
        /// Cancels transaction
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> CancelTransactionAsyncWithHttpInfo (Guid? pid, Guid? tid);
        /// <summary>
        /// Complete transaction
        /// </summary>
        /// <remarks>
        /// Completes transaction
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> CompleteTransactionAsync (Guid? pid, Guid? tid);

        /// <summary>
        /// Complete transaction
        /// </summary>
        /// <remarks>
        /// Completes transaction
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> CompleteTransactionAsyncWithHttpInfo (Guid? pid, Guid? tid);
        /// <summary>
        /// Create balance limits
        /// </summary>
        /// <remarks>
        /// Creates balance limit and sends the created UUID along with the data
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Balance Definition Payload</param>
        /// <returns>Task of BalanceLimit</returns>
        System.Threading.Tasks.Task<BalanceLimit> CreateBalanceLimitAsync (Guid? pid, Guid? bdid, CreateBalanceLimitPayload body);

        /// <summary>
        /// Create balance limits
        /// </summary>
        /// <remarks>
        /// Creates balance limit and sends the created UUID along with the data
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Balance Definition Payload</param>
        /// <returns>Task of ApiResponse (BalanceLimit)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceLimit>> CreateBalanceLimitAsyncWithHttpInfo (Guid? pid, Guid? bdid, CreateBalanceLimitPayload body);
        /// <summary>
        /// Create balance order
        /// </summary>
        /// <remarks>
        /// Returns created order
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Order Payload</param>
        /// <returns>Task of BalanceOrder</returns>
        System.Threading.Tasks.Task<BalanceOrder> CreateBalanceOrderAsync (Guid? pid, CreateOrderPayload body);

        /// <summary>
        /// Create balance order
        /// </summary>
        /// <remarks>
        /// Returns created order
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Order Payload</param>
        /// <returns>Task of ApiResponse (BalanceOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceOrder>> CreateBalanceOrderAsyncWithHttpInfo (Guid? pid, CreateOrderPayload body);
        /// <summary>
        /// Delete balance definition
        /// </summary>
        /// <remarks>
        /// Delete Balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBalanceDefinitionAsync (Guid? pid, Guid? bdid);

        /// <summary>
        /// Delete balance definition
        /// </summary>
        /// <remarks>
        /// Delete Balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBalanceDefinitionAsyncWithHttpInfo (Guid? pid, Guid? bdid);
        /// <summary>
        /// Delete balance limit
        /// </summary>
        /// <remarks>
        /// Delete balance limit
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBalanceLimitAsync (Guid? pid, Guid? bdid, Guid? blid);

        /// <summary>
        /// Delete balance limit
        /// </summary>
        /// <remarks>
        /// Delete balance limit
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBalanceLimitAsyncWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid);
        /// <summary>
        /// Get balance definition
        /// </summary>
        /// <remarks>
        /// Returns balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of BalanceDefinition</returns>
        System.Threading.Tasks.Task<BalanceDefinition> GetBalanceDefinitionAsync (Guid? pid, Guid? bdid, string version = null);

        /// <summary>
        /// Get balance definition
        /// </summary>
        /// <remarks>
        /// Returns balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (BalanceDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceDefinition>> GetBalanceDefinitionAsyncWithHttpInfo (Guid? pid, Guid? bdid, string version = null);
        /// <summary>
        /// Get balance definition list
        /// </summary>
        /// <remarks>
        /// Returns balance definition page
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 200)</param>
        /// <param name="offset">Offset to paginate records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to updated_at)</param>
        /// <param name="sort">Sort direction (optional, default to desc)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of BalanceDefinitionPage</returns>
        System.Threading.Tasks.Task<BalanceDefinitionPage> GetBalanceDefinitionListAsync (Guid? pid, int? limit = null, int? offset = null, string sortField = null, string sort = null, string version = null);

        /// <summary>
        /// Get balance definition list
        /// </summary>
        /// <remarks>
        /// Returns balance definition page
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 200)</param>
        /// <param name="offset">Offset to paginate records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to updated_at)</param>
        /// <param name="sort">Sort direction (optional, default to desc)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (BalanceDefinitionPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceDefinitionPage>> GetBalanceDefinitionListAsyncWithHttpInfo (Guid? pid, int? limit = null, int? offset = null, string sortField = null, string sort = null, string version = null);
        /// <summary>
        /// Get balance limits
        /// </summary>
        /// <remarks>
        /// Fetches balance limits and send the created UUID along with the data
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of BalanceLimit</returns>
        System.Threading.Tasks.Task<BalanceLimit> GetBalanceLimitAsync (Guid? pid, Guid? bdid, Guid? blid, string version = null);

        /// <summary>
        /// Get balance limits
        /// </summary>
        /// <remarks>
        /// Fetches balance limits and send the created UUID along with the data
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (BalanceLimit)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceLimit>> GetBalanceLimitAsyncWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid, string version = null);
        /// <summary>
        /// Get balance list
        /// </summary>
        /// <remarks>
        /// Returns balance list
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ContactBalancesResp</returns>
        System.Threading.Tasks.Task<ContactBalancesResp> GetContactBalancesAsync (Guid? pid);

        /// <summary>
        /// Get balance list
        /// </summary>
        /// <remarks>
        /// Returns balance list
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ApiResponse (ContactBalancesResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactBalancesResp>> GetContactBalancesAsyncWithHttpInfo (Guid? pid);
        /// <summary>
        /// Get subscription balances
        /// </summary>
        /// <remarks>
        /// Returns subscription balances
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid">Contact Id</param>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ModelSubscriptionBalanceResp</returns>
        System.Threading.Tasks.Task<ModelSubscriptionBalanceResp> GetSubscriptionBalancesAsync (string cid, Guid? pid);

        /// <summary>
        /// Get subscription balances
        /// </summary>
        /// <remarks>
        /// Returns subscription balances
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid">Contact Id</param>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ApiResponse (ModelSubscriptionBalanceResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelSubscriptionBalanceResp>> GetSubscriptionBalancesAsyncWithHttpInfo (string cid, Guid? pid);
        /// <summary>
        /// Get Active Balances API
        /// </summary>
        /// <remarks>
        /// Returns Active Balances
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="offset">Offset (optional)</param>
        /// <param name="sortField">Sort Field (optional)</param>
        /// <param name="sort">Sort Order (optional)</param>
        /// <returns>Task of BalanceLimit</returns>
        System.Threading.Tasks.Task<BalanceLimit> LoyaltyBalanceProgramsPidActiveBalanceGetAsync (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null);

        /// <summary>
        /// Get Active Balances API
        /// </summary>
        /// <remarks>
        /// Returns Active Balances
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="offset">Offset (optional)</param>
        /// <param name="sortField">Sort Field (optional)</param>
        /// <param name="sort">Sort Order (optional)</param>
        /// <returns>Task of ApiResponse (BalanceLimit)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceLimit>> LoyaltyBalanceProgramsPidActiveBalanceGetAsyncWithHttpInfo (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null);
        /// <summary>
        /// Create balance definition
        /// </summary>
        /// <remarks>
        /// Creates balance definition and returns information
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Balance Definition Payload</param>
        /// <returns>Task of BalanceDefinition</returns>
        System.Threading.Tasks.Task<BalanceDefinition> LoyaltyBalanceProgramsPidBalanceDefinitionsPostAsync (Guid? pid, CreateBalanceDefinitionPayload body);

        /// <summary>
        /// Create balance definition
        /// </summary>
        /// <remarks>
        /// Creates balance definition and returns information
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Balance Definition Payload</param>
        /// <returns>Task of ApiResponse (BalanceDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceDefinition>> LoyaltyBalanceProgramsPidBalanceDefinitionsPostAsyncWithHttpInfo (Guid? pid, CreateBalanceDefinitionPayload body);
        /// <summary>
        /// Create subscription balances
        /// </summary>
        /// <remarks>
        /// Creates a balance for a contact
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="cid">Contact Id</param>
        /// <param name="body">Create Balnce Payload</param>
        /// <returns>Task of Balance</returns>
        System.Threading.Tasks.Task<Balance> LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPostAsync (Guid? pid, string cid, CreateBalancePayload body);

        /// <summary>
        /// Create subscription balances
        /// </summary>
        /// <remarks>
        /// Creates a balance for a contact
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="cid">Contact Id</param>
        /// <param name="body">Create Balnce Payload</param>
        /// <returns>Task of ApiResponse (Balance)</returns>
        System.Threading.Tasks.Task<ApiResponse<Balance>> LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPostAsyncWithHttpInfo (Guid? pid, string cid, CreateBalancePayload body);
        /// <summary>
        /// Get Transaction History API
        /// </summary>
        /// <remarks>
        /// Returns transaction history
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 20)</param>
        /// <param name="offset">Skip a number of records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to created_at)</param>
        /// <param name="sort">Sort order, either asc or desc (optional, default to desc)</param>
        /// <param name="filters">Filters to apply (optional)</param>
        /// <returns>Task of TransactionHistoryResp</returns>
        System.Threading.Tasks.Task<TransactionHistoryResp> LoyaltyBalanceProgramsPidTransactionHistoryGetAsync (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null, List<string> filters = null);

        /// <summary>
        /// Get Transaction History API
        /// </summary>
        /// <remarks>
        /// Returns transaction history
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 20)</param>
        /// <param name="offset">Skip a number of records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to created_at)</param>
        /// <param name="sort">Sort order, either asc or desc (optional, default to desc)</param>
        /// <param name="filters">Filters to apply (optional)</param>
        /// <returns>Task of ApiResponse (TransactionHistoryResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionHistoryResp>> LoyaltyBalanceProgramsPidTransactionHistoryGetAsyncWithHttpInfo (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null, List<string> filters = null);
        /// <summary>
        /// Update balance definition
        /// </summary>
        /// <remarks>
        /// Updates Balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Update Balance Definition Payload</param>
        /// <returns>Task of BalanceDefinition</returns>
        System.Threading.Tasks.Task<BalanceDefinition> UpdateBalanceDefinitionAsync (Guid? pid, Guid? bdid, UpdateBalanceDefinitionPayload body);

        /// <summary>
        /// Update balance definition
        /// </summary>
        /// <remarks>
        /// Updates Balance definition
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Update Balance Definition Payload</param>
        /// <returns>Task of ApiResponse (BalanceDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceDefinition>> UpdateBalanceDefinitionAsyncWithHttpInfo (Guid? pid, Guid? bdid, UpdateBalanceDefinitionPayload body);
        /// <summary>
        /// Updates balance limit
        /// </summary>
        /// <remarks>
        /// Updates balance limit
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="body">Balance Limits Payload</param>
        /// <returns>Task of BalanceLimit</returns>
        System.Threading.Tasks.Task<BalanceLimit> UpdateBalanceLimitAsync (Guid? pid, Guid? bdid, Guid? blid, UpdateBalanceLimitPayload body);

        /// <summary>
        /// Updates balance limit
        /// </summary>
        /// <remarks>
        /// Updates balance limit
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="body">Balance Limits Payload</param>
        /// <returns>Task of ApiResponse (BalanceLimit)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceLimit>> UpdateBalanceLimitAsyncWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid, UpdateBalanceLimitPayload body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BalanceApi : IBalanceApi
    {
        private brevo_csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BalanceApi(String basePath)
        {
            this.Configuration = new brevo_csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BalanceApi(brevo_csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = brevo_csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public brevo_csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public brevo_csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create new transaction Creates new transaction and returns information
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Transaction Payload</param>
        /// <returns>Transaction</returns>
        public Transaction BeginTransaction (Guid? pid, CreateTransactionPayload body)
        {
             ApiResponse<Transaction> localVarResponse = BeginTransactionWithHttpInfo(pid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new transaction Creates new transaction and returns information
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Transaction Payload</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse< Transaction > BeginTransactionWithHttpInfo (Guid? pid, CreateTransactionPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->BeginTransaction");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->BeginTransaction");

            var localVarPath = "./loyalty/balance/programs/{pid}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BeginTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Create new transaction Creates new transaction and returns information
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Transaction Payload</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> BeginTransactionAsync (Guid? pid, CreateTransactionPayload body)
        {
             ApiResponse<Transaction> localVarResponse = await BeginTransactionAsyncWithHttpInfo(pid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new transaction Creates new transaction and returns information
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Transaction Payload</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> BeginTransactionAsyncWithHttpInfo (Guid? pid, CreateTransactionPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->BeginTransaction");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->BeginTransaction");

            var localVarPath = "./loyalty/balance/programs/{pid}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BeginTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Cancel transaction Cancels transaction
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Transaction</returns>
        public Transaction CancelTransaction (Guid? pid, Guid? tid)
        {
             ApiResponse<Transaction> localVarResponse = CancelTransactionWithHttpInfo(pid, tid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel transaction Cancels transaction
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse< Transaction > CancelTransactionWithHttpInfo (Guid? pid, Guid? tid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->CancelTransaction");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling BalanceApi->CancelTransaction");

            var localVarPath = "./loyalty/balance/programs/{pid}/transactions/{tid}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Cancel transaction Cancels transaction
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> CancelTransactionAsync (Guid? pid, Guid? tid)
        {
             ApiResponse<Transaction> localVarResponse = await CancelTransactionAsyncWithHttpInfo(pid, tid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel transaction Cancels transaction
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> CancelTransactionAsyncWithHttpInfo (Guid? pid, Guid? tid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->CancelTransaction");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling BalanceApi->CancelTransaction");

            var localVarPath = "./loyalty/balance/programs/{pid}/transactions/{tid}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Complete transaction Completes transaction
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Transaction</returns>
        public Transaction CompleteTransaction (Guid? pid, Guid? tid)
        {
             ApiResponse<Transaction> localVarResponse = CompleteTransactionWithHttpInfo(pid, tid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete transaction Completes transaction
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse< Transaction > CompleteTransactionWithHttpInfo (Guid? pid, Guid? tid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->CompleteTransaction");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling BalanceApi->CompleteTransaction");

            var localVarPath = "./loyalty/balance/programs/{pid}/transactions/{tid}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Complete transaction Completes transaction
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> CompleteTransactionAsync (Guid? pid, Guid? tid)
        {
             ApiResponse<Transaction> localVarResponse = await CompleteTransactionAsyncWithHttpInfo(pid, tid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete transaction Completes transaction
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="tid">Transaction Id</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> CompleteTransactionAsyncWithHttpInfo (Guid? pid, Guid? tid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->CompleteTransaction");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling BalanceApi->CompleteTransaction");

            var localVarPath = "./loyalty/balance/programs/{pid}/transactions/{tid}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Create balance limits Creates balance limit and sends the created UUID along with the data
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Balance Definition Payload</param>
        /// <returns>BalanceLimit</returns>
        public BalanceLimit CreateBalanceLimit (Guid? pid, Guid? bdid, CreateBalanceLimitPayload body)
        {
             ApiResponse<BalanceLimit> localVarResponse = CreateBalanceLimitWithHttpInfo(pid, bdid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create balance limits Creates balance limit and sends the created UUID along with the data
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Balance Definition Payload</param>
        /// <returns>ApiResponse of BalanceLimit</returns>
        public ApiResponse< BalanceLimit > CreateBalanceLimitWithHttpInfo (Guid? pid, Guid? bdid, CreateBalanceLimitPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->CreateBalanceLimit");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->CreateBalanceLimit");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->CreateBalanceLimit");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBalanceLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceLimit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceLimit)));
        }

        /// <summary>
        /// Create balance limits Creates balance limit and sends the created UUID along with the data
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Balance Definition Payload</param>
        /// <returns>Task of BalanceLimit</returns>
        public async System.Threading.Tasks.Task<BalanceLimit> CreateBalanceLimitAsync (Guid? pid, Guid? bdid, CreateBalanceLimitPayload body)
        {
             ApiResponse<BalanceLimit> localVarResponse = await CreateBalanceLimitAsyncWithHttpInfo(pid, bdid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create balance limits Creates balance limit and sends the created UUID along with the data
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Balance Definition Payload</param>
        /// <returns>Task of ApiResponse (BalanceLimit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BalanceLimit>> CreateBalanceLimitAsyncWithHttpInfo (Guid? pid, Guid? bdid, CreateBalanceLimitPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->CreateBalanceLimit");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->CreateBalanceLimit");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->CreateBalanceLimit");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBalanceLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceLimit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceLimit)));
        }

        /// <summary>
        /// Create balance order Returns created order
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Order Payload</param>
        /// <returns>BalanceOrder</returns>
        public BalanceOrder CreateBalanceOrder (Guid? pid, CreateOrderPayload body)
        {
             ApiResponse<BalanceOrder> localVarResponse = CreateBalanceOrderWithHttpInfo(pid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create balance order Returns created order
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Order Payload</param>
        /// <returns>ApiResponse of BalanceOrder</returns>
        public ApiResponse< BalanceOrder > CreateBalanceOrderWithHttpInfo (Guid? pid, CreateOrderPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->CreateBalanceOrder");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->CreateBalanceOrder");

            var localVarPath = "./loyalty/balance/programs/{pid}/create-order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBalanceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceOrder)));
        }

        /// <summary>
        /// Create balance order Returns created order
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Order Payload</param>
        /// <returns>Task of BalanceOrder</returns>
        public async System.Threading.Tasks.Task<BalanceOrder> CreateBalanceOrderAsync (Guid? pid, CreateOrderPayload body)
        {
             ApiResponse<BalanceOrder> localVarResponse = await CreateBalanceOrderAsyncWithHttpInfo(pid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create balance order Returns created order
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Order Payload</param>
        /// <returns>Task of ApiResponse (BalanceOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BalanceOrder>> CreateBalanceOrderAsyncWithHttpInfo (Guid? pid, CreateOrderPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->CreateBalanceOrder");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->CreateBalanceOrder");

            var localVarPath = "./loyalty/balance/programs/{pid}/create-order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBalanceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceOrder)));
        }

        /// <summary>
        /// Delete balance definition Delete Balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <returns></returns>
        public void DeleteBalanceDefinition (Guid? pid, Guid? bdid)
        {
             DeleteBalanceDefinitionWithHttpInfo(pid, bdid);
        }

        /// <summary>
        /// Delete balance definition Delete Balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBalanceDefinitionWithHttpInfo (Guid? pid, Guid? bdid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->DeleteBalanceDefinition");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->DeleteBalanceDefinition");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBalanceDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete balance definition Delete Balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBalanceDefinitionAsync (Guid? pid, Guid? bdid)
        {
             await DeleteBalanceDefinitionAsyncWithHttpInfo(pid, bdid);

        }

        /// <summary>
        /// Delete balance definition Delete Balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBalanceDefinitionAsyncWithHttpInfo (Guid? pid, Guid? bdid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->DeleteBalanceDefinition");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->DeleteBalanceDefinition");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBalanceDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete balance limit Delete balance limit
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <returns></returns>
        public void DeleteBalanceLimit (Guid? pid, Guid? bdid, Guid? blid)
        {
             DeleteBalanceLimitWithHttpInfo(pid, bdid, blid);
        }

        /// <summary>
        /// Delete balance limit Delete balance limit
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBalanceLimitWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->DeleteBalanceLimit");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->DeleteBalanceLimit");
            // verify the required parameter 'blid' is set
            if (blid == null)
                throw new ApiException(400, "Missing required parameter 'blid' when calling BalanceApi->DeleteBalanceLimit");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits/{blid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (blid != null) localVarPathParams.Add("blid", this.Configuration.ApiClient.ParameterToString(blid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBalanceLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete balance limit Delete balance limit
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBalanceLimitAsync (Guid? pid, Guid? bdid, Guid? blid)
        {
             await DeleteBalanceLimitAsyncWithHttpInfo(pid, bdid, blid);

        }

        /// <summary>
        /// Delete balance limit Delete balance limit
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBalanceLimitAsyncWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->DeleteBalanceLimit");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->DeleteBalanceLimit");
            // verify the required parameter 'blid' is set
            if (blid == null)
                throw new ApiException(400, "Missing required parameter 'blid' when calling BalanceApi->DeleteBalanceLimit");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits/{blid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (blid != null) localVarPathParams.Add("blid", this.Configuration.ApiClient.ParameterToString(blid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBalanceLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get balance definition Returns balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>BalanceDefinition</returns>
        public BalanceDefinition GetBalanceDefinition (Guid? pid, Guid? bdid, string version = null)
        {
             ApiResponse<BalanceDefinition> localVarResponse = GetBalanceDefinitionWithHttpInfo(pid, bdid, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get balance definition Returns balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>ApiResponse of BalanceDefinition</returns>
        public ApiResponse< BalanceDefinition > GetBalanceDefinitionWithHttpInfo (Guid? pid, Guid? bdid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->GetBalanceDefinition");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->GetBalanceDefinition");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceDefinition)));
        }

        /// <summary>
        /// Get balance definition Returns balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of BalanceDefinition</returns>
        public async System.Threading.Tasks.Task<BalanceDefinition> GetBalanceDefinitionAsync (Guid? pid, Guid? bdid, string version = null)
        {
             ApiResponse<BalanceDefinition> localVarResponse = await GetBalanceDefinitionAsyncWithHttpInfo(pid, bdid, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get balance definition Returns balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (BalanceDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BalanceDefinition>> GetBalanceDefinitionAsyncWithHttpInfo (Guid? pid, Guid? bdid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->GetBalanceDefinition");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->GetBalanceDefinition");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceDefinition)));
        }

        /// <summary>
        /// Get balance definition list Returns balance definition page
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 200)</param>
        /// <param name="offset">Offset to paginate records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to updated_at)</param>
        /// <param name="sort">Sort direction (optional, default to desc)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>BalanceDefinitionPage</returns>
        public BalanceDefinitionPage GetBalanceDefinitionList (Guid? pid, int? limit = null, int? offset = null, string sortField = null, string sort = null, string version = null)
        {
             ApiResponse<BalanceDefinitionPage> localVarResponse = GetBalanceDefinitionListWithHttpInfo(pid, limit, offset, sortField, sort, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get balance definition list Returns balance definition page
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 200)</param>
        /// <param name="offset">Offset to paginate records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to updated_at)</param>
        /// <param name="sort">Sort direction (optional, default to desc)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>ApiResponse of BalanceDefinitionPage</returns>
        public ApiResponse< BalanceDefinitionPage > GetBalanceDefinitionListWithHttpInfo (Guid? pid, int? limit = null, int? offset = null, string sortField = null, string sort = null, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->GetBalanceDefinitionList");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceDefinitionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceDefinitionPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceDefinitionPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceDefinitionPage)));
        }

        /// <summary>
        /// Get balance definition list Returns balance definition page
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 200)</param>
        /// <param name="offset">Offset to paginate records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to updated_at)</param>
        /// <param name="sort">Sort direction (optional, default to desc)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of BalanceDefinitionPage</returns>
        public async System.Threading.Tasks.Task<BalanceDefinitionPage> GetBalanceDefinitionListAsync (Guid? pid, int? limit = null, int? offset = null, string sortField = null, string sort = null, string version = null)
        {
             ApiResponse<BalanceDefinitionPage> localVarResponse = await GetBalanceDefinitionListAsyncWithHttpInfo(pid, limit, offset, sortField, sort, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get balance definition list Returns balance definition page
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 200)</param>
        /// <param name="offset">Offset to paginate records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to updated_at)</param>
        /// <param name="sort">Sort direction (optional, default to desc)</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (BalanceDefinitionPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BalanceDefinitionPage>> GetBalanceDefinitionListAsyncWithHttpInfo (Guid? pid, int? limit = null, int? offset = null, string sortField = null, string sort = null, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->GetBalanceDefinitionList");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortField", sortField)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceDefinitionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceDefinitionPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceDefinitionPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceDefinitionPage)));
        }

        /// <summary>
        /// Get balance limits Fetches balance limits and send the created UUID along with the data
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>BalanceLimit</returns>
        public BalanceLimit GetBalanceLimit (Guid? pid, Guid? bdid, Guid? blid, string version = null)
        {
             ApiResponse<BalanceLimit> localVarResponse = GetBalanceLimitWithHttpInfo(pid, bdid, blid, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get balance limits Fetches balance limits and send the created UUID along with the data
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>ApiResponse of BalanceLimit</returns>
        public ApiResponse< BalanceLimit > GetBalanceLimitWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->GetBalanceLimit");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->GetBalanceLimit");
            // verify the required parameter 'blid' is set
            if (blid == null)
                throw new ApiException(400, "Missing required parameter 'blid' when calling BalanceApi->GetBalanceLimit");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits/{blid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (blid != null) localVarPathParams.Add("blid", this.Configuration.ApiClient.ParameterToString(blid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceLimit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceLimit)));
        }

        /// <summary>
        /// Get balance limits Fetches balance limits and send the created UUID along with the data
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of BalanceLimit</returns>
        public async System.Threading.Tasks.Task<BalanceLimit> GetBalanceLimitAsync (Guid? pid, Guid? bdid, Guid? blid, string version = null)
        {
             ApiResponse<BalanceLimit> localVarResponse = await GetBalanceLimitAsyncWithHttpInfo(pid, bdid, blid, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get balance limits Fetches balance limits and send the created UUID along with the data
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="version">Version (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (BalanceLimit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BalanceLimit>> GetBalanceLimitAsyncWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->GetBalanceLimit");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->GetBalanceLimit");
            // verify the required parameter 'blid' is set
            if (blid == null)
                throw new ApiException(400, "Missing required parameter 'blid' when calling BalanceApi->GetBalanceLimit");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits/{blid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (blid != null) localVarPathParams.Add("blid", this.Configuration.ApiClient.ParameterToString(blid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceLimit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceLimit)));
        }

        /// <summary>
        /// Get balance list Returns balance list
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ContactBalancesResp</returns>
        public ContactBalancesResp GetContactBalances (Guid? pid)
        {
             ApiResponse<ContactBalancesResp> localVarResponse = GetContactBalancesWithHttpInfo(pid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get balance list Returns balance list
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ApiResponse of ContactBalancesResp</returns>
        public ApiResponse< ContactBalancesResp > GetContactBalancesWithHttpInfo (Guid? pid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->GetContactBalances");

            var localVarPath = "./loyalty/balance/programs/{pid}/contact-balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactBalances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactBalancesResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ContactBalancesResp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactBalancesResp)));
        }

        /// <summary>
        /// Get balance list Returns balance list
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ContactBalancesResp</returns>
        public async System.Threading.Tasks.Task<ContactBalancesResp> GetContactBalancesAsync (Guid? pid)
        {
             ApiResponse<ContactBalancesResp> localVarResponse = await GetContactBalancesAsyncWithHttpInfo(pid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get balance list Returns balance list
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ApiResponse (ContactBalancesResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactBalancesResp>> GetContactBalancesAsyncWithHttpInfo (Guid? pid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->GetContactBalances");

            var localVarPath = "./loyalty/balance/programs/{pid}/contact-balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactBalances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactBalancesResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ContactBalancesResp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactBalancesResp)));
        }

        /// <summary>
        /// Get subscription balances Returns subscription balances
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid">Contact Id</param>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ModelSubscriptionBalanceResp</returns>
        public ModelSubscriptionBalanceResp GetSubscriptionBalances (string cid, Guid? pid)
        {
             ApiResponse<ModelSubscriptionBalanceResp> localVarResponse = GetSubscriptionBalancesWithHttpInfo(cid, pid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscription balances Returns subscription balances
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid">Contact Id</param>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>ApiResponse of ModelSubscriptionBalanceResp</returns>
        public ApiResponse< ModelSubscriptionBalanceResp > GetSubscriptionBalancesWithHttpInfo (string cid, Guid? pid)
        {
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling BalanceApi->GetSubscriptionBalances");
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->GetSubscriptionBalances");

            var localVarPath = "./loyalty/balance/programs/{pid}/subscriptions/{cid}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cid != null) localVarPathParams.Add("cid", this.Configuration.ApiClient.ParameterToString(cid)); // path parameter
            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionBalances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelSubscriptionBalanceResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ModelSubscriptionBalanceResp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelSubscriptionBalanceResp)));
        }

        /// <summary>
        /// Get subscription balances Returns subscription balances
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid">Contact Id</param>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ModelSubscriptionBalanceResp</returns>
        public async System.Threading.Tasks.Task<ModelSubscriptionBalanceResp> GetSubscriptionBalancesAsync (string cid, Guid? pid)
        {
             ApiResponse<ModelSubscriptionBalanceResp> localVarResponse = await GetSubscriptionBalancesAsyncWithHttpInfo(cid, pid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get subscription balances Returns subscription balances
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cid">Contact Id</param>
        /// <param name="pid">Loyalty Program Id</param>
        /// <returns>Task of ApiResponse (ModelSubscriptionBalanceResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelSubscriptionBalanceResp>> GetSubscriptionBalancesAsyncWithHttpInfo (string cid, Guid? pid)
        {
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling BalanceApi->GetSubscriptionBalances");
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->GetSubscriptionBalances");

            var localVarPath = "./loyalty/balance/programs/{pid}/subscriptions/{cid}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cid != null) localVarPathParams.Add("cid", this.Configuration.ApiClient.ParameterToString(cid)); // path parameter
            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionBalances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelSubscriptionBalanceResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ModelSubscriptionBalanceResp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelSubscriptionBalanceResp)));
        }

        /// <summary>
        /// Get Active Balances API Returns Active Balances
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="offset">Offset (optional)</param>
        /// <param name="sortField">Sort Field (optional)</param>
        /// <param name="sort">Sort Order (optional)</param>
        /// <returns>BalanceLimit</returns>
        public BalanceLimit LoyaltyBalanceProgramsPidActiveBalanceGet (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null)
        {
             ApiResponse<BalanceLimit> localVarResponse = LoyaltyBalanceProgramsPidActiveBalanceGetWithHttpInfo(pid, contactId, balanceDefinitionId, limit, offset, sortField, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Active Balances API Returns Active Balances
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="offset">Offset (optional)</param>
        /// <param name="sortField">Sort Field (optional)</param>
        /// <param name="sort">Sort Order (optional)</param>
        /// <returns>ApiResponse of BalanceLimit</returns>
        public ApiResponse< BalanceLimit > LoyaltyBalanceProgramsPidActiveBalanceGetWithHttpInfo (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->LoyaltyBalanceProgramsPidActiveBalanceGet");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BalanceApi->LoyaltyBalanceProgramsPidActiveBalanceGet");
            // verify the required parameter 'balanceDefinitionId' is set
            if (balanceDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'balanceDefinitionId' when calling BalanceApi->LoyaltyBalanceProgramsPidActiveBalanceGet");

            var localVarPath = "./loyalty/balance/programs/{pid}/active-balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (contactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_id", contactId)); // query parameter
            if (balanceDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "balance_definition_id", balanceDefinitionId)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyBalanceProgramsPidActiveBalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceLimit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceLimit)));
        }

        /// <summary>
        /// Get Active Balances API Returns Active Balances
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="offset">Offset (optional)</param>
        /// <param name="sortField">Sort Field (optional)</param>
        /// <param name="sort">Sort Order (optional)</param>
        /// <returns>Task of BalanceLimit</returns>
        public async System.Threading.Tasks.Task<BalanceLimit> LoyaltyBalanceProgramsPidActiveBalanceGetAsync (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null)
        {
             ApiResponse<BalanceLimit> localVarResponse = await LoyaltyBalanceProgramsPidActiveBalanceGetAsyncWithHttpInfo(pid, contactId, balanceDefinitionId, limit, offset, sortField, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Active Balances API Returns Active Balances
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="offset">Offset (optional)</param>
        /// <param name="sortField">Sort Field (optional)</param>
        /// <param name="sort">Sort Order (optional)</param>
        /// <returns>Task of ApiResponse (BalanceLimit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BalanceLimit>> LoyaltyBalanceProgramsPidActiveBalanceGetAsyncWithHttpInfo (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->LoyaltyBalanceProgramsPidActiveBalanceGet");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BalanceApi->LoyaltyBalanceProgramsPidActiveBalanceGet");
            // verify the required parameter 'balanceDefinitionId' is set
            if (balanceDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'balanceDefinitionId' when calling BalanceApi->LoyaltyBalanceProgramsPidActiveBalanceGet");

            var localVarPath = "./loyalty/balance/programs/{pid}/active-balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (contactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_id", contactId)); // query parameter
            if (balanceDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "balance_definition_id", balanceDefinitionId)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyBalanceProgramsPidActiveBalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceLimit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceLimit)));
        }

        /// <summary>
        /// Create balance definition Creates balance definition and returns information
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Balance Definition Payload</param>
        /// <returns>BalanceDefinition</returns>
        public BalanceDefinition LoyaltyBalanceProgramsPidBalanceDefinitionsPost (Guid? pid, CreateBalanceDefinitionPayload body)
        {
             ApiResponse<BalanceDefinition> localVarResponse = LoyaltyBalanceProgramsPidBalanceDefinitionsPostWithHttpInfo(pid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create balance definition Creates balance definition and returns information
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Balance Definition Payload</param>
        /// <returns>ApiResponse of BalanceDefinition</returns>
        public ApiResponse< BalanceDefinition > LoyaltyBalanceProgramsPidBalanceDefinitionsPostWithHttpInfo (Guid? pid, CreateBalanceDefinitionPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->LoyaltyBalanceProgramsPidBalanceDefinitionsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->LoyaltyBalanceProgramsPidBalanceDefinitionsPost");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyBalanceProgramsPidBalanceDefinitionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceDefinition)));
        }

        /// <summary>
        /// Create balance definition Creates balance definition and returns information
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Balance Definition Payload</param>
        /// <returns>Task of BalanceDefinition</returns>
        public async System.Threading.Tasks.Task<BalanceDefinition> LoyaltyBalanceProgramsPidBalanceDefinitionsPostAsync (Guid? pid, CreateBalanceDefinitionPayload body)
        {
             ApiResponse<BalanceDefinition> localVarResponse = await LoyaltyBalanceProgramsPidBalanceDefinitionsPostAsyncWithHttpInfo(pid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create balance definition Creates balance definition and returns information
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="body">Create Balance Definition Payload</param>
        /// <returns>Task of ApiResponse (BalanceDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BalanceDefinition>> LoyaltyBalanceProgramsPidBalanceDefinitionsPostAsyncWithHttpInfo (Guid? pid, CreateBalanceDefinitionPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->LoyaltyBalanceProgramsPidBalanceDefinitionsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->LoyaltyBalanceProgramsPidBalanceDefinitionsPost");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyBalanceProgramsPidBalanceDefinitionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceDefinition)));
        }

        /// <summary>
        /// Create subscription balances Creates a balance for a contact
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="cid">Contact Id</param>
        /// <param name="body">Create Balnce Payload</param>
        /// <returns>Balance</returns>
        public Balance LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPost (Guid? pid, string cid, CreateBalancePayload body)
        {
             ApiResponse<Balance> localVarResponse = LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPostWithHttpInfo(pid, cid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription balances Creates a balance for a contact
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="cid">Contact Id</param>
        /// <param name="body">Create Balnce Payload</param>
        /// <returns>ApiResponse of Balance</returns>
        public ApiResponse< Balance > LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPostWithHttpInfo (Guid? pid, string cid, CreateBalancePayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPost");
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling BalanceApi->LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPost");

            var localVarPath = "./loyalty/balance/programs/{pid}/subscriptions/{cid}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (cid != null) localVarPathParams.Add("cid", this.Configuration.ApiClient.ParameterToString(cid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Balance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
        }

        /// <summary>
        /// Create subscription balances Creates a balance for a contact
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="cid">Contact Id</param>
        /// <param name="body">Create Balnce Payload</param>
        /// <returns>Task of Balance</returns>
        public async System.Threading.Tasks.Task<Balance> LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPostAsync (Guid? pid, string cid, CreateBalancePayload body)
        {
             ApiResponse<Balance> localVarResponse = await LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPostAsyncWithHttpInfo(pid, cid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create subscription balances Creates a balance for a contact
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="cid">Contact Id</param>
        /// <param name="body">Create Balnce Payload</param>
        /// <returns>Task of ApiResponse (Balance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Balance>> LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPostAsyncWithHttpInfo (Guid? pid, string cid, CreateBalancePayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPost");
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling BalanceApi->LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPost");

            var localVarPath = "./loyalty/balance/programs/{pid}/subscriptions/{cid}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (cid != null) localVarPathParams.Add("cid", this.Configuration.ApiClient.ParameterToString(cid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyBalanceProgramsPidSubscriptionsCidBalancesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Balance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
        }

        /// <summary>
        /// Get Transaction History API Returns transaction history
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 20)</param>
        /// <param name="offset">Skip a number of records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to created_at)</param>
        /// <param name="sort">Sort order, either asc or desc (optional, default to desc)</param>
        /// <param name="filters">Filters to apply (optional)</param>
        /// <returns>TransactionHistoryResp</returns>
        public TransactionHistoryResp LoyaltyBalanceProgramsPidTransactionHistoryGet (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null, List<string> filters = null)
        {
             ApiResponse<TransactionHistoryResp> localVarResponse = LoyaltyBalanceProgramsPidTransactionHistoryGetWithHttpInfo(pid, contactId, balanceDefinitionId, limit, offset, sortField, sort, filters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction History API Returns transaction history
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 20)</param>
        /// <param name="offset">Skip a number of records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to created_at)</param>
        /// <param name="sort">Sort order, either asc or desc (optional, default to desc)</param>
        /// <param name="filters">Filters to apply (optional)</param>
        /// <returns>ApiResponse of TransactionHistoryResp</returns>
        public ApiResponse< TransactionHistoryResp > LoyaltyBalanceProgramsPidTransactionHistoryGetWithHttpInfo (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null, List<string> filters = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->LoyaltyBalanceProgramsPidTransactionHistoryGet");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BalanceApi->LoyaltyBalanceProgramsPidTransactionHistoryGet");
            // verify the required parameter 'balanceDefinitionId' is set
            if (balanceDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'balanceDefinitionId' when calling BalanceApi->LoyaltyBalanceProgramsPidTransactionHistoryGet");

            var localVarPath = "./loyalty/balance/programs/{pid}/transaction-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (contactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_id", contactId)); // query parameter
            if (balanceDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "balance_definition_id", balanceDefinitionId)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "filters", filters)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyBalanceProgramsPidTransactionHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionHistoryResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TransactionHistoryResp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionHistoryResp)));
        }

        /// <summary>
        /// Get Transaction History API Returns transaction history
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 20)</param>
        /// <param name="offset">Skip a number of records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to created_at)</param>
        /// <param name="sort">Sort order, either asc or desc (optional, default to desc)</param>
        /// <param name="filters">Filters to apply (optional)</param>
        /// <returns>Task of TransactionHistoryResp</returns>
        public async System.Threading.Tasks.Task<TransactionHistoryResp> LoyaltyBalanceProgramsPidTransactionHistoryGetAsync (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null, List<string> filters = null)
        {
             ApiResponse<TransactionHistoryResp> localVarResponse = await LoyaltyBalanceProgramsPidTransactionHistoryGetAsyncWithHttpInfo(pid, contactId, balanceDefinitionId, limit, offset, sortField, sort, filters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Transaction History API Returns transaction history
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="balanceDefinitionId">Balance Definition ID</param>
        /// <param name="limit">Limit the number of records returned (optional, default to 20)</param>
        /// <param name="offset">Skip a number of records (optional, default to 0)</param>
        /// <param name="sortField">Field to sort by (optional, default to created_at)</param>
        /// <param name="sort">Sort order, either asc or desc (optional, default to desc)</param>
        /// <param name="filters">Filters to apply (optional)</param>
        /// <returns>Task of ApiResponse (TransactionHistoryResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionHistoryResp>> LoyaltyBalanceProgramsPidTransactionHistoryGetAsyncWithHttpInfo (Guid? pid, int? contactId, Guid? balanceDefinitionId, int? limit = null, int? offset = null, string sortField = null, string sort = null, List<string> filters = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->LoyaltyBalanceProgramsPidTransactionHistoryGet");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BalanceApi->LoyaltyBalanceProgramsPidTransactionHistoryGet");
            // verify the required parameter 'balanceDefinitionId' is set
            if (balanceDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'balanceDefinitionId' when calling BalanceApi->LoyaltyBalanceProgramsPidTransactionHistoryGet");

            var localVarPath = "./loyalty/balance/programs/{pid}/transaction-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sortField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_field", sortField)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (contactId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_id", contactId)); // query parameter
            if (balanceDefinitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "balance_definition_id", balanceDefinitionId)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "filters", filters)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoyaltyBalanceProgramsPidTransactionHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionHistoryResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TransactionHistoryResp) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionHistoryResp)));
        }

        /// <summary>
        /// Update balance definition Updates Balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Update Balance Definition Payload</param>
        /// <returns>BalanceDefinition</returns>
        public BalanceDefinition UpdateBalanceDefinition (Guid? pid, Guid? bdid, UpdateBalanceDefinitionPayload body)
        {
             ApiResponse<BalanceDefinition> localVarResponse = UpdateBalanceDefinitionWithHttpInfo(pid, bdid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update balance definition Updates Balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Update Balance Definition Payload</param>
        /// <returns>ApiResponse of BalanceDefinition</returns>
        public ApiResponse< BalanceDefinition > UpdateBalanceDefinitionWithHttpInfo (Guid? pid, Guid? bdid, UpdateBalanceDefinitionPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->UpdateBalanceDefinition");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->UpdateBalanceDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->UpdateBalanceDefinition");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceDefinition)));
        }

        /// <summary>
        /// Update balance definition Updates Balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Update Balance Definition Payload</param>
        /// <returns>Task of BalanceDefinition</returns>
        public async System.Threading.Tasks.Task<BalanceDefinition> UpdateBalanceDefinitionAsync (Guid? pid, Guid? bdid, UpdateBalanceDefinitionPayload body)
        {
             ApiResponse<BalanceDefinition> localVarResponse = await UpdateBalanceDefinitionAsyncWithHttpInfo(pid, bdid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update balance definition Updates Balance definition
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="body">Update Balance Definition Payload</param>
        /// <returns>Task of ApiResponse (BalanceDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BalanceDefinition>> UpdateBalanceDefinitionAsyncWithHttpInfo (Guid? pid, Guid? bdid, UpdateBalanceDefinitionPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->UpdateBalanceDefinition");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->UpdateBalanceDefinition");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->UpdateBalanceDefinition");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceDefinition)));
        }

        /// <summary>
        /// Updates balance limit Updates balance limit
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="body">Balance Limits Payload</param>
        /// <returns>BalanceLimit</returns>
        public BalanceLimit UpdateBalanceLimit (Guid? pid, Guid? bdid, Guid? blid, UpdateBalanceLimitPayload body)
        {
             ApiResponse<BalanceLimit> localVarResponse = UpdateBalanceLimitWithHttpInfo(pid, bdid, blid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates balance limit Updates balance limit
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="body">Balance Limits Payload</param>
        /// <returns>ApiResponse of BalanceLimit</returns>
        public ApiResponse< BalanceLimit > UpdateBalanceLimitWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid, UpdateBalanceLimitPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->UpdateBalanceLimit");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->UpdateBalanceLimit");
            // verify the required parameter 'blid' is set
            if (blid == null)
                throw new ApiException(400, "Missing required parameter 'blid' when calling BalanceApi->UpdateBalanceLimit");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->UpdateBalanceLimit");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits/{blid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (blid != null) localVarPathParams.Add("blid", this.Configuration.ApiClient.ParameterToString(blid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceLimit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceLimit)));
        }

        /// <summary>
        /// Updates balance limit Updates balance limit
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="body">Balance Limits Payload</param>
        /// <returns>Task of BalanceLimit</returns>
        public async System.Threading.Tasks.Task<BalanceLimit> UpdateBalanceLimitAsync (Guid? pid, Guid? bdid, Guid? blid, UpdateBalanceLimitPayload body)
        {
             ApiResponse<BalanceLimit> localVarResponse = await UpdateBalanceLimitAsyncWithHttpInfo(pid, bdid, blid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates balance limit Updates balance limit
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program Id</param>
        /// <param name="bdid">Balance Definition Id</param>
        /// <param name="blid">Balance Limit Id</param>
        /// <param name="body">Balance Limits Payload</param>
        /// <returns>Task of ApiResponse (BalanceLimit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BalanceLimit>> UpdateBalanceLimitAsyncWithHttpInfo (Guid? pid, Guid? bdid, Guid? blid, UpdateBalanceLimitPayload body)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling BalanceApi->UpdateBalanceLimit");
            // verify the required parameter 'bdid' is set
            if (bdid == null)
                throw new ApiException(400, "Missing required parameter 'bdid' when calling BalanceApi->UpdateBalanceLimit");
            // verify the required parameter 'blid' is set
            if (blid == null)
                throw new ApiException(400, "Missing required parameter 'blid' when calling BalanceApi->UpdateBalanceLimit");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BalanceApi->UpdateBalanceLimit");

            var localVarPath = "./loyalty/balance/programs/{pid}/balance-definitions/{bdid}/limits/{blid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (bdid != null) localVarPathParams.Add("bdid", this.Configuration.ApiClient.ParameterToString(bdid)); // path parameter
            if (blid != null) localVarPathParams.Add("blid", this.Configuration.ApiClient.ParameterToString(blid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BalanceLimit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BalanceLimit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceLimit)));
        }

    }
}
