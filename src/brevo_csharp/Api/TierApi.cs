/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using brevo_csharp.Client;
using brevo_csharp.Model;

namespace brevo_csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITierApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign a tier
        /// </summary>
        /// <remarks>
        /// Manually assigns a tier to a specific membership.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cid">Contact ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>TierForContact</returns>
        TierForContact AddSubscriptionToTier (Guid? pid, Guid? cid, Guid? tid);

        /// <summary>
        /// Assign a tier
        /// </summary>
        /// <remarks>
        /// Manually assigns a tier to a specific membership.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cid">Contact ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>ApiResponse of TierForContact</returns>
        ApiResponse<TierForContact> AddSubscriptionToTierWithHttpInfo (Guid? pid, Guid? cid, Guid? tid);
        /// <summary>
        /// Create a tier
        /// </summary>
        /// <remarks>
        /// Creates a new tier in a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload"></param>
        /// <returns>Tier</returns>
        Tier CreateTierForTierGroup (Guid? pid, Guid? gid, TierRequest payload);

        /// <summary>
        /// Create a tier
        /// </summary>
        /// <remarks>
        /// Creates a new tier in a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Tier</returns>
        ApiResponse<Tier> CreateTierForTierGroupWithHttpInfo (Guid? pid, Guid? gid, TierRequest payload);
        /// <summary>
        /// Create a tier group
        /// </summary>
        /// <remarks>
        /// Creates a new tier group in a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Tier group creation payload</param>
        /// <returns>TierGroup</returns>
        TierGroup CreateTierGroup (Guid? pid, CreateTierGroupRequest payload);

        /// <summary>
        /// Create a tier group
        /// </summary>
        /// <remarks>
        /// Creates a new tier group in a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Tier group creation payload</param>
        /// <returns>ApiResponse of TierGroup</returns>
        ApiResponse<TierGroup> CreateTierGroupWithHttpInfo (Guid? pid, CreateTierGroupRequest payload);
        /// <summary>
        /// Delete tier
        /// </summary>
        /// <remarks>
        /// Deletes a tier from a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>string</returns>
        string DeleteTier (Guid? pid, Guid? tid);

        /// <summary>
        /// Delete tier
        /// </summary>
        /// <remarks>
        /// Deletes a tier from a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteTierWithHttpInfo (Guid? pid, Guid? tid);
        /// <summary>
        /// Delete tier group
        /// </summary>
        /// <remarks>
        /// Deletes a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <returns>string</returns>
        string DeleteTierGroup (Guid? pid, Guid? gid);

        /// <summary>
        /// Delete tier group
        /// </summary>
        /// <remarks>
        /// Deletes a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteTierGroupWithHttpInfo (Guid? pid, Guid? gid);
        /// <summary>
        /// List tier groups
        /// </summary>
        /// <remarks>
        /// Returns the list of tier groups defined within the loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to draft)</param>
        /// <returns>TierGroupPage</returns>
        TierGroupPage GetListOfTierGroups (Guid? pid, string version = null);

        /// <summary>
        /// List tier groups
        /// </summary>
        /// <remarks>
        /// Returns the list of tier groups defined within the loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to draft)</param>
        /// <returns>ApiResponse of TierGroupPage</returns>
        ApiResponse<TierGroupPage> GetListOfTierGroupsWithHttpInfo (Guid? pid, string version = null);
        /// <summary>
        /// List tiers
        /// </summary>
        /// <remarks>
        /// Returns the list of tiers defined within the loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to draft)</param>
        /// <returns>LoyaltyTierPage</returns>
        LoyaltyTierPage GetLoyaltyProgramTier (Guid? pid, string version = null);

        /// <summary>
        /// List tiers
        /// </summary>
        /// <remarks>
        /// Returns the list of tiers defined within the loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to draft)</param>
        /// <returns>ApiResponse of LoyaltyTierPage</returns>
        ApiResponse<LoyaltyTierPage> GetLoyaltyProgramTierWithHttpInfo (Guid? pid, string version = null);
        /// <summary>
        /// Get tier group
        /// </summary>
        /// <remarks>
        /// Returns tier group information.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="version">Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to draft)</param>
        /// <returns>TierGroup</returns>
        TierGroup GetTierGroup (Guid? pid, Guid? gid, string version = null);

        /// <summary>
        /// Get tier group
        /// </summary>
        /// <remarks>
        /// Returns tier group information.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="version">Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to draft)</param>
        /// <returns>ApiResponse of TierGroup</returns>
        ApiResponse<TierGroup> GetTierGroupWithHttpInfo (Guid? pid, Guid? gid, string version = null);
        /// <summary>
        /// Update tier
        /// </summary>
        /// <remarks>
        /// Modifies an existing tier for the specified tier group *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <param name="payload"></param>
        /// <returns>Tier</returns>
        Tier UpdateTier (Guid? pid, Guid? tid, TierRequestPutPayload payload);

        /// <summary>
        /// Update tier
        /// </summary>
        /// <remarks>
        /// Modifies an existing tier for the specified tier group *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Tier</returns>
        ApiResponse<Tier> UpdateTierWithHttpInfo (Guid? pid, Guid? tid, TierRequestPutPayload payload);
        /// <summary>
        /// Update tier group
        /// </summary>
        /// <remarks>
        /// Updates a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload">Tier group update payload</param>
        /// <returns>TierGroup</returns>
        TierGroup UpdateTierGroup (Guid? pid, Guid? gid, UpdateTierGroupRequest payload);

        /// <summary>
        /// Update tier group
        /// </summary>
        /// <remarks>
        /// Updates a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload">Tier group update payload</param>
        /// <returns>ApiResponse of TierGroup</returns>
        ApiResponse<TierGroup> UpdateTierGroupWithHttpInfo (Guid? pid, Guid? gid, UpdateTierGroupRequest payload);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign a tier
        /// </summary>
        /// <remarks>
        /// Manually assigns a tier to a specific membership.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cid">Contact ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>Task of TierForContact</returns>
        System.Threading.Tasks.Task<TierForContact> AddSubscriptionToTierAsync (Guid? pid, Guid? cid, Guid? tid);

        /// <summary>
        /// Assign a tier
        /// </summary>
        /// <remarks>
        /// Manually assigns a tier to a specific membership.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cid">Contact ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>Task of ApiResponse (TierForContact)</returns>
        System.Threading.Tasks.Task<ApiResponse<TierForContact>> AddSubscriptionToTierAsyncWithHttpInfo (Guid? pid, Guid? cid, Guid? tid);
        /// <summary>
        /// Create a tier
        /// </summary>
        /// <remarks>
        /// Creates a new tier in a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload"></param>
        /// <returns>Task of Tier</returns>
        System.Threading.Tasks.Task<Tier> CreateTierForTierGroupAsync (Guid? pid, Guid? gid, TierRequest payload);

        /// <summary>
        /// Create a tier
        /// </summary>
        /// <remarks>
        /// Creates a new tier in a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse (Tier)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tier>> CreateTierForTierGroupAsyncWithHttpInfo (Guid? pid, Guid? gid, TierRequest payload);
        /// <summary>
        /// Create a tier group
        /// </summary>
        /// <remarks>
        /// Creates a new tier group in a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Tier group creation payload</param>
        /// <returns>Task of TierGroup</returns>
        System.Threading.Tasks.Task<TierGroup> CreateTierGroupAsync (Guid? pid, CreateTierGroupRequest payload);

        /// <summary>
        /// Create a tier group
        /// </summary>
        /// <remarks>
        /// Creates a new tier group in a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Tier group creation payload</param>
        /// <returns>Task of ApiResponse (TierGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TierGroup>> CreateTierGroupAsyncWithHttpInfo (Guid? pid, CreateTierGroupRequest payload);
        /// <summary>
        /// Delete tier
        /// </summary>
        /// <remarks>
        /// Deletes a tier from a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteTierAsync (Guid? pid, Guid? tid);

        /// <summary>
        /// Delete tier
        /// </summary>
        /// <remarks>
        /// Deletes a tier from a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteTierAsyncWithHttpInfo (Guid? pid, Guid? tid);
        /// <summary>
        /// Delete tier group
        /// </summary>
        /// <remarks>
        /// Deletes a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteTierGroupAsync (Guid? pid, Guid? gid);

        /// <summary>
        /// Delete tier group
        /// </summary>
        /// <remarks>
        /// Deletes a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteTierGroupAsyncWithHttpInfo (Guid? pid, Guid? gid);
        /// <summary>
        /// List tier groups
        /// </summary>
        /// <remarks>
        /// Returns the list of tier groups defined within the loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to draft)</param>
        /// <returns>Task of TierGroupPage</returns>
        System.Threading.Tasks.Task<TierGroupPage> GetListOfTierGroupsAsync (Guid? pid, string version = null);

        /// <summary>
        /// List tier groups
        /// </summary>
        /// <remarks>
        /// Returns the list of tier groups defined within the loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (TierGroupPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TierGroupPage>> GetListOfTierGroupsAsyncWithHttpInfo (Guid? pid, string version = null);
        /// <summary>
        /// List tiers
        /// </summary>
        /// <remarks>
        /// Returns the list of tiers defined within the loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to draft)</param>
        /// <returns>Task of LoyaltyTierPage</returns>
        System.Threading.Tasks.Task<LoyaltyTierPage> GetLoyaltyProgramTierAsync (Guid? pid, string version = null);

        /// <summary>
        /// List tiers
        /// </summary>
        /// <remarks>
        /// Returns the list of tiers defined within the loyalty program.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (LoyaltyTierPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyTierPage>> GetLoyaltyProgramTierAsyncWithHttpInfo (Guid? pid, string version = null);
        /// <summary>
        /// Get tier group
        /// </summary>
        /// <remarks>
        /// Returns tier group information.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="version">Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to draft)</param>
        /// <returns>Task of TierGroup</returns>
        System.Threading.Tasks.Task<TierGroup> GetTierGroupAsync (Guid? pid, Guid? gid, string version = null);

        /// <summary>
        /// Get tier group
        /// </summary>
        /// <remarks>
        /// Returns tier group information.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="version">Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (TierGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TierGroup>> GetTierGroupAsyncWithHttpInfo (Guid? pid, Guid? gid, string version = null);
        /// <summary>
        /// Update tier
        /// </summary>
        /// <remarks>
        /// Modifies an existing tier for the specified tier group *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <param name="payload"></param>
        /// <returns>Task of Tier</returns>
        System.Threading.Tasks.Task<Tier> UpdateTierAsync (Guid? pid, Guid? tid, TierRequestPutPayload payload);

        /// <summary>
        /// Update tier
        /// </summary>
        /// <remarks>
        /// Modifies an existing tier for the specified tier group *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse (Tier)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tier>> UpdateTierAsyncWithHttpInfo (Guid? pid, Guid? tid, TierRequestPutPayload payload);
        /// <summary>
        /// Update tier group
        /// </summary>
        /// <remarks>
        /// Updates a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload">Tier group update payload</param>
        /// <returns>Task of TierGroup</returns>
        System.Threading.Tasks.Task<TierGroup> UpdateTierGroupAsync (Guid? pid, Guid? gid, UpdateTierGroupRequest payload);

        /// <summary>
        /// Update tier group
        /// </summary>
        /// <remarks>
        /// Updates a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload">Tier group update payload</param>
        /// <returns>Task of ApiResponse (TierGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TierGroup>> UpdateTierGroupAsyncWithHttpInfo (Guid? pid, Guid? gid, UpdateTierGroupRequest payload);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TierApi : ITierApi
    {
        private brevo_csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TierApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TierApi(String basePath)
        {
            this.Configuration = new brevo_csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TierApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TierApi(brevo_csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = brevo_csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public brevo_csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public brevo_csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign a tier Manually assigns a tier to a specific membership.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cid">Contact ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>TierForContact</returns>
        public TierForContact AddSubscriptionToTier (Guid? pid, Guid? cid, Guid? tid)
        {
             ApiResponse<TierForContact> localVarResponse = AddSubscriptionToTierWithHttpInfo(pid, cid, tid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a tier Manually assigns a tier to a specific membership.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cid">Contact ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>ApiResponse of TierForContact</returns>
        public ApiResponse< TierForContact > AddSubscriptionToTierWithHttpInfo (Guid? pid, Guid? cid, Guid? tid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->AddSubscriptionToTier");
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling TierApi->AddSubscriptionToTier");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling TierApi->AddSubscriptionToTier");

            var localVarPath = "./loyalty/tier/programs/{pid}/contacts/{cid}/tiers/{tid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (cid != null) localVarPathParams.Add("cid", this.Configuration.ApiClient.ParameterToString(cid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSubscriptionToTier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TierForContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TierForContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TierForContact)));
        }

        /// <summary>
        /// Assign a tier Manually assigns a tier to a specific membership.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cid">Contact ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>Task of TierForContact</returns>
        public async System.Threading.Tasks.Task<TierForContact> AddSubscriptionToTierAsync (Guid? pid, Guid? cid, Guid? tid)
        {
             ApiResponse<TierForContact> localVarResponse = await AddSubscriptionToTierAsyncWithHttpInfo(pid, cid, tid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign a tier Manually assigns a tier to a specific membership.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="cid">Contact ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>Task of ApiResponse (TierForContact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TierForContact>> AddSubscriptionToTierAsyncWithHttpInfo (Guid? pid, Guid? cid, Guid? tid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->AddSubscriptionToTier");
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling TierApi->AddSubscriptionToTier");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling TierApi->AddSubscriptionToTier");

            var localVarPath = "./loyalty/tier/programs/{pid}/contacts/{cid}/tiers/{tid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (cid != null) localVarPathParams.Add("cid", this.Configuration.ApiClient.ParameterToString(cid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSubscriptionToTier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TierForContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TierForContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TierForContact)));
        }

        /// <summary>
        /// Create a tier Creates a new tier in a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload"></param>
        /// <returns>Tier</returns>
        public Tier CreateTierForTierGroup (Guid? pid, Guid? gid, TierRequest payload)
        {
             ApiResponse<Tier> localVarResponse = CreateTierForTierGroupWithHttpInfo(pid, gid, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a tier Creates a new tier in a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Tier</returns>
        public ApiResponse< Tier > CreateTierForTierGroupWithHttpInfo (Guid? pid, Guid? gid, TierRequest payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->CreateTierForTierGroup");
            // verify the required parameter 'gid' is set
            if (gid == null)
                throw new ApiException(400, "Missing required parameter 'gid' when calling TierApi->CreateTierForTierGroup");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TierApi->CreateTierForTierGroup");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups/{gid}/tiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (gid != null) localVarPathParams.Add("gid", this.Configuration.ApiClient.ParameterToString(gid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTierForTierGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Tier) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tier)));
        }

        /// <summary>
        /// Create a tier Creates a new tier in a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload"></param>
        /// <returns>Task of Tier</returns>
        public async System.Threading.Tasks.Task<Tier> CreateTierForTierGroupAsync (Guid? pid, Guid? gid, TierRequest payload)
        {
             ApiResponse<Tier> localVarResponse = await CreateTierForTierGroupAsyncWithHttpInfo(pid, gid, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a tier Creates a new tier in a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse (Tier)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tier>> CreateTierForTierGroupAsyncWithHttpInfo (Guid? pid, Guid? gid, TierRequest payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->CreateTierForTierGroup");
            // verify the required parameter 'gid' is set
            if (gid == null)
                throw new ApiException(400, "Missing required parameter 'gid' when calling TierApi->CreateTierForTierGroup");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TierApi->CreateTierForTierGroup");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups/{gid}/tiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (gid != null) localVarPathParams.Add("gid", this.Configuration.ApiClient.ParameterToString(gid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTierForTierGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Tier) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tier)));
        }

        /// <summary>
        /// Create a tier group Creates a new tier group in a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Tier group creation payload</param>
        /// <returns>TierGroup</returns>
        public TierGroup CreateTierGroup (Guid? pid, CreateTierGroupRequest payload)
        {
             ApiResponse<TierGroup> localVarResponse = CreateTierGroupWithHttpInfo(pid, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a tier group Creates a new tier group in a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Tier group creation payload</param>
        /// <returns>ApiResponse of TierGroup</returns>
        public ApiResponse< TierGroup > CreateTierGroupWithHttpInfo (Guid? pid, CreateTierGroupRequest payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->CreateTierGroup");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TierApi->CreateTierGroup");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTierGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TierGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TierGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TierGroup)));
        }

        /// <summary>
        /// Create a tier group Creates a new tier group in a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Tier group creation payload</param>
        /// <returns>Task of TierGroup</returns>
        public async System.Threading.Tasks.Task<TierGroup> CreateTierGroupAsync (Guid? pid, CreateTierGroupRequest payload)
        {
             ApiResponse<TierGroup> localVarResponse = await CreateTierGroupAsyncWithHttpInfo(pid, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a tier group Creates a new tier group in a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="payload">Tier group creation payload</param>
        /// <returns>Task of ApiResponse (TierGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TierGroup>> CreateTierGroupAsyncWithHttpInfo (Guid? pid, CreateTierGroupRequest payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->CreateTierGroup");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TierApi->CreateTierGroup");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTierGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TierGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TierGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TierGroup)));
        }

        /// <summary>
        /// Delete tier Deletes a tier from a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>string</returns>
        public string DeleteTier (Guid? pid, Guid? tid)
        {
             ApiResponse<string> localVarResponse = DeleteTierWithHttpInfo(pid, tid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete tier Deletes a tier from a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteTierWithHttpInfo (Guid? pid, Guid? tid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->DeleteTier");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling TierApi->DeleteTier");

            var localVarPath = "./loyalty/tier/programs/{pid}/tiers/{tid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete tier Deletes a tier from a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteTierAsync (Guid? pid, Guid? tid)
        {
             ApiResponse<string> localVarResponse = await DeleteTierAsyncWithHttpInfo(pid, tid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete tier Deletes a tier from a loyalty program tier group. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteTierAsyncWithHttpInfo (Guid? pid, Guid? tid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->DeleteTier");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling TierApi->DeleteTier");

            var localVarPath = "./loyalty/tier/programs/{pid}/tiers/{tid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete tier group Deletes a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <returns>string</returns>
        public string DeleteTierGroup (Guid? pid, Guid? gid)
        {
             ApiResponse<string> localVarResponse = DeleteTierGroupWithHttpInfo(pid, gid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete tier group Deletes a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteTierGroupWithHttpInfo (Guid? pid, Guid? gid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->DeleteTierGroup");
            // verify the required parameter 'gid' is set
            if (gid == null)
                throw new ApiException(400, "Missing required parameter 'gid' when calling TierApi->DeleteTierGroup");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups/{gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (gid != null) localVarPathParams.Add("gid", this.Configuration.ApiClient.ParameterToString(gid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTierGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete tier group Deletes a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteTierGroupAsync (Guid? pid, Guid? gid)
        {
             ApiResponse<string> localVarResponse = await DeleteTierGroupAsyncWithHttpInfo(pid, gid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete tier group Deletes a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteTierGroupAsyncWithHttpInfo (Guid? pid, Guid? gid)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->DeleteTierGroup");
            // verify the required parameter 'gid' is set
            if (gid == null)
                throw new ApiException(400, "Missing required parameter 'gid' when calling TierApi->DeleteTierGroup");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups/{gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (gid != null) localVarPathParams.Add("gid", this.Configuration.ApiClient.ParameterToString(gid)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTierGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List tier groups Returns the list of tier groups defined within the loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to draft)</param>
        /// <returns>TierGroupPage</returns>
        public TierGroupPage GetListOfTierGroups (Guid? pid, string version = null)
        {
             ApiResponse<TierGroupPage> localVarResponse = GetListOfTierGroupsWithHttpInfo(pid, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List tier groups Returns the list of tier groups defined within the loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to draft)</param>
        /// <returns>ApiResponse of TierGroupPage</returns>
        public ApiResponse< TierGroupPage > GetListOfTierGroupsWithHttpInfo (Guid? pid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->GetListOfTierGroups");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfTierGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TierGroupPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TierGroupPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TierGroupPage)));
        }

        /// <summary>
        /// List tier groups Returns the list of tier groups defined within the loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to draft)</param>
        /// <returns>Task of TierGroupPage</returns>
        public async System.Threading.Tasks.Task<TierGroupPage> GetListOfTierGroupsAsync (Guid? pid, string version = null)
        {
             ApiResponse<TierGroupPage> localVarResponse = await GetListOfTierGroupsAsyncWithHttpInfo(pid, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List tier groups Returns the list of tier groups defined within the loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tier groups which are live for clients. Select draft to retrieve list of all non deleted tier groups. (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (TierGroupPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TierGroupPage>> GetListOfTierGroupsAsyncWithHttpInfo (Guid? pid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->GetListOfTierGroups");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListOfTierGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TierGroupPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TierGroupPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TierGroupPage)));
        }

        /// <summary>
        /// List tiers Returns the list of tiers defined within the loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to draft)</param>
        /// <returns>LoyaltyTierPage</returns>
        public LoyaltyTierPage GetLoyaltyProgramTier (Guid? pid, string version = null)
        {
             ApiResponse<LoyaltyTierPage> localVarResponse = GetLoyaltyProgramTierWithHttpInfo(pid, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List tiers Returns the list of tiers defined within the loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to draft)</param>
        /// <returns>ApiResponse of LoyaltyTierPage</returns>
        public ApiResponse< LoyaltyTierPage > GetLoyaltyProgramTierWithHttpInfo (Guid? pid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->GetLoyaltyProgramTier");

            var localVarPath = "./loyalty/tier/programs/{pid}/tiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyProgramTier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyTierPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyTierPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyTierPage)));
        }

        /// <summary>
        /// List tiers Returns the list of tiers defined within the loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to draft)</param>
        /// <returns>Task of LoyaltyTierPage</returns>
        public async System.Threading.Tasks.Task<LoyaltyTierPage> GetLoyaltyProgramTierAsync (Guid? pid, string version = null)
        {
             ApiResponse<LoyaltyTierPage> localVarResponse = await GetLoyaltyProgramTierAsyncWithHttpInfo(pid, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List tiers Returns the list of tiers defined within the loyalty program.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="version">Select &#39;active&#39; to retrieve list of all tiers which are live for clients. Select draft to retrieve list of all non deleted tiers. (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (LoyaltyTierPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoyaltyTierPage>> GetLoyaltyProgramTierAsyncWithHttpInfo (Guid? pid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->GetLoyaltyProgramTier");

            var localVarPath = "./loyalty/tier/programs/{pid}/tiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyProgramTier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyTierPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (LoyaltyTierPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyTierPage)));
        }

        /// <summary>
        /// Get tier group Returns tier group information.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="version">Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to draft)</param>
        /// <returns>TierGroup</returns>
        public TierGroup GetTierGroup (Guid? pid, Guid? gid, string version = null)
        {
             ApiResponse<TierGroup> localVarResponse = GetTierGroupWithHttpInfo(pid, gid, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tier group Returns tier group information.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="version">Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to draft)</param>
        /// <returns>ApiResponse of TierGroup</returns>
        public ApiResponse< TierGroup > GetTierGroupWithHttpInfo (Guid? pid, Guid? gid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->GetTierGroup");
            // verify the required parameter 'gid' is set
            if (gid == null)
                throw new ApiException(400, "Missing required parameter 'gid' when calling TierApi->GetTierGroup");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups/{gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (gid != null) localVarPathParams.Add("gid", this.Configuration.ApiClient.ParameterToString(gid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTierGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TierGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TierGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TierGroup)));
        }

        /// <summary>
        /// Get tier group Returns tier group information.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="version">Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to draft)</param>
        /// <returns>Task of TierGroup</returns>
        public async System.Threading.Tasks.Task<TierGroup> GetTierGroupAsync (Guid? pid, Guid? gid, string version = null)
        {
             ApiResponse<TierGroup> localVarResponse = await GetTierGroupAsyncWithHttpInfo(pid, gid, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tier group Returns tier group information.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="version">Select active to retrieve active version of tier group. Select draft to retrieve latest changes in tier group. (optional, default to draft)</param>
        /// <returns>Task of ApiResponse (TierGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TierGroup>> GetTierGroupAsyncWithHttpInfo (Guid? pid, Guid? gid, string version = null)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->GetTierGroup");
            // verify the required parameter 'gid' is set
            if (gid == null)
                throw new ApiException(400, "Missing required parameter 'gid' when calling TierApi->GetTierGroup");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups/{gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (gid != null) localVarPathParams.Add("gid", this.Configuration.ApiClient.ParameterToString(gid)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTierGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TierGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TierGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TierGroup)));
        }

        /// <summary>
        /// Update tier Modifies an existing tier for the specified tier group *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <param name="payload"></param>
        /// <returns>Tier</returns>
        public Tier UpdateTier (Guid? pid, Guid? tid, TierRequestPutPayload payload)
        {
             ApiResponse<Tier> localVarResponse = UpdateTierWithHttpInfo(pid, tid, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update tier Modifies an existing tier for the specified tier group *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <param name="payload"></param>
        /// <returns>ApiResponse of Tier</returns>
        public ApiResponse< Tier > UpdateTierWithHttpInfo (Guid? pid, Guid? tid, TierRequestPutPayload payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->UpdateTier");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling TierApi->UpdateTier");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TierApi->UpdateTier");

            var localVarPath = "./loyalty/tier/programs/{pid}/tiers/{tid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Tier) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tier)));
        }

        /// <summary>
        /// Update tier Modifies an existing tier for the specified tier group *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <param name="payload"></param>
        /// <returns>Task of Tier</returns>
        public async System.Threading.Tasks.Task<Tier> UpdateTierAsync (Guid? pid, Guid? tid, TierRequestPutPayload payload)
        {
             ApiResponse<Tier> localVarResponse = await UpdateTierAsyncWithHttpInfo(pid, tid, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update tier Modifies an existing tier for the specified tier group *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="tid">Tier ID</param>
        /// <param name="payload"></param>
        /// <returns>Task of ApiResponse (Tier)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tier>> UpdateTierAsyncWithHttpInfo (Guid? pid, Guid? tid, TierRequestPutPayload payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->UpdateTier");
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling TierApi->UpdateTier");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TierApi->UpdateTier");

            var localVarPath = "./loyalty/tier/programs/{pid}/tiers/{tid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (tid != null) localVarPathParams.Add("tid", this.Configuration.ApiClient.ParameterToString(tid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Tier) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tier)));
        }

        /// <summary>
        /// Update tier group Updates a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload">Tier group update payload</param>
        /// <returns>TierGroup</returns>
        public TierGroup UpdateTierGroup (Guid? pid, Guid? gid, UpdateTierGroupRequest payload)
        {
             ApiResponse<TierGroup> localVarResponse = UpdateTierGroupWithHttpInfo(pid, gid, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update tier group Updates a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload">Tier group update payload</param>
        /// <returns>ApiResponse of TierGroup</returns>
        public ApiResponse< TierGroup > UpdateTierGroupWithHttpInfo (Guid? pid, Guid? gid, UpdateTierGroupRequest payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->UpdateTierGroup");
            // verify the required parameter 'gid' is set
            if (gid == null)
                throw new ApiException(400, "Missing required parameter 'gid' when calling TierApi->UpdateTierGroup");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TierApi->UpdateTierGroup");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups/{gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (gid != null) localVarPathParams.Add("gid", this.Configuration.ApiClient.ParameterToString(gid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTierGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TierGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TierGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TierGroup)));
        }

        /// <summary>
        /// Update tier group Updates a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload">Tier group update payload</param>
        /// <returns>Task of TierGroup</returns>
        public async System.Threading.Tasks.Task<TierGroup> UpdateTierGroupAsync (Guid? pid, Guid? gid, UpdateTierGroupRequest payload)
        {
             ApiResponse<TierGroup> localVarResponse = await UpdateTierGroupAsyncWithHttpInfo(pid, gid, payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update tier group Updates a tier group from a loyalty program. *(The changes will take effect with the next publication of the loyalty program)*
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pid">Loyalty Program ID</param>
        /// <param name="gid">Tier group ID</param>
        /// <param name="payload">Tier group update payload</param>
        /// <returns>Task of ApiResponse (TierGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TierGroup>> UpdateTierGroupAsyncWithHttpInfo (Guid? pid, Guid? gid, UpdateTierGroupRequest payload)
        {
            // verify the required parameter 'pid' is set
            if (pid == null)
                throw new ApiException(400, "Missing required parameter 'pid' when calling TierApi->UpdateTierGroup");
            // verify the required parameter 'gid' is set
            if (gid == null)
                throw new ApiException(400, "Missing required parameter 'gid' when calling TierApi->UpdateTierGroup");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TierApi->UpdateTierGroup");

            var localVarPath = "./loyalty/tier/programs/{pid}/tier-groups/{gid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pid != null) localVarPathParams.Add("pid", this.Configuration.ApiClient.ParameterToString(pid)); // path parameter
            if (gid != null) localVarPathParams.Add("gid", this.Configuration.ApiClient.ParameterToString(gid)); // path parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTierGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TierGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TierGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TierGroup)));
        }

    }
}
