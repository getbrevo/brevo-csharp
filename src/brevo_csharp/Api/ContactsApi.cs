/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using brevo_csharp.Client;
using brevo_csharp.Model;

namespace brevo_csharp.Api
{


    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi 
    {
        private brevo_csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(String basePath)
        {
            this.Configuration = new brevo_csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(brevo_csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = brevo_csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public brevo_csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public brevo_csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses OR IDs of the contacts</param>
        /// <returns>PostContactInfo</returns>
        public PostContactInfo AddContactToList (string apiKey, string partnerKey, long? listId, AddContactToList contactEmails)
        {
             ApiResponse<PostContactInfo> localVarResponse = AddContactToListWithHttpInfo(apiKey, partnerKey, listId, contactEmails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses OR IDs of the contacts</param>
        /// <returns>ApiResponse of PostContactInfo</returns>
        public ApiResponse< PostContactInfo > AddContactToListWithHttpInfo (string apiKey, string partnerKey, long? listId, AddContactToList contactEmails)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->AddContactToList");
            // verify the required parameter 'contactEmails' is set
            if (contactEmails == null)
                throw new ApiException(400, "Missing required parameter 'contactEmails' when calling ContactsApi->AddContactToList");

            var localVarPath = "./contacts/lists/{listId}/contacts/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactEmails != null && contactEmails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactEmails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactEmails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContactInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PostContactInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContactInfo)));
        }

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses OR IDs of the contacts</param>
        /// <returns>Task of PostContactInfo</returns>
        public async System.Threading.Tasks.Task<PostContactInfo> AddContactToListAsync (string apiKey, string partnerKey, long? listId, AddContactToList contactEmails)
        {
             ApiResponse<PostContactInfo> localVarResponse = await AddContactToListAsyncWithHttpInfo(apiKey, partnerKey, listId, contactEmails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses OR IDs of the contacts</param>
        /// <returns>Task of ApiResponse (PostContactInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostContactInfo>> AddContactToListAsyncWithHttpInfo (string apiKey, string partnerKey, long? listId, AddContactToList contactEmails)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->AddContactToList");
            // verify the required parameter 'contactEmails' is set
            if (contactEmails == null)
                throw new ApiException(400, "Missing required parameter 'contactEmails' when calling ContactsApi->AddContactToList");

            var localVarPath = "./contacts/lists/{listId}/contacts/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactEmails != null && contactEmails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactEmails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactEmails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContactInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PostContactInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContactInfo)));
        }

        /// <summary>
        /// Create contact attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <returns></returns>
        public void CreateAttribute (string apiKey, string partnerKey, string attributeCategory, string attributeName, CreateAttribute createAttribute)
        {
             CreateAttributeWithHttpInfo(apiKey, partnerKey, attributeCategory, attributeName, createAttribute);
        }

        /// <summary>
        /// Create contact attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateAttributeWithHttpInfo (string apiKey, string partnerKey, string attributeCategory, string attributeName, CreateAttribute createAttribute)
        {
            // verify the required parameter 'attributeCategory' is set
            if (attributeCategory == null)
                throw new ApiException(400, "Missing required parameter 'attributeCategory' when calling ContactsApi->CreateAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling ContactsApi->CreateAttribute");
            // verify the required parameter 'createAttribute' is set
            if (createAttribute == null)
                throw new ApiException(400, "Missing required parameter 'createAttribute' when calling ContactsApi->CreateAttribute");

            var localVarPath = "./contacts/attributes/{attributeCategory}/{attributeName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attributeCategory != null) localVarPathParams.Add("attributeCategory", this.Configuration.ApiClient.ParameterToString(attributeCategory)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attributeName", this.Configuration.ApiClient.ParameterToString(attributeName)); // path parameter
            if (createAttribute != null && createAttribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAttribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAttribute; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create contact attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAttributeAsync (string apiKey, string partnerKey, string attributeCategory, string attributeName, CreateAttribute createAttribute)
        {
             await CreateAttributeAsyncWithHttpInfo(apiKey, partnerKey, attributeCategory, attributeName, createAttribute);

        }

        /// <summary>
        /// Create contact attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAttributeAsyncWithHttpInfo (string apiKey, string partnerKey, string attributeCategory, string attributeName, CreateAttribute createAttribute)
        {
            // verify the required parameter 'attributeCategory' is set
            if (attributeCategory == null)
                throw new ApiException(400, "Missing required parameter 'attributeCategory' when calling ContactsApi->CreateAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling ContactsApi->CreateAttribute");
            // verify the required parameter 'createAttribute' is set
            if (createAttribute == null)
                throw new ApiException(400, "Missing required parameter 'createAttribute' when calling ContactsApi->CreateAttribute");

            var localVarPath = "./contacts/attributes/{attributeCategory}/{attributeName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attributeCategory != null) localVarPathParams.Add("attributeCategory", this.Configuration.ApiClient.ParameterToString(attributeCategory)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attributeName", this.Configuration.ApiClient.ParameterToString(attributeName)); // path parameter
            if (createAttribute != null && createAttribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAttribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAttribute; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContact">Values to create a contact</param>
        /// <returns>CreateUpdateContactModel</returns>
        public CreateUpdateContactModel CreateContact (string apiKey, string partnerKey, CreateContact createContact)
        {
             ApiResponse<CreateUpdateContactModel> localVarResponse = CreateContactWithHttpInfo(apiKey, partnerKey, createContact);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContact">Values to create a contact</param>
        /// <returns>ApiResponse of CreateUpdateContactModel</returns>
        public ApiResponse< CreateUpdateContactModel > CreateContactWithHttpInfo (string apiKey, string partnerKey, CreateContact createContact)
        {
            // verify the required parameter 'createContact' is set
            if (createContact == null)
                throw new ApiException(400, "Missing required parameter 'createContact' when calling ContactsApi->CreateContact");

            var localVarPath = "./contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createContact != null && createContact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContact; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateUpdateContactModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateUpdateContactModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateUpdateContactModel)));
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContact">Values to create a contact</param>
        /// <returns>Task of CreateUpdateContactModel</returns>
        public async System.Threading.Tasks.Task<CreateUpdateContactModel> CreateContactAsync (string apiKey, string partnerKey, CreateContact createContact)
        {
             ApiResponse<CreateUpdateContactModel> localVarResponse = await CreateContactAsyncWithHttpInfo(apiKey, partnerKey, createContact);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContact">Values to create a contact</param>
        /// <returns>Task of ApiResponse (CreateUpdateContactModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateUpdateContactModel>> CreateContactAsyncWithHttpInfo (string apiKey, string partnerKey, CreateContact createContact)
        {
            // verify the required parameter 'createContact' is set
            if (createContact == null)
                throw new ApiException(400, "Missing required parameter 'createContact' when calling ContactsApi->CreateContact");

            var localVarPath = "./contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createContact != null && createContact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContact; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateUpdateContactModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateUpdateContactModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateUpdateContactModel)));
        }

        /// <summary>
        /// Create Contact via DOI (Double-Opt-In) Flow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
        /// <returns></returns>
        public void CreateDoiContact (string apiKey, string partnerKey, CreateDoiContact createDoiContact)
        {
             CreateDoiContactWithHttpInfo(apiKey, partnerKey, createDoiContact);
        }

        /// <summary>
        /// Create Contact via DOI (Double-Opt-In) Flow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateDoiContactWithHttpInfo (string apiKey, string partnerKey, CreateDoiContact createDoiContact)
        {
            // verify the required parameter 'createDoiContact' is set
            if (createDoiContact == null)
                throw new ApiException(400, "Missing required parameter 'createDoiContact' when calling ContactsApi->CreateDoiContact");

            var localVarPath = "./contacts/doubleOptinConfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createDoiContact != null && createDoiContact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createDoiContact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDoiContact; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDoiContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Contact via DOI (Double-Opt-In) Flow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateDoiContactAsync (string apiKey, string partnerKey, CreateDoiContact createDoiContact)
        {
             await CreateDoiContactAsyncWithHttpInfo(apiKey, partnerKey, createDoiContact);

        }

        /// <summary>
        /// Create Contact via DOI (Double-Opt-In) Flow 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateDoiContactAsyncWithHttpInfo (string apiKey, string partnerKey, CreateDoiContact createDoiContact)
        {
            // verify the required parameter 'createDoiContact' is set
            if (createDoiContact == null)
                throw new ApiException(400, "Missing required parameter 'createDoiContact' when calling ContactsApi->CreateDoiContact");

            var localVarPath = "./contacts/doubleOptinConfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createDoiContact != null && createDoiContact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createDoiContact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDoiContact; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDoiContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolder">Name of the folder</param>
        /// <returns>CreateModel</returns>
        public CreateModel CreateFolder (string apiKey, string partnerKey, CreateUpdateFolder createFolder)
        {
             ApiResponse<CreateModel> localVarResponse = CreateFolderWithHttpInfo(apiKey, partnerKey, createFolder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolder">Name of the folder</param>
        /// <returns>ApiResponse of CreateModel</returns>
        public ApiResponse< CreateModel > CreateFolderWithHttpInfo (string apiKey, string partnerKey, CreateUpdateFolder createFolder)
        {
            // verify the required parameter 'createFolder' is set
            if (createFolder == null)
                throw new ApiException(400, "Missing required parameter 'createFolder' when calling ContactsApi->CreateFolder");

            var localVarPath = "./contacts/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createFolder != null && createFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createFolder; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateModel)));
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolder">Name of the folder</param>
        /// <returns>Task of CreateModel</returns>
        public async System.Threading.Tasks.Task<CreateModel> CreateFolderAsync (string apiKey, string partnerKey, CreateUpdateFolder createFolder)
        {
             ApiResponse<CreateModel> localVarResponse = await CreateFolderAsyncWithHttpInfo(apiKey, partnerKey, createFolder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolder">Name of the folder</param>
        /// <returns>Task of ApiResponse (CreateModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateModel>> CreateFolderAsyncWithHttpInfo (string apiKey, string partnerKey, CreateUpdateFolder createFolder)
        {
            // verify the required parameter 'createFolder' is set
            if (createFolder == null)
                throw new ApiException(400, "Missing required parameter 'createFolder' when calling ContactsApi->CreateFolder");

            var localVarPath = "./contacts/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createFolder != null && createFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createFolder; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateModel)));
        }

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>CreateModel</returns>
        public CreateModel CreateList (string apiKey, string partnerKey, CreateList createList)
        {
             ApiResponse<CreateModel> localVarResponse = CreateListWithHttpInfo(apiKey, partnerKey, createList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>ApiResponse of CreateModel</returns>
        public ApiResponse< CreateModel > CreateListWithHttpInfo (string apiKey, string partnerKey, CreateList createList)
        {
            // verify the required parameter 'createList' is set
            if (createList == null)
                throw new ApiException(400, "Missing required parameter 'createList' when calling ContactsApi->CreateList");

            var localVarPath = "./contacts/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createList != null && createList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createList; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateModel)));
        }

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>Task of CreateModel</returns>
        public async System.Threading.Tasks.Task<CreateModel> CreateListAsync (string apiKey, string partnerKey, CreateList createList)
        {
             ApiResponse<CreateModel> localVarResponse = await CreateListAsyncWithHttpInfo(apiKey, partnerKey, createList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>Task of ApiResponse (CreateModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateModel>> CreateListAsyncWithHttpInfo (string apiKey, string partnerKey, CreateList createList)
        {
            // verify the required parameter 'createList' is set
            if (createList == null)
                throw new ApiException(400, "Missing required parameter 'createList' when calling ContactsApi->CreateList");

            var localVarPath = "./contacts/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createList != null && createList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createList; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateModel)));
        }

        /// <summary>
        /// Delete an attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <returns></returns>
        public void DeleteAttribute (string apiKey, string partnerKey, string attributeCategory, string attributeName)
        {
             DeleteAttributeWithHttpInfo(apiKey, partnerKey, attributeCategory, attributeName);
        }

        /// <summary>
        /// Delete an attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAttributeWithHttpInfo (string apiKey, string partnerKey, string attributeCategory, string attributeName)
        {
            // verify the required parameter 'attributeCategory' is set
            if (attributeCategory == null)
                throw new ApiException(400, "Missing required parameter 'attributeCategory' when calling ContactsApi->DeleteAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling ContactsApi->DeleteAttribute");

            var localVarPath = "./contacts/attributes/{attributeCategory}/{attributeName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attributeCategory != null) localVarPathParams.Add("attributeCategory", this.Configuration.ApiClient.ParameterToString(attributeCategory)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attributeName", this.Configuration.ApiClient.ParameterToString(attributeName)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAttributeAsync (string apiKey, string partnerKey, string attributeCategory, string attributeName)
        {
             await DeleteAttributeAsyncWithHttpInfo(apiKey, partnerKey, attributeCategory, attributeName);

        }

        /// <summary>
        /// Delete an attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAttributeAsyncWithHttpInfo (string apiKey, string partnerKey, string attributeCategory, string attributeName)
        {
            // verify the required parameter 'attributeCategory' is set
            if (attributeCategory == null)
                throw new ApiException(400, "Missing required parameter 'attributeCategory' when calling ContactsApi->DeleteAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling ContactsApi->DeleteAttribute");

            var localVarPath = "./contacts/attributes/{attributeCategory}/{attributeName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attributeCategory != null) localVarPathParams.Add("attributeCategory", this.Configuration.ApiClient.ParameterToString(attributeCategory)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attributeName", this.Configuration.ApiClient.ParameterToString(attributeName)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <returns></returns>
        public void DeleteContact (string apiKey, string partnerKey, string identifier)
        {
             DeleteContactWithHttpInfo(apiKey, partnerKey, identifier);
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactWithHttpInfo (string apiKey, string partnerKey, string identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ContactsApi->DeleteContact");

            var localVarPath = "./contacts/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarPathParams.Add("identifier", this.Configuration.ApiClient.ParameterToString(identifier)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactAsync (string apiKey, string partnerKey, string identifier)
        {
             await DeleteContactAsyncWithHttpInfo(apiKey, partnerKey, identifier);

        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAsyncWithHttpInfo (string apiKey, string partnerKey, string identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ContactsApi->DeleteContact");

            var localVarPath = "./contacts/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarPathParams.Add("identifier", this.Configuration.ApiClient.ParameterToString(identifier)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a folder (and all its lists) 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <returns></returns>
        public void DeleteFolder (string apiKey, string partnerKey, long? folderId)
        {
             DeleteFolderWithHttpInfo(apiKey, partnerKey, folderId);
        }

        /// <summary>
        /// Delete a folder (and all its lists) 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFolderWithHttpInfo (string apiKey, string partnerKey, long? folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling ContactsApi->DeleteFolder");

            var localVarPath = "./contacts/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a folder (and all its lists) 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFolderAsync (string apiKey, string partnerKey, long? folderId)
        {
             await DeleteFolderAsyncWithHttpInfo(apiKey, partnerKey, folderId);

        }

        /// <summary>
        /// Delete a folder (and all its lists) 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFolderAsyncWithHttpInfo (string apiKey, string partnerKey, long? folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling ContactsApi->DeleteFolder");

            var localVarPath = "./contacts/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns></returns>
        public void DeleteList (string apiKey, string partnerKey, long? listId)
        {
             DeleteListWithHttpInfo(apiKey, partnerKey, listId);
        }

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListWithHttpInfo (string apiKey, string partnerKey, long? listId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->DeleteList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListAsync (string apiKey, string partnerKey, long? listId)
        {
             await DeleteListAsyncWithHttpInfo(apiKey, partnerKey, listId);

        }

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAsyncWithHttpInfo (string apiKey, string partnerKey, long? listId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->DeleteList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all attributes 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetAttributes</returns>
        public GetAttributes GetAttributes (string apiKey, string partnerKey)
        {
             ApiResponse<GetAttributes> localVarResponse = GetAttributesWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all attributes 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetAttributes</returns>
        public ApiResponse< GetAttributes > GetAttributesWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./contacts/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttributes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetAttributes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttributes)));
        }

        /// <summary>
        /// List all attributes 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetAttributes</returns>
        public async System.Threading.Tasks.Task<GetAttributes> GetAttributesAsync (string apiKey, string partnerKey)
        {
             ApiResponse<GetAttributes> localVarResponse = await GetAttributesAsyncWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all attributes 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetAttributes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAttributes>> GetAttributesAsyncWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./contacts/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttributes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetAttributes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttributes)));
        }

        /// <summary>
        /// Get a contact&#39;s details Along with the contact details, this endpoint will show the statistics of contact for the recent 90 days by default. To fetch the earlier statistics, please use Get contact campaign stats (https://developers.brevo.com/reference/contacts-7#getcontactstats) endpoint with the appropriate date ranges.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact OR its SMS attribute value</param>
        /// <param name="startDate">**Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate.  (optional)</param>
        /// <returns>GetExtendedContactDetails</returns>
        public GetExtendedContactDetails GetContactInfo (string apiKey, string partnerKey, string identifier, string startDate = null, string endDate = null)
        {
             ApiResponse<GetExtendedContactDetails> localVarResponse = GetContactInfoWithHttpInfo(apiKey, partnerKey, identifier, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a contact&#39;s details Along with the contact details, this endpoint will show the statistics of contact for the recent 90 days by default. To fetch the earlier statistics, please use Get contact campaign stats (https://developers.brevo.com/reference/contacts-7#getcontactstats) endpoint with the appropriate date ranges.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact OR its SMS attribute value</param>
        /// <param name="startDate">**Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate.  (optional)</param>
        /// <returns>ApiResponse of GetExtendedContactDetails</returns>
        public ApiResponse< GetExtendedContactDetails > GetContactInfoWithHttpInfo (string apiKey, string partnerKey, string identifier, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ContactsApi->GetContactInfo");

            var localVarPath = "./contacts/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarPathParams.Add("identifier", this.Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtendedContactDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetExtendedContactDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtendedContactDetails)));
        }

        /// <summary>
        /// Get a contact&#39;s details Along with the contact details, this endpoint will show the statistics of contact for the recent 90 days by default. To fetch the earlier statistics, please use Get contact campaign stats (https://developers.brevo.com/reference/contacts-7#getcontactstats) endpoint with the appropriate date ranges.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact OR its SMS attribute value</param>
        /// <param name="startDate">**Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate.  (optional)</param>
        /// <returns>Task of GetExtendedContactDetails</returns>
        public async System.Threading.Tasks.Task<GetExtendedContactDetails> GetContactInfoAsync (string apiKey, string partnerKey, string identifier, string startDate = null, string endDate = null)
        {
             ApiResponse<GetExtendedContactDetails> localVarResponse = await GetContactInfoAsyncWithHttpInfo(apiKey, partnerKey, identifier, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a contact&#39;s details Along with the contact details, this endpoint will show the statistics of contact for the recent 90 days by default. To fetch the earlier statistics, please use Get contact campaign stats (https://developers.brevo.com/reference/contacts-7#getcontactstats) endpoint with the appropriate date ranges.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact OR its SMS attribute value</param>
        /// <param name="startDate">**Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate.  (optional)</param>
        /// <returns>Task of ApiResponse (GetExtendedContactDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetExtendedContactDetails>> GetContactInfoAsyncWithHttpInfo (string apiKey, string partnerKey, string identifier, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ContactsApi->GetContactInfo");

            var localVarPath = "./contacts/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarPathParams.Add("identifier", this.Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtendedContactDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetExtendedContactDetails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtendedContactDetails)));
        }

        /// <summary>
        /// Get email campaigns&#39; statistics for a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate. Maximum difference between startDate and endDate should not be greater than 90 days (optional)</param>
        /// <returns>GetContactCampaignStats</returns>
        public GetContactCampaignStats GetContactStats (string apiKey, string partnerKey, string identifier, string startDate = null, string endDate = null)
        {
             ApiResponse<GetContactCampaignStats> localVarResponse = GetContactStatsWithHttpInfo(apiKey, partnerKey, identifier, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email campaigns&#39; statistics for a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate. Maximum difference between startDate and endDate should not be greater than 90 days (optional)</param>
        /// <returns>ApiResponse of GetContactCampaignStats</returns>
        public ApiResponse< GetContactCampaignStats > GetContactStatsWithHttpInfo (string apiKey, string partnerKey, string identifier, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ContactsApi->GetContactStats");

            var localVarPath = "./contacts/{identifier}/campaignStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarPathParams.Add("identifier", this.Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactCampaignStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetContactCampaignStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactCampaignStats)));
        }

        /// <summary>
        /// Get email campaigns&#39; statistics for a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate. Maximum difference between startDate and endDate should not be greater than 90 days (optional)</param>
        /// <returns>Task of GetContactCampaignStats</returns>
        public async System.Threading.Tasks.Task<GetContactCampaignStats> GetContactStatsAsync (string apiKey, string partnerKey, string identifier, string startDate = null, string endDate = null)
        {
             ApiResponse<GetContactCampaignStats> localVarResponse = await GetContactStatsAsyncWithHttpInfo(apiKey, partnerKey, identifier, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email campaigns&#39; statistics for a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate. Maximum difference between startDate and endDate should not be greater than 90 days (optional)</param>
        /// <returns>Task of ApiResponse (GetContactCampaignStats)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactCampaignStats>> GetContactStatsAsyncWithHttpInfo (string apiKey, string partnerKey, string identifier, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ContactsApi->GetContactStats");

            var localVarPath = "./contacts/{identifier}/campaignStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarPathParams.Add("identifier", this.Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactCampaignStats>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetContactCampaignStats) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactCampaignStats)));
        }

        /// <summary>
        /// Get all the contacts 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="segmentId">Id of the segment. **Either listIds or segmentId can be passed.** (optional)</param>
        /// <param name="listIds">Ids of the list. **Either listIds or segmentId can be passed.** (optional)</param>
        /// <returns>GetContacts</returns>
        public GetContacts GetContacts (string apiKey, string partnerKey, long? limit = null, long? offset = null, string modifiedSince = null, string createdSince = null, string sort = null, long? segmentId = null, List<long?> listIds = null)
        {
             ApiResponse<GetContacts> localVarResponse = GetContactsWithHttpInfo(apiKey, partnerKey, limit, offset, modifiedSince, createdSince, sort, segmentId, listIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the contacts 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="segmentId">Id of the segment. **Either listIds or segmentId can be passed.** (optional)</param>
        /// <param name="listIds">Ids of the list. **Either listIds or segmentId can be passed.** (optional)</param>
        /// <returns>ApiResponse of GetContacts</returns>
        public ApiResponse< GetContacts > GetContactsWithHttpInfo (string apiKey, string partnerKey, long? limit = null, long? offset = null, string modifiedSince = null, string createdSince = null, string sort = null, long? segmentId = null, List<long?> listIds = null)
        {

            var localVarPath = "./contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (segmentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentId", segmentId)); // query parameter
            if (listIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "listIds", listIds)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetContacts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContacts)));
        }

        /// <summary>
        /// Get all the contacts 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="segmentId">Id of the segment. **Either listIds or segmentId can be passed.** (optional)</param>
        /// <param name="listIds">Ids of the list. **Either listIds or segmentId can be passed.** (optional)</param>
        /// <returns>Task of GetContacts</returns>
        public async System.Threading.Tasks.Task<GetContacts> GetContactsAsync (string apiKey, string partnerKey, long? limit = null, long? offset = null, string modifiedSince = null, string createdSince = null, string sort = null, long? segmentId = null, List<long?> listIds = null)
        {
             ApiResponse<GetContacts> localVarResponse = await GetContactsAsyncWithHttpInfo(apiKey, partnerKey, limit, offset, modifiedSince, createdSince, sort, segmentId, listIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the contacts 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="segmentId">Id of the segment. **Either listIds or segmentId can be passed.** (optional)</param>
        /// <param name="listIds">Ids of the list. **Either listIds or segmentId can be passed.** (optional)</param>
        /// <returns>Task of ApiResponse (GetContacts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContacts>> GetContactsAsyncWithHttpInfo (string apiKey, string partnerKey, long? limit = null, long? offset = null, string modifiedSince = null, string createdSince = null, string sort = null, long? segmentId = null, List<long?> listIds = null)
        {

            var localVarPath = "./contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (createdSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdSince", createdSince)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (segmentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segmentId", segmentId)); // query parameter
            if (listIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "listIds", listIds)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetContacts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContacts)));
        }

        /// <summary>
        /// Get contacts in a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>GetContacts</returns>
        public GetContacts GetContactsFromList (string apiKey, string partnerKey, long? listId, string modifiedSince = null, long? limit = null, long? offset = null, string sort = null)
        {
             ApiResponse<GetContacts> localVarResponse = GetContactsFromListWithHttpInfo(apiKey, partnerKey, listId, modifiedSince, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contacts in a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContacts</returns>
        public ApiResponse< GetContacts > GetContactsFromListWithHttpInfo (string apiKey, string partnerKey, long? listId, string modifiedSince = null, long? limit = null, long? offset = null, string sort = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetContactsFromList");

            var localVarPath = "./contacts/lists/{listId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetContacts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContacts)));
        }

        /// <summary>
        /// Get contacts in a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>Task of GetContacts</returns>
        public async System.Threading.Tasks.Task<GetContacts> GetContactsFromListAsync (string apiKey, string partnerKey, long? listId, string modifiedSince = null, long? limit = null, long? offset = null, string sort = null)
        {
             ApiResponse<GetContacts> localVarResponse = await GetContactsFromListAsyncWithHttpInfo(apiKey, partnerKey, listId, modifiedSince, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contacts in a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContacts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContacts>> GetContactsFromListAsyncWithHttpInfo (string apiKey, string partnerKey, long? listId, string modifiedSince = null, long? limit = null, long? offset = null, string sort = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetContactsFromList");

            var localVarPath = "./contacts/lists/{listId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetContacts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContacts)));
        }

        /// <summary>
        /// Returns a folder&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">id of the folder</param>
        /// <returns>GetFolder</returns>
        public GetFolder GetFolder (string apiKey, string partnerKey, long? folderId)
        {
             ApiResponse<GetFolder> localVarResponse = GetFolderWithHttpInfo(apiKey, partnerKey, folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a folder&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">id of the folder</param>
        /// <returns>ApiResponse of GetFolder</returns>
        public ApiResponse< GetFolder > GetFolderWithHttpInfo (string apiKey, string partnerKey, long? folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling ContactsApi->GetFolder");

            var localVarPath = "./contacts/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetFolder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFolder)));
        }

        /// <summary>
        /// Returns a folder&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">id of the folder</param>
        /// <returns>Task of GetFolder</returns>
        public async System.Threading.Tasks.Task<GetFolder> GetFolderAsync (string apiKey, string partnerKey, long? folderId)
        {
             ApiResponse<GetFolder> localVarResponse = await GetFolderAsyncWithHttpInfo(apiKey, partnerKey, folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a folder&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">id of the folder</param>
        /// <returns>Task of ApiResponse (GetFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFolder>> GetFolderAsyncWithHttpInfo (string apiKey, string partnerKey, long? folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling ContactsApi->GetFolder");

            var localVarPath = "./contacts/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetFolder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFolder)));
        }

        /// <summary>
        /// Get lists in a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>GetFolderLists</returns>
        public GetFolderLists GetFolderLists (string apiKey, string partnerKey, long? folderId, long? limit = null, long? offset = null, string sort = null)
        {
             ApiResponse<GetFolderLists> localVarResponse = GetFolderListsWithHttpInfo(apiKey, partnerKey, folderId, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get lists in a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>ApiResponse of GetFolderLists</returns>
        public ApiResponse< GetFolderLists > GetFolderListsWithHttpInfo (string apiKey, string partnerKey, long? folderId, long? limit = null, long? offset = null, string sort = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling ContactsApi->GetFolderLists");

            var localVarPath = "./contacts/folders/{folderId}/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolderLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFolderLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetFolderLists) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFolderLists)));
        }

        /// <summary>
        /// Get lists in a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>Task of GetFolderLists</returns>
        public async System.Threading.Tasks.Task<GetFolderLists> GetFolderListsAsync (string apiKey, string partnerKey, long? folderId, long? limit = null, long? offset = null, string sort = null)
        {
             ApiResponse<GetFolderLists> localVarResponse = await GetFolderListsAsyncWithHttpInfo(apiKey, partnerKey, folderId, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get lists in a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetFolderLists)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFolderLists>> GetFolderListsAsyncWithHttpInfo (string apiKey, string partnerKey, long? folderId, long? limit = null, long? offset = null, string sort = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling ContactsApi->GetFolderLists");

            var localVarPath = "./contacts/folders/{folderId}/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolderLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFolderLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetFolderLists) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFolderLists)));
        }

        /// <summary>
        /// Get all folders 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>GetFolders</returns>
        public GetFolders GetFolders (string apiKey, string partnerKey, long? limit, long? offset, string sort = null)
        {
             ApiResponse<GetFolders> localVarResponse = GetFoldersWithHttpInfo(apiKey, partnerKey, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all folders 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>ApiResponse of GetFolders</returns>
        public ApiResponse< GetFolders > GetFoldersWithHttpInfo (string apiKey, string partnerKey, long? limit, long? offset, string sort = null)
        {
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling ContactsApi->GetFolders");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling ContactsApi->GetFolders");

            var localVarPath = "./contacts/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFolders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetFolders) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFolders)));
        }

        /// <summary>
        /// Get all folders 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>Task of GetFolders</returns>
        public async System.Threading.Tasks.Task<GetFolders> GetFoldersAsync (string apiKey, string partnerKey, long? limit, long? offset, string sort = null)
        {
             ApiResponse<GetFolders> localVarResponse = await GetFoldersAsyncWithHttpInfo(apiKey, partnerKey, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all folders 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetFolders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFolders>> GetFoldersAsyncWithHttpInfo (string apiKey, string partnerKey, long? limit, long? offset, string sort = null)
        {
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling ContactsApi->GetFolders");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling ContactsApi->GetFolders");

            var localVarPath = "./contacts/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFolders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetFolders) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFolders)));
        }

        /// <summary>
        /// Get a list&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="startDate">Mandatory if endDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result (optional)</param>
        /// <returns>GetExtendedList</returns>
        public GetExtendedList GetList (string apiKey, string partnerKey, long? listId, string startDate = null, string endDate = null)
        {
             ApiResponse<GetExtendedList> localVarResponse = GetListWithHttpInfo(apiKey, partnerKey, listId, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="startDate">Mandatory if endDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result (optional)</param>
        /// <returns>ApiResponse of GetExtendedList</returns>
        public ApiResponse< GetExtendedList > GetListWithHttpInfo (string apiKey, string partnerKey, long? listId, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtendedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetExtendedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtendedList)));
        }

        /// <summary>
        /// Get a list&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="startDate">Mandatory if endDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result (optional)</param>
        /// <returns>Task of GetExtendedList</returns>
        public async System.Threading.Tasks.Task<GetExtendedList> GetListAsync (string apiKey, string partnerKey, long? listId, string startDate = null, string endDate = null)
        {
             ApiResponse<GetExtendedList> localVarResponse = await GetListAsyncWithHttpInfo(apiKey, partnerKey, listId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list&#39;s details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="startDate">Mandatory if endDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result (optional)</param>
        /// <returns>Task of ApiResponse (GetExtendedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetExtendedList>> GetListAsyncWithHttpInfo (string apiKey, string partnerKey, long? listId, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtendedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetExtendedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtendedList)));
        }

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>GetLists</returns>
        public GetLists GetLists (string apiKey, string partnerKey, long? limit = null, long? offset = null, string sort = null)
        {
             ApiResponse<GetLists> localVarResponse = GetListsWithHttpInfo(apiKey, partnerKey, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>ApiResponse of GetLists</returns>
        public ApiResponse< GetLists > GetListsWithHttpInfo (string apiKey, string partnerKey, long? limit = null, long? offset = null, string sort = null)
        {

            var localVarPath = "./contacts/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetLists) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLists)));
        }

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>Task of GetLists</returns>
        public async System.Threading.Tasks.Task<GetLists> GetListsAsync (string apiKey, string partnerKey, long? limit = null, long? offset = null, string sort = null)
        {
             ApiResponse<GetLists> localVarResponse = await GetListsAsyncWithHttpInfo(apiKey, partnerKey, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetLists)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLists>> GetListsAsyncWithHttpInfo (string apiKey, string partnerKey, long? limit = null, long? offset = null, string sort = null)
        {

            var localVarPath = "./contacts/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetLists) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLists)));
        }

        /// <summary>
        /// Get all the Segments 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>GetSegments</returns>
        public GetSegments GetSegments (string apiKey, string partnerKey, long? limit, long? offset, string sort = null)
        {
             ApiResponse<GetSegments> localVarResponse = GetSegmentsWithHttpInfo(apiKey, partnerKey, limit, offset, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the Segments 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>ApiResponse of GetSegments</returns>
        public ApiResponse< GetSegments > GetSegmentsWithHttpInfo (string apiKey, string partnerKey, long? limit, long? offset, string sort = null)
        {
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling ContactsApi->GetSegments");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling ContactsApi->GetSegments");

            var localVarPath = "./contacts/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSegments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSegments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSegments)));
        }

        /// <summary>
        /// Get all the Segments 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>Task of GetSegments</returns>
        public async System.Threading.Tasks.Task<GetSegments> GetSegmentsAsync (string apiKey, string partnerKey, long? limit, long? offset, string sort = null)
        {
             ApiResponse<GetSegments> localVarResponse = await GetSegmentsAsyncWithHttpInfo(apiKey, partnerKey, limit, offset, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the Segments 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetSegments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSegments>> GetSegmentsAsyncWithHttpInfo (string apiKey, string partnerKey, long? limit, long? offset, string sort = null)
        {
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling ContactsApi->GetSegments");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling ContactsApi->GetSegments");

            var localVarPath = "./contacts/segments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSegments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSegments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSegments)));
        }

        /// <summary>
        /// Import contacts It returns the background process ID which on completion calls the notify URL that you have set in the input.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactImport">Values to import contacts in Brevo. To know more about the expected format, please have a look at &#x60;&#x60;https://help.brevo.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;</param>
        /// <returns>CreatedProcessId</returns>
        public CreatedProcessId ImportContacts (string apiKey, string partnerKey, RequestContactImport requestContactImport)
        {
             ApiResponse<CreatedProcessId> localVarResponse = ImportContactsWithHttpInfo(apiKey, partnerKey, requestContactImport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import contacts It returns the background process ID which on completion calls the notify URL that you have set in the input.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactImport">Values to import contacts in Brevo. To know more about the expected format, please have a look at &#x60;&#x60;https://help.brevo.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;</param>
        /// <returns>ApiResponse of CreatedProcessId</returns>
        public ApiResponse< CreatedProcessId > ImportContactsWithHttpInfo (string apiKey, string partnerKey, RequestContactImport requestContactImport)
        {
            // verify the required parameter 'requestContactImport' is set
            if (requestContactImport == null)
                throw new ApiException(400, "Missing required parameter 'requestContactImport' when calling ContactsApi->ImportContacts");

            var localVarPath = "./contacts/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestContactImport != null && requestContactImport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestContactImport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestContactImport; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedProcessId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreatedProcessId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedProcessId)));
        }

        /// <summary>
        /// Import contacts It returns the background process ID which on completion calls the notify URL that you have set in the input.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactImport">Values to import contacts in Brevo. To know more about the expected format, please have a look at &#x60;&#x60;https://help.brevo.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;</param>
        /// <returns>Task of CreatedProcessId</returns>
        public async System.Threading.Tasks.Task<CreatedProcessId> ImportContactsAsync (string apiKey, string partnerKey, RequestContactImport requestContactImport)
        {
             ApiResponse<CreatedProcessId> localVarResponse = await ImportContactsAsyncWithHttpInfo(apiKey, partnerKey, requestContactImport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import contacts It returns the background process ID which on completion calls the notify URL that you have set in the input.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactImport">Values to import contacts in Brevo. To know more about the expected format, please have a look at &#x60;&#x60;https://help.brevo.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;</param>
        /// <returns>Task of ApiResponse (CreatedProcessId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedProcessId>> ImportContactsAsyncWithHttpInfo (string apiKey, string partnerKey, RequestContactImport requestContactImport)
        {
            // verify the required parameter 'requestContactImport' is set
            if (requestContactImport == null)
                throw new ApiException(400, "Missing required parameter 'requestContactImport' when calling ContactsApi->ImportContacts");

            var localVarPath = "./contacts/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestContactImport != null && requestContactImport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestContactImport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestContactImport; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedProcessId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreatedProcessId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedProcessId)));
        }

        /// <summary>
        /// Delete a contact from a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses OR IDs of the contacts</param>
        /// <returns>PostContactInfo</returns>
        public PostContactInfo RemoveContactFromList (string apiKey, string partnerKey, long? listId, RemoveContactFromList contactEmails)
        {
             ApiResponse<PostContactInfo> localVarResponse = RemoveContactFromListWithHttpInfo(apiKey, partnerKey, listId, contactEmails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a contact from a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses OR IDs of the contacts</param>
        /// <returns>ApiResponse of PostContactInfo</returns>
        public ApiResponse< PostContactInfo > RemoveContactFromListWithHttpInfo (string apiKey, string partnerKey, long? listId, RemoveContactFromList contactEmails)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->RemoveContactFromList");
            // verify the required parameter 'contactEmails' is set
            if (contactEmails == null)
                throw new ApiException(400, "Missing required parameter 'contactEmails' when calling ContactsApi->RemoveContactFromList");

            var localVarPath = "./contacts/lists/{listId}/contacts/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactEmails != null && contactEmails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactEmails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactEmails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveContactFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContactInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PostContactInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContactInfo)));
        }

        /// <summary>
        /// Delete a contact from a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses OR IDs of the contacts</param>
        /// <returns>Task of PostContactInfo</returns>
        public async System.Threading.Tasks.Task<PostContactInfo> RemoveContactFromListAsync (string apiKey, string partnerKey, long? listId, RemoveContactFromList contactEmails)
        {
             ApiResponse<PostContactInfo> localVarResponse = await RemoveContactFromListAsyncWithHttpInfo(apiKey, partnerKey, listId, contactEmails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a contact from a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses OR IDs of the contacts</param>
        /// <returns>Task of ApiResponse (PostContactInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostContactInfo>> RemoveContactFromListAsyncWithHttpInfo (string apiKey, string partnerKey, long? listId, RemoveContactFromList contactEmails)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->RemoveContactFromList");
            // verify the required parameter 'contactEmails' is set
            if (contactEmails == null)
                throw new ApiException(400, "Missing required parameter 'contactEmails' when calling ContactsApi->RemoveContactFromList");

            var localVarPath = "./contacts/lists/{listId}/contacts/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactEmails != null && contactEmails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactEmails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactEmails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveContactFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContactInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PostContactInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContactInfo)));
        }

        /// <summary>
        /// Export contacts It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactExport">Values to request a contact export</param>
        /// <returns>CreatedProcessId</returns>
        public CreatedProcessId RequestContactExport (string apiKey, string partnerKey, RequestContactExport requestContactExport)
        {
             ApiResponse<CreatedProcessId> localVarResponse = RequestContactExportWithHttpInfo(apiKey, partnerKey, requestContactExport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export contacts It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactExport">Values to request a contact export</param>
        /// <returns>ApiResponse of CreatedProcessId</returns>
        public ApiResponse< CreatedProcessId > RequestContactExportWithHttpInfo (string apiKey, string partnerKey, RequestContactExport requestContactExport)
        {
            // verify the required parameter 'requestContactExport' is set
            if (requestContactExport == null)
                throw new ApiException(400, "Missing required parameter 'requestContactExport' when calling ContactsApi->RequestContactExport");

            var localVarPath = "./contacts/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestContactExport != null && requestContactExport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestContactExport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestContactExport; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestContactExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedProcessId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreatedProcessId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedProcessId)));
        }

        /// <summary>
        /// Export contacts It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactExport">Values to request a contact export</param>
        /// <returns>Task of CreatedProcessId</returns>
        public async System.Threading.Tasks.Task<CreatedProcessId> RequestContactExportAsync (string apiKey, string partnerKey, RequestContactExport requestContactExport)
        {
             ApiResponse<CreatedProcessId> localVarResponse = await RequestContactExportAsyncWithHttpInfo(apiKey, partnerKey, requestContactExport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export contacts It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactExport">Values to request a contact export</param>
        /// <returns>Task of ApiResponse (CreatedProcessId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedProcessId>> RequestContactExportAsyncWithHttpInfo (string apiKey, string partnerKey, RequestContactExport requestContactExport)
        {
            // verify the required parameter 'requestContactExport' is set
            if (requestContactExport == null)
                throw new ApiException(400, "Missing required parameter 'requestContactExport' when calling ContactsApi->RequestContactExport");

            var localVarPath = "./contacts/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestContactExport != null && requestContactExport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestContactExport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestContactExport; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestContactExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedProcessId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreatedProcessId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedProcessId)));
        }

        /// <summary>
        /// Update contact attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <returns></returns>
        public void UpdateAttribute (string apiKey, string partnerKey, string attributeCategory, string attributeName, UpdateAttribute updateAttribute)
        {
             UpdateAttributeWithHttpInfo(apiKey, partnerKey, attributeCategory, attributeName, updateAttribute);
        }

        /// <summary>
        /// Update contact attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAttributeWithHttpInfo (string apiKey, string partnerKey, string attributeCategory, string attributeName, UpdateAttribute updateAttribute)
        {
            // verify the required parameter 'attributeCategory' is set
            if (attributeCategory == null)
                throw new ApiException(400, "Missing required parameter 'attributeCategory' when calling ContactsApi->UpdateAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling ContactsApi->UpdateAttribute");
            // verify the required parameter 'updateAttribute' is set
            if (updateAttribute == null)
                throw new ApiException(400, "Missing required parameter 'updateAttribute' when calling ContactsApi->UpdateAttribute");

            var localVarPath = "./contacts/attributes/{attributeCategory}/{attributeName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attributeCategory != null) localVarPathParams.Add("attributeCategory", this.Configuration.ApiClient.ParameterToString(attributeCategory)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attributeName", this.Configuration.ApiClient.ParameterToString(attributeName)); // path parameter
            if (updateAttribute != null && updateAttribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateAttribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateAttribute; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update contact attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAttributeAsync (string apiKey, string partnerKey, string attributeCategory, string attributeName, UpdateAttribute updateAttribute)
        {
             await UpdateAttributeAsyncWithHttpInfo(apiKey, partnerKey, attributeCategory, attributeName, updateAttribute);

        }

        /// <summary>
        /// Update contact attribute 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAttributeAsyncWithHttpInfo (string apiKey, string partnerKey, string attributeCategory, string attributeName, UpdateAttribute updateAttribute)
        {
            // verify the required parameter 'attributeCategory' is set
            if (attributeCategory == null)
                throw new ApiException(400, "Missing required parameter 'attributeCategory' when calling ContactsApi->UpdateAttribute");
            // verify the required parameter 'attributeName' is set
            if (attributeName == null)
                throw new ApiException(400, "Missing required parameter 'attributeName' when calling ContactsApi->UpdateAttribute");
            // verify the required parameter 'updateAttribute' is set
            if (updateAttribute == null)
                throw new ApiException(400, "Missing required parameter 'updateAttribute' when calling ContactsApi->UpdateAttribute");

            var localVarPath = "./contacts/attributes/{attributeCategory}/{attributeName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attributeCategory != null) localVarPathParams.Add("attributeCategory", this.Configuration.ApiClient.ParameterToString(attributeCategory)); // path parameter
            if (attributeName != null) localVarPathParams.Add("attributeName", this.Configuration.ApiClient.ParameterToString(attributeName)); // path parameter
            if (updateAttribute != null && updateAttribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateAttribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateAttribute; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update multiple contacts 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBatchContacts">Values to update multiple contacts</param>
        /// <returns></returns>
        public void UpdateBatchContacts (string apiKey, string partnerKey, UpdateBatchContacts updateBatchContacts)
        {
             UpdateBatchContactsWithHttpInfo(apiKey, partnerKey, updateBatchContacts);
        }

        /// <summary>
        /// Update multiple contacts 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBatchContacts">Values to update multiple contacts</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateBatchContactsWithHttpInfo (string apiKey, string partnerKey, UpdateBatchContacts updateBatchContacts)
        {
            // verify the required parameter 'updateBatchContacts' is set
            if (updateBatchContacts == null)
                throw new ApiException(400, "Missing required parameter 'updateBatchContacts' when calling ContactsApi->UpdateBatchContacts");

            var localVarPath = "./contacts/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateBatchContacts != null && updateBatchContacts.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBatchContacts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBatchContacts; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBatchContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update multiple contacts 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBatchContacts">Values to update multiple contacts</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBatchContactsAsync (string apiKey, string partnerKey, UpdateBatchContacts updateBatchContacts)
        {
             await UpdateBatchContactsAsyncWithHttpInfo(apiKey, partnerKey, updateBatchContacts);

        }

        /// <summary>
        /// Update multiple contacts 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBatchContacts">Values to update multiple contacts</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBatchContactsAsyncWithHttpInfo (string apiKey, string partnerKey, UpdateBatchContacts updateBatchContacts)
        {
            // verify the required parameter 'updateBatchContacts' is set
            if (updateBatchContacts == null)
                throw new ApiException(400, "Missing required parameter 'updateBatchContacts' when calling ContactsApi->UpdateBatchContacts");

            var localVarPath = "./contacts/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateBatchContacts != null && updateBatchContacts.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBatchContacts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBatchContacts; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBatchContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <param name="updateContact">Values to update a contact</param>
        /// <returns></returns>
        public void UpdateContact (string apiKey, string partnerKey, string identifier, UpdateContact updateContact)
        {
             UpdateContactWithHttpInfo(apiKey, partnerKey, identifier, updateContact);
        }

        /// <summary>
        /// Update a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <param name="updateContact">Values to update a contact</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateContactWithHttpInfo (string apiKey, string partnerKey, string identifier, UpdateContact updateContact)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ContactsApi->UpdateContact");
            // verify the required parameter 'updateContact' is set
            if (updateContact == null)
                throw new ApiException(400, "Missing required parameter 'updateContact' when calling ContactsApi->UpdateContact");

            var localVarPath = "./contacts/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarPathParams.Add("identifier", this.Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (updateContact != null && updateContact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContact; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <param name="updateContact">Values to update a contact</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateContactAsync (string apiKey, string partnerKey, string identifier, UpdateContact updateContact)
        {
             await UpdateContactAsyncWithHttpInfo(apiKey, partnerKey, identifier, updateContact);

        }

        /// <summary>
        /// Update a contact 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Email (urlencoded) OR ID of the contact</param>
        /// <param name="updateContact">Values to update a contact</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContactAsyncWithHttpInfo (string apiKey, string partnerKey, string identifier, UpdateContact updateContact)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ContactsApi->UpdateContact");
            // verify the required parameter 'updateContact' is set
            if (updateContact == null)
                throw new ApiException(400, "Missing required parameter 'updateContact' when calling ContactsApi->UpdateContact");

            var localVarPath = "./contacts/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifier != null) localVarPathParams.Add("identifier", this.Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (updateContact != null && updateContact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContact; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <returns></returns>
        public void UpdateFolder (string apiKey, string partnerKey, long? folderId, CreateUpdateFolder updateFolder)
        {
             UpdateFolderWithHttpInfo(apiKey, partnerKey, folderId, updateFolder);
        }

        /// <summary>
        /// Update a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateFolderWithHttpInfo (string apiKey, string partnerKey, long? folderId, CreateUpdateFolder updateFolder)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling ContactsApi->UpdateFolder");
            // verify the required parameter 'updateFolder' is set
            if (updateFolder == null)
                throw new ApiException(400, "Missing required parameter 'updateFolder' when calling ContactsApi->UpdateFolder");

            var localVarPath = "./contacts/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (updateFolder != null && updateFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateFolder; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFolderAsync (string apiKey, string partnerKey, long? folderId, CreateUpdateFolder updateFolder)
        {
             await UpdateFolderAsyncWithHttpInfo(apiKey, partnerKey, folderId, updateFolder);

        }

        /// <summary>
        /// Update a folder 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFolderAsyncWithHttpInfo (string apiKey, string partnerKey, long? folderId, CreateUpdateFolder updateFolder)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling ContactsApi->UpdateFolder");
            // verify the required parameter 'updateFolder' is set
            if (updateFolder == null)
                throw new ApiException(400, "Missing required parameter 'updateFolder' when calling ContactsApi->UpdateFolder");

            var localVarPath = "./contacts/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (updateFolder != null && updateFolder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateFolder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateFolder; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns></returns>
        public void UpdateList (string apiKey, string partnerKey, long? listId, UpdateList updateList)
        {
             UpdateListWithHttpInfo(apiKey, partnerKey, listId, updateList);
        }

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateListWithHttpInfo (string apiKey, string partnerKey, long? listId, UpdateList updateList)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->UpdateList");
            // verify the required parameter 'updateList' is set
            if (updateList == null)
                throw new ApiException(400, "Missing required parameter 'updateList' when calling ContactsApi->UpdateList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (updateList != null && updateList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateList; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateListAsync (string apiKey, string partnerKey, long? listId, UpdateList updateList)
        {
             await UpdateListAsyncWithHttpInfo(apiKey, partnerKey, listId, updateList);

        }

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateListAsyncWithHttpInfo (string apiKey, string partnerKey, long? listId, UpdateList updateList)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->UpdateList");
            // verify the required parameter 'updateList' is set
            if (updateList == null)
                throw new ApiException(400, "Missing required parameter 'updateList' when calling ContactsApi->UpdateList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (updateList != null && updateList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateList; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
