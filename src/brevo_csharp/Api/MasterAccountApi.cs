/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using brevo_csharp.Client;
using brevo_csharp.Model;

namespace brevo_csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMasterAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns></returns>
        void CorporateGroupIdDelete (string id);

        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateGroupIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// GET a group details
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>CorporateGroupDetailsResponse</returns>
        CorporateGroupDetailsResponse CorporateGroupIdGet (string id);

        /// <summary>
        /// GET a group details
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>ApiResponse of CorporateGroupDetailsResponse</returns>
        ApiResponse<CorporateGroupDetailsResponse> CorporateGroupIdGetWithHttpInfo (string id);
        /// <summary>
        /// Update a group of sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update a group of sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns></returns>
        void CorporateGroupIdPut (string id, Body3 body);

        /// <summary>
        /// Update a group of sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update a group of sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateGroupIdPutWithHttpInfo (string id, Body3 body);
        /// <summary>
        /// Create a new group of sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to create a group of sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 CorporateGroupPost (Body body);

        /// <summary>
        /// Create a new group of sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to create a group of sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> CorporateGroupPostWithHttpInfo (Body body);
        /// <summary>
        /// Delete sub-account from group
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to remove a sub-organization from a group.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns></returns>
        void CorporateGroupUnlinkGroupIdSubAccountsPut (string groupId, Body4 body);

        /// <summary>
        /// Delete sub-account from group
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to remove a sub-organization from a group.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateGroupUnlinkGroupIdSubAccountsPutWithHttpInfo (string groupId, Body4 body);
        /// <summary>
        /// List of all IPs
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to retrieve the list of active IPs on your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void CorporateIpGet ();

        /// <summary>
        /// List of all IPs
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to retrieve the list of active IPs on your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateIpGetWithHttpInfo ();
        /// <summary>
        /// Get the details of requested master account
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details of the master account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MasterDetailsResponse</returns>
        MasterDetailsResponse CorporateMasterAccountGet ();

        /// <summary>
        /// Get the details of requested master account
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details of the master account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MasterDetailsResponse</returns>
        ApiResponse<MasterDetailsResponse> CorporateMasterAccountGetWithHttpInfo ();
        /// <summary>
        /// Generate SSO token to access admin account
        /// </summary>
        /// <remarks>
        /// This endpoint generates an SSO token to authenticate and access the admin account using the endpoint https://account-app.brevo.com/account/login/corporate/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequestCorporate">User email of admin account</param>
        /// <returns>GetSsoToken</returns>
        GetSsoToken CorporateSsoTokenPost (SsoTokenRequestCorporate ssoTokenRequestCorporate);

        /// <summary>
        /// Generate SSO token to access admin account
        /// </summary>
        /// <remarks>
        /// This endpoint generates an SSO token to authenticate and access the admin account using the endpoint https://account-app.brevo.com/account/login/corporate/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequestCorporate">User email of admin account</param>
        /// <returns>ApiResponse of GetSsoToken</returns>
        ApiResponse<GetSsoToken> CorporateSsoTokenPostWithHttpInfo (SsoTokenRequestCorporate ssoTokenRequestCorporate);
        /// <summary>
        /// Get the list of all the sub-accounts of the master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list all the sub-accounts of the master account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>SubAccountsResponse</returns>
        SubAccountsResponse CorporateSubAccountGet (int? offset, int? limit);

        /// <summary>
        /// Get the list of all the sub-accounts of the master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list all the sub-accounts of the master account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>ApiResponse of SubAccountsResponse</returns>
        ApiResponse<SubAccountsResponse> CorporateSubAccountGetWithHttpInfo (int? offset, int? limit);
        /// <summary>
        /// Enable/disable sub-account application(s)
        /// </summary>
        /// <remarks>
        /// API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns></returns>
        void CorporateSubAccountIdApplicationsTogglePut (long? id, SubAccountAppsToggleRequest toggleApplications);

        /// <summary>
        /// Enable/disable sub-account application(s)
        /// </summary>
        /// <remarks>
        /// API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateSubAccountIdApplicationsTogglePutWithHttpInfo (long? id, SubAccountAppsToggleRequest toggleApplications);
        /// <summary>
        /// Delete a sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns></returns>
        void CorporateSubAccountIdDelete (long? id);

        /// <summary>
        /// Delete a sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateSubAccountIdDeleteWithHttpInfo (long? id);
        /// <summary>
        /// Get sub-account details
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details for the specified sub-account company
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>SubAccountDetailsResponse</returns>
        SubAccountDetailsResponse CorporateSubAccountIdGet (long? id);

        /// <summary>
        /// Get sub-account details
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details for the specified sub-account company
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>ApiResponse of SubAccountDetailsResponse</returns>
        ApiResponse<SubAccountDetailsResponse> CorporateSubAccountIdGetWithHttpInfo (long? id);
        /// <summary>
        /// Update sub-account plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update the sub-account plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns></returns>
        void CorporateSubAccountIdPlanPut (long? id, SubAccountUpdatePlanRequest updatePlanDetails);

        /// <summary>
        /// Update sub-account plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update the sub-account plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateSubAccountIdPlanPutWithHttpInfo (long? id, SubAccountUpdatePlanRequest updatePlanDetails);
        /// <summary>
        /// Associate an IP to sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to associate an IP to sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address association details</param>
        /// <returns>Object</returns>
        Object CorporateSubAccountIpAssociatePost (Body1 body);

        /// <summary>
        /// Associate an IP to sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to associate an IP to sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address association details</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CorporateSubAccountIpAssociatePostWithHttpInfo (Body1 body);
        /// <summary>
        /// Dissociate an IP from sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to dissociate an IP from sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address dissociation details</param>
        /// <returns></returns>
        void CorporateSubAccountIpDissociatePut (Body2 body);

        /// <summary>
        /// Dissociate an IP from sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to dissociate an IP from sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address dissociation details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateSubAccountIpDissociatePutWithHttpInfo (Body2 body);
        /// <summary>
        /// Create an API key for a sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an API v3 key for a sub account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>CreateApiKeyResponse</returns>
        CreateApiKeyResponse CorporateSubAccountKeyPost (CreateApiKeyRequest createApiKeyRequest);

        /// <summary>
        /// Create an API key for a sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an API v3 key for a sub account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>ApiResponse of CreateApiKeyResponse</returns>
        ApiResponse<CreateApiKeyResponse> CorporateSubAccountKeyPostWithHttpInfo (CreateApiKeyRequest createApiKeyRequest);
        /// <summary>
        /// Create a new sub-account under a master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will create a new sub-account under a master account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>CreateSubAccountResponse</returns>
        CreateSubAccountResponse CorporateSubAccountPost (CreateSubAccount subAccountCreate);

        /// <summary>
        /// Create a new sub-account under a master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will create a new sub-account under a master account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>ApiResponse of CreateSubAccountResponse</returns>
        ApiResponse<CreateSubAccountResponse> CorporateSubAccountPostWithHttpInfo (CreateSubAccount subAccountCreate);
        /// <summary>
        /// Generate SSO token to access sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>GetSsoToken</returns>
        GetSsoToken CorporateSubAccountSsoTokenPost (SsoTokenRequest ssoTokenRequest);

        /// <summary>
        /// Generate SSO token to access sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>ApiResponse of GetSsoToken</returns>
        ApiResponse<GetSsoToken> CorporateSubAccountSsoTokenPostWithHttpInfo (SsoTokenRequest ssoTokenRequest);
        /// <summary>
        /// Update sub-accounts plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update multiple sub-accounts plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlanDetails">Values to update sub-accounts plan</param>
        /// <returns></returns>
        void CorporateSubAccountsPlanPut (SubAccountsUpdatePlanRequest updatePlanDetails);

        /// <summary>
        /// Update sub-accounts plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update multiple sub-accounts plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlanDetails">Values to update sub-accounts plan</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateSubAccountsPlanPutWithHttpInfo (SubAccountsUpdatePlanRequest updatePlanDetails);
        /// <summary>
        /// Change admin user permissions
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to change the permissions of Admin users of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of Admin user</param>
        /// <param name="body">Values to update an admin user permissions</param>
        /// <returns></returns>
        void CorporateUserEmailPermissionsPut (string email, Body5 body);

        /// <summary>
        /// Change admin user permissions
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to change the permissions of Admin users of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of Admin user</param>
        /// <param name="body">Values to update an admin user permissions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateUserEmailPermissionsPutWithHttpInfo (string email, Body5 body);
        /// <summary>
        /// Resend / cancel admin user invitation
        /// </summary>
        /// <remarks>
        /// This endpoint will allow the user to: - Resend an admin user invitation - Cancel an admin user invitation 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 CorporateUserInvitationActionEmailPut (string action, string email);

        /// <summary>
        /// Resend / cancel admin user invitation
        /// </summary>
        /// <remarks>
        /// This endpoint will allow the user to: - Resend an admin user invitation - Cancel an admin user invitation 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> CorporateUserInvitationActionEmailPutWithHttpInfo (string action, string email);
        /// <summary>
        /// Revoke an admin user
        /// </summary>
        /// <remarks>
        /// This endpoint allows to revoke/remove an invited member of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns></returns>
        void CorporateUserRevokeEmailDelete (string email);

        /// <summary>
        /// Revoke an admin user
        /// </summary>
        /// <remarks>
        /// This endpoint allows to revoke/remove an invited member of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CorporateUserRevokeEmailDeleteWithHttpInfo (string email);
        /// <summary>
        /// Get user activity logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="email">Enter the user&#39;s email address to filter their activity in the account. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>GetAccountActivity</returns>
        GetAccountActivity GetAccountActivity (string startDate = null, string endDate = null, string email = null, long? limit = null, long? offset = null);

        /// <summary>
        /// Get user activity logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="email">Enter the user&#39;s email address to filter their activity in the account. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAccountActivity</returns>
        ApiResponse<GetAccountActivity> GetAccountActivityWithHttpInfo (string startDate = null, string endDate = null, string email = null, long? limit = null, long? offset = null);
        /// <summary>
        /// Get the list of all admin users
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to list all Admin users of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCorporateInvitedUsersList</returns>
        GetCorporateInvitedUsersList GetCorporateInvitedUsersList ();

        /// <summary>
        /// Get the list of all admin users
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to list all Admin users of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCorporateInvitedUsersList</returns>
        ApiResponse<GetCorporateInvitedUsersList> GetCorporateInvitedUsersListWithHttpInfo ();
        /// <summary>
        /// Check admin user permissions
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list of admin user permissions
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>GetCorporateUserPermission</returns>
        GetCorporateUserPermission GetCorporateUserPermission (string email);

        /// <summary>
        /// Check admin user permissions
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list of admin user permissions
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>ApiResponse of GetCorporateUserPermission</returns>
        ApiResponse<GetCorporateUserPermission> GetCorporateUserPermissionWithHttpInfo (string email);
        /// <summary>
        /// Get the list of groups
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to list all groups created on your Admin account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse2001&gt;</returns>
        List<InlineResponse2001> GetSubAccountGroups ();

        /// <summary>
        /// Get the list of groups
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to list all groups created on your Admin account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse2001&gt;</returns>
        ApiResponse<List<InlineResponse2001>> GetSubAccountGroupsWithHttpInfo ();
        /// <summary>
        /// Send invitation to an admin user
        /// </summary>
        /// <remarks>
        /// &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot; - &#x60;sub_organization_groups&#x60;   - \&quot;create\&quot;   - \&quot;edit_delete\&quot; - &#x60;create_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;manage_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;analytics&#x60;   - \&quot;download_data\&quot;   - \&quot;create_alerts\&quot;   - \&quot;my_looks\&quot;   - \&quot;explore_create\&quot; - &#x60;security&#x60;   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>InviteAdminUser</returns>
        InviteAdminUser InviteAdminUser (InviteAdminUser sendInvitation);

        /// <summary>
        /// Send invitation to an admin user
        /// </summary>
        /// <remarks>
        /// &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot; - &#x60;sub_organization_groups&#x60;   - \&quot;create\&quot;   - \&quot;edit_delete\&quot; - &#x60;create_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;manage_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;analytics&#x60;   - \&quot;download_data\&quot;   - \&quot;create_alerts\&quot;   - \&quot;my_looks\&quot;   - \&quot;explore_create\&quot; - &#x60;security&#x60;   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>ApiResponse of InviteAdminUser</returns>
        ApiResponse<InviteAdminUser> InviteAdminUserWithHttpInfo (InviteAdminUser sendInvitation);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateGroupIdDeleteAsync (string id);

        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateGroupIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// GET a group details
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>Task of CorporateGroupDetailsResponse</returns>
        System.Threading.Tasks.Task<CorporateGroupDetailsResponse> CorporateGroupIdGetAsync (string id);

        /// <summary>
        /// GET a group details
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>Task of ApiResponse (CorporateGroupDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CorporateGroupDetailsResponse>> CorporateGroupIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update a group of sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update a group of sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateGroupIdPutAsync (string id, Body3 body);

        /// <summary>
        /// Update a group of sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update a group of sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateGroupIdPutAsyncWithHttpInfo (string id, Body3 body);
        /// <summary>
        /// Create a new group of sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to create a group of sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> CorporateGroupPostAsync (Body body);

        /// <summary>
        /// Create a new group of sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to create a group of sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CorporateGroupPostAsyncWithHttpInfo (Body body);
        /// <summary>
        /// Delete sub-account from group
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to remove a sub-organization from a group.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateGroupUnlinkGroupIdSubAccountsPutAsync (string groupId, Body4 body);

        /// <summary>
        /// Delete sub-account from group
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to remove a sub-organization from a group.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateGroupUnlinkGroupIdSubAccountsPutAsyncWithHttpInfo (string groupId, Body4 body);
        /// <summary>
        /// List of all IPs
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to retrieve the list of active IPs on your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateIpGetAsync ();

        /// <summary>
        /// List of all IPs
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to retrieve the list of active IPs on your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateIpGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get the details of requested master account
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details of the master account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MasterDetailsResponse</returns>
        System.Threading.Tasks.Task<MasterDetailsResponse> CorporateMasterAccountGetAsync ();

        /// <summary>
        /// Get the details of requested master account
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details of the master account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MasterDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MasterDetailsResponse>> CorporateMasterAccountGetAsyncWithHttpInfo ();
        /// <summary>
        /// Generate SSO token to access admin account
        /// </summary>
        /// <remarks>
        /// This endpoint generates an SSO token to authenticate and access the admin account using the endpoint https://account-app.brevo.com/account/login/corporate/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequestCorporate">User email of admin account</param>
        /// <returns>Task of GetSsoToken</returns>
        System.Threading.Tasks.Task<GetSsoToken> CorporateSsoTokenPostAsync (SsoTokenRequestCorporate ssoTokenRequestCorporate);

        /// <summary>
        /// Generate SSO token to access admin account
        /// </summary>
        /// <remarks>
        /// This endpoint generates an SSO token to authenticate and access the admin account using the endpoint https://account-app.brevo.com/account/login/corporate/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequestCorporate">User email of admin account</param>
        /// <returns>Task of ApiResponse (GetSsoToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSsoToken>> CorporateSsoTokenPostAsyncWithHttpInfo (SsoTokenRequestCorporate ssoTokenRequestCorporate);
        /// <summary>
        /// Get the list of all the sub-accounts of the master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list all the sub-accounts of the master account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>Task of SubAccountsResponse</returns>
        System.Threading.Tasks.Task<SubAccountsResponse> CorporateSubAccountGetAsync (int? offset, int? limit);

        /// <summary>
        /// Get the list of all the sub-accounts of the master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list all the sub-accounts of the master account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>Task of ApiResponse (SubAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubAccountsResponse>> CorporateSubAccountGetAsyncWithHttpInfo (int? offset, int? limit);
        /// <summary>
        /// Enable/disable sub-account application(s)
        /// </summary>
        /// <remarks>
        /// API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateSubAccountIdApplicationsTogglePutAsync (long? id, SubAccountAppsToggleRequest toggleApplications);

        /// <summary>
        /// Enable/disable sub-account application(s)
        /// </summary>
        /// <remarks>
        /// API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdApplicationsTogglePutAsyncWithHttpInfo (long? id, SubAccountAppsToggleRequest toggleApplications);
        /// <summary>
        /// Delete a sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateSubAccountIdDeleteAsync (long? id);

        /// <summary>
        /// Delete a sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdDeleteAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get sub-account details
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details for the specified sub-account company
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>Task of SubAccountDetailsResponse</returns>
        System.Threading.Tasks.Task<SubAccountDetailsResponse> CorporateSubAccountIdGetAsync (long? id);

        /// <summary>
        /// Get sub-account details
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the details for the specified sub-account company
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>Task of ApiResponse (SubAccountDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubAccountDetailsResponse>> CorporateSubAccountIdGetAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Update sub-account plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update the sub-account plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateSubAccountIdPlanPutAsync (long? id, SubAccountUpdatePlanRequest updatePlanDetails);

        /// <summary>
        /// Update sub-account plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update the sub-account plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdPlanPutAsyncWithHttpInfo (long? id, SubAccountUpdatePlanRequest updatePlanDetails);
        /// <summary>
        /// Associate an IP to sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to associate an IP to sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address association details</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CorporateSubAccountIpAssociatePostAsync (Body1 body);

        /// <summary>
        /// Associate an IP to sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to associate an IP to sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address association details</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIpAssociatePostAsyncWithHttpInfo (Body1 body);
        /// <summary>
        /// Dissociate an IP from sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to dissociate an IP from sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address dissociation details</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateSubAccountIpDissociatePutAsync (Body2 body);

        /// <summary>
        /// Dissociate an IP from sub-accounts
        /// </summary>
        /// <remarks>
        /// This endpoint allows to dissociate an IP from sub-accounts
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address dissociation details</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIpDissociatePutAsyncWithHttpInfo (Body2 body);
        /// <summary>
        /// Create an API key for a sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an API v3 key for a sub account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>Task of CreateApiKeyResponse</returns>
        System.Threading.Tasks.Task<CreateApiKeyResponse> CorporateSubAccountKeyPostAsync (CreateApiKeyRequest createApiKeyRequest);

        /// <summary>
        /// Create an API key for a sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an API v3 key for a sub account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>Task of ApiResponse (CreateApiKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateApiKeyResponse>> CorporateSubAccountKeyPostAsyncWithHttpInfo (CreateApiKeyRequest createApiKeyRequest);
        /// <summary>
        /// Create a new sub-account under a master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will create a new sub-account under a master account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>Task of CreateSubAccountResponse</returns>
        System.Threading.Tasks.Task<CreateSubAccountResponse> CorporateSubAccountPostAsync (CreateSubAccount subAccountCreate);

        /// <summary>
        /// Create a new sub-account under a master account.
        /// </summary>
        /// <remarks>
        /// This endpoint will create a new sub-account under a master account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>Task of ApiResponse (CreateSubAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubAccountResponse>> CorporateSubAccountPostAsyncWithHttpInfo (CreateSubAccount subAccountCreate);
        /// <summary>
        /// Generate SSO token to access sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>Task of GetSsoToken</returns>
        System.Threading.Tasks.Task<GetSsoToken> CorporateSubAccountSsoTokenPostAsync (SsoTokenRequest ssoTokenRequest);

        /// <summary>
        /// Generate SSO token to access sub-account
        /// </summary>
        /// <remarks>
        /// This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>Task of ApiResponse (GetSsoToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSsoToken>> CorporateSubAccountSsoTokenPostAsyncWithHttpInfo (SsoTokenRequest ssoTokenRequest);
        /// <summary>
        /// Update sub-accounts plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update multiple sub-accounts plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlanDetails">Values to update sub-accounts plan</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateSubAccountsPlanPutAsync (SubAccountsUpdatePlanRequest updatePlanDetails);

        /// <summary>
        /// Update sub-accounts plan
        /// </summary>
        /// <remarks>
        /// This endpoint will update multiple sub-accounts plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlanDetails">Values to update sub-accounts plan</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountsPlanPutAsyncWithHttpInfo (SubAccountsUpdatePlanRequest updatePlanDetails);
        /// <summary>
        /// Change admin user permissions
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to change the permissions of Admin users of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of Admin user</param>
        /// <param name="body">Values to update an admin user permissions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateUserEmailPermissionsPutAsync (string email, Body5 body);

        /// <summary>
        /// Change admin user permissions
        /// </summary>
        /// <remarks>
        /// This endpoint will allow you to change the permissions of Admin users of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of Admin user</param>
        /// <param name="body">Values to update an admin user permissions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateUserEmailPermissionsPutAsyncWithHttpInfo (string email, Body5 body);
        /// <summary>
        /// Resend / cancel admin user invitation
        /// </summary>
        /// <remarks>
        /// This endpoint will allow the user to: - Resend an admin user invitation - Cancel an admin user invitation 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> CorporateUserInvitationActionEmailPutAsync (string action, string email);

        /// <summary>
        /// Resend / cancel admin user invitation
        /// </summary>
        /// <remarks>
        /// This endpoint will allow the user to: - Resend an admin user invitation - Cancel an admin user invitation 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> CorporateUserInvitationActionEmailPutAsyncWithHttpInfo (string action, string email);
        /// <summary>
        /// Revoke an admin user
        /// </summary>
        /// <remarks>
        /// This endpoint allows to revoke/remove an invited member of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CorporateUserRevokeEmailDeleteAsync (string email);

        /// <summary>
        /// Revoke an admin user
        /// </summary>
        /// <remarks>
        /// This endpoint allows to revoke/remove an invited member of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CorporateUserRevokeEmailDeleteAsyncWithHttpInfo (string email);
        /// <summary>
        /// Get user activity logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="email">Enter the user&#39;s email address to filter their activity in the account. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>Task of GetAccountActivity</returns>
        System.Threading.Tasks.Task<GetAccountActivity> GetAccountActivityAsync (string startDate = null, string endDate = null, string email = null, long? limit = null, long? offset = null);

        /// <summary>
        /// Get user activity logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="email">Enter the user&#39;s email address to filter their activity in the account. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAccountActivity)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAccountActivity>> GetAccountActivityAsyncWithHttpInfo (string startDate = null, string endDate = null, string email = null, long? limit = null, long? offset = null);
        /// <summary>
        /// Get the list of all admin users
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to list all Admin users of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCorporateInvitedUsersList</returns>
        System.Threading.Tasks.Task<GetCorporateInvitedUsersList> GetCorporateInvitedUsersListAsync ();

        /// <summary>
        /// Get the list of all admin users
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to list all Admin users of your Admin account
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCorporateInvitedUsersList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCorporateInvitedUsersList>> GetCorporateInvitedUsersListAsyncWithHttpInfo ();
        /// <summary>
        /// Check admin user permissions
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list of admin user permissions
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>Task of GetCorporateUserPermission</returns>
        System.Threading.Tasks.Task<GetCorporateUserPermission> GetCorporateUserPermissionAsync (string email);

        /// <summary>
        /// Check admin user permissions
        /// </summary>
        /// <remarks>
        /// This endpoint will provide the list of admin user permissions
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>Task of ApiResponse (GetCorporateUserPermission)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCorporateUserPermission>> GetCorporateUserPermissionAsyncWithHttpInfo (string email);
        /// <summary>
        /// Get the list of groups
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to list all groups created on your Admin account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse2001&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2001>> GetSubAccountGroupsAsync ();

        /// <summary>
        /// Get the list of groups
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to list all groups created on your Admin account.
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2001&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2001>>> GetSubAccountGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// Send invitation to an admin user
        /// </summary>
        /// <remarks>
        /// &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot; - &#x60;sub_organization_groups&#x60;   - \&quot;create\&quot;   - \&quot;edit_delete\&quot; - &#x60;create_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;manage_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;analytics&#x60;   - \&quot;download_data\&quot;   - \&quot;create_alerts\&quot;   - \&quot;my_looks\&quot;   - \&quot;explore_create\&quot; - &#x60;security&#x60;   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>Task of InviteAdminUser</returns>
        System.Threading.Tasks.Task<InviteAdminUser> InviteAdminUserAsync (InviteAdminUser sendInvitation);

        /// <summary>
        /// Send invitation to an admin user
        /// </summary>
        /// <remarks>
        /// &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot; - &#x60;sub_organization_groups&#x60;   - \&quot;create\&quot;   - \&quot;edit_delete\&quot; - &#x60;create_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;manage_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;analytics&#x60;   - \&quot;download_data\&quot;   - \&quot;create_alerts\&quot;   - \&quot;my_looks\&quot;   - \&quot;explore_create\&quot; - &#x60;security&#x60;   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </remarks>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>Task of ApiResponse (InviteAdminUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<InviteAdminUser>> InviteAdminUserAsyncWithHttpInfo (InviteAdminUser sendInvitation);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MasterAccountApi : IMasterAccountApi
    {
        private brevo_csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MasterAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MasterAccountApi(String basePath)
        {
            this.Configuration = new brevo_csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MasterAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MasterAccountApi(brevo_csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = brevo_csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public brevo_csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public brevo_csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a group This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns></returns>
        public void CorporateGroupIdDelete (string id)
        {
             CorporateGroupIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a group This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateGroupIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdDelete");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a group This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateGroupIdDeleteAsync (string id)
        {
             await CorporateGroupIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a group This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateGroupIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdDelete");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// GET a group details This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>CorporateGroupDetailsResponse</returns>
        public CorporateGroupDetailsResponse CorporateGroupIdGet (string id)
        {
             ApiResponse<CorporateGroupDetailsResponse> localVarResponse = CorporateGroupIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GET a group details This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>ApiResponse of CorporateGroupDetailsResponse</returns>
        public ApiResponse< CorporateGroupDetailsResponse > CorporateGroupIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdGet");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CorporateGroupDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CorporateGroupDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CorporateGroupDetailsResponse)));
        }

        /// <summary>
        /// GET a group details This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>Task of CorporateGroupDetailsResponse</returns>
        public async System.Threading.Tasks.Task<CorporateGroupDetailsResponse> CorporateGroupIdGetAsync (string id)
        {
             ApiResponse<CorporateGroupDetailsResponse> localVarResponse = await CorporateGroupIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GET a group details This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>Task of ApiResponse (CorporateGroupDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CorporateGroupDetailsResponse>> CorporateGroupIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdGet");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CorporateGroupDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CorporateGroupDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CorporateGroupDetailsResponse)));
        }

        /// <summary>
        /// Update a group of sub-accounts This endpoint allows you to update a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns></returns>
        public void CorporateGroupIdPut (string id, Body3 body)
        {
             CorporateGroupIdPutWithHttpInfo(id, body);
        }

        /// <summary>
        /// Update a group of sub-accounts This endpoint allows you to update a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateGroupIdPutWithHttpInfo (string id, Body3 body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupIdPut");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a group of sub-accounts This endpoint allows you to update a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateGroupIdPutAsync (string id, Body3 body)
        {
             await CorporateGroupIdPutAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Update a group of sub-accounts This endpoint allows you to update a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateGroupIdPutAsyncWithHttpInfo (string id, Body3 body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupIdPut");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new group of sub-accounts This endpoint allows to create a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 CorporateGroupPost (Body body)
        {
             ApiResponse<InlineResponse201> localVarResponse = CorporateGroupPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new group of sub-accounts This endpoint allows to create a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse< InlineResponse201 > CorporateGroupPostWithHttpInfo (Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupPost");

            var localVarPath = "./corporate/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Create a new group of sub-accounts This endpoint allows to create a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> CorporateGroupPostAsync (Body body)
        {
             ApiResponse<InlineResponse201> localVarResponse = await CorporateGroupPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new group of sub-accounts This endpoint allows to create a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CorporateGroupPostAsyncWithHttpInfo (Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupPost");

            var localVarPath = "./corporate/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Delete sub-account from group This endpoint allows you to remove a sub-organization from a group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns></returns>
        public void CorporateGroupUnlinkGroupIdSubAccountsPut (string groupId, Body4 body)
        {
             CorporateGroupUnlinkGroupIdSubAccountsPutWithHttpInfo(groupId, body);
        }

        /// <summary>
        /// Delete sub-account from group This endpoint allows you to remove a sub-organization from a group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateGroupUnlinkGroupIdSubAccountsPutWithHttpInfo (string groupId, Body4 body)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling MasterAccountApi->CorporateGroupUnlinkGroupIdSubAccountsPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupUnlinkGroupIdSubAccountsPut");

            var localVarPath = "./corporate/group/unlink/{groupId}/subAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupUnlinkGroupIdSubAccountsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete sub-account from group This endpoint allows you to remove a sub-organization from a group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateGroupUnlinkGroupIdSubAccountsPutAsync (string groupId, Body4 body)
        {
             await CorporateGroupUnlinkGroupIdSubAccountsPutAsyncWithHttpInfo(groupId, body);

        }

        /// <summary>
        /// Delete sub-account from group This endpoint allows you to remove a sub-organization from a group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateGroupUnlinkGroupIdSubAccountsPutAsyncWithHttpInfo (string groupId, Body4 body)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling MasterAccountApi->CorporateGroupUnlinkGroupIdSubAccountsPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupUnlinkGroupIdSubAccountsPut");

            var localVarPath = "./corporate/group/unlink/{groupId}/subAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupUnlinkGroupIdSubAccountsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of all IPs This endpoint allows you to retrieve the list of active IPs on your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void CorporateIpGet ()
        {
             CorporateIpGetWithHttpInfo();
        }

        /// <summary>
        /// List of all IPs This endpoint allows you to retrieve the list of active IPs on your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateIpGetWithHttpInfo ()
        {

            var localVarPath = "./corporate/ip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateIpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List of all IPs This endpoint allows you to retrieve the list of active IPs on your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateIpGetAsync ()
        {
             await CorporateIpGetAsyncWithHttpInfo();

        }

        /// <summary>
        /// List of all IPs This endpoint allows you to retrieve the list of active IPs on your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateIpGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./corporate/ip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateIpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MasterDetailsResponse</returns>
        public MasterDetailsResponse CorporateMasterAccountGet ()
        {
             ApiResponse<MasterDetailsResponse> localVarResponse = CorporateMasterAccountGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MasterDetailsResponse</returns>
        public ApiResponse< MasterDetailsResponse > CorporateMasterAccountGetWithHttpInfo ()
        {

            var localVarPath = "./corporate/masterAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateMasterAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasterDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MasterDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasterDetailsResponse)));
        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MasterDetailsResponse</returns>
        public async System.Threading.Tasks.Task<MasterDetailsResponse> CorporateMasterAccountGetAsync ()
        {
             ApiResponse<MasterDetailsResponse> localVarResponse = await CorporateMasterAccountGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MasterDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MasterDetailsResponse>> CorporateMasterAccountGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./corporate/masterAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateMasterAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasterDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MasterDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasterDetailsResponse)));
        }

        /// <summary>
        /// Generate SSO token to access admin account This endpoint generates an SSO token to authenticate and access the admin account using the endpoint https://account-app.brevo.com/account/login/corporate/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequestCorporate">User email of admin account</param>
        /// <returns>GetSsoToken</returns>
        public GetSsoToken CorporateSsoTokenPost (SsoTokenRequestCorporate ssoTokenRequestCorporate)
        {
             ApiResponse<GetSsoToken> localVarResponse = CorporateSsoTokenPostWithHttpInfo(ssoTokenRequestCorporate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate SSO token to access admin account This endpoint generates an SSO token to authenticate and access the admin account using the endpoint https://account-app.brevo.com/account/login/corporate/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequestCorporate">User email of admin account</param>
        /// <returns>ApiResponse of GetSsoToken</returns>
        public ApiResponse< GetSsoToken > CorporateSsoTokenPostWithHttpInfo (SsoTokenRequestCorporate ssoTokenRequestCorporate)
        {
            // verify the required parameter 'ssoTokenRequestCorporate' is set
            if (ssoTokenRequestCorporate == null)
                throw new ApiException(400, "Missing required parameter 'ssoTokenRequestCorporate' when calling MasterAccountApi->CorporateSsoTokenPost");

            var localVarPath = "./corporate/ssoToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssoTokenRequestCorporate != null && ssoTokenRequestCorporate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssoTokenRequestCorporate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssoTokenRequestCorporate; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSsoTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSsoToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSsoToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSsoToken)));
        }

        /// <summary>
        /// Generate SSO token to access admin account This endpoint generates an SSO token to authenticate and access the admin account using the endpoint https://account-app.brevo.com/account/login/corporate/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequestCorporate">User email of admin account</param>
        /// <returns>Task of GetSsoToken</returns>
        public async System.Threading.Tasks.Task<GetSsoToken> CorporateSsoTokenPostAsync (SsoTokenRequestCorporate ssoTokenRequestCorporate)
        {
             ApiResponse<GetSsoToken> localVarResponse = await CorporateSsoTokenPostAsyncWithHttpInfo(ssoTokenRequestCorporate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate SSO token to access admin account This endpoint generates an SSO token to authenticate and access the admin account using the endpoint https://account-app.brevo.com/account/login/corporate/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequestCorporate">User email of admin account</param>
        /// <returns>Task of ApiResponse (GetSsoToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSsoToken>> CorporateSsoTokenPostAsyncWithHttpInfo (SsoTokenRequestCorporate ssoTokenRequestCorporate)
        {
            // verify the required parameter 'ssoTokenRequestCorporate' is set
            if (ssoTokenRequestCorporate == null)
                throw new ApiException(400, "Missing required parameter 'ssoTokenRequestCorporate' when calling MasterAccountApi->CorporateSsoTokenPost");

            var localVarPath = "./corporate/ssoToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssoTokenRequestCorporate != null && ssoTokenRequestCorporate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssoTokenRequestCorporate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssoTokenRequestCorporate; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSsoTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSsoToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSsoToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSsoToken)));
        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>SubAccountsResponse</returns>
        public SubAccountsResponse CorporateSubAccountGet (int? offset, int? limit)
        {
             ApiResponse<SubAccountsResponse> localVarResponse = CorporateSubAccountGetWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>ApiResponse of SubAccountsResponse</returns>
        public ApiResponse< SubAccountsResponse > CorporateSubAccountGetWithHttpInfo (int? offset, int? limit)
        {
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MasterAccountApi->CorporateSubAccountGet");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling MasterAccountApi->CorporateSubAccountGet");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountsResponse)));
        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>Task of SubAccountsResponse</returns>
        public async System.Threading.Tasks.Task<SubAccountsResponse> CorporateSubAccountGetAsync (int? offset, int? limit)
        {
             ApiResponse<SubAccountsResponse> localVarResponse = await CorporateSubAccountGetAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>Task of ApiResponse (SubAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubAccountsResponse>> CorporateSubAccountGetAsyncWithHttpInfo (int? offset, int? limit)
        {
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MasterAccountApi->CorporateSubAccountGet");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling MasterAccountApi->CorporateSubAccountGet");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountsResponse)));
        }

        /// <summary>
        /// Enable/disable sub-account application(s) API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns></returns>
        public void CorporateSubAccountIdApplicationsTogglePut (long? id, SubAccountAppsToggleRequest toggleApplications)
        {
             CorporateSubAccountIdApplicationsTogglePutWithHttpInfo(id, toggleApplications);
        }

        /// <summary>
        /// Enable/disable sub-account application(s) API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateSubAccountIdApplicationsTogglePutWithHttpInfo (long? id, SubAccountAppsToggleRequest toggleApplications)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdApplicationsTogglePut");
            // verify the required parameter 'toggleApplications' is set
            if (toggleApplications == null)
                throw new ApiException(400, "Missing required parameter 'toggleApplications' when calling MasterAccountApi->CorporateSubAccountIdApplicationsTogglePut");

            var localVarPath = "./corporate/subAccount/{id}/applications/toggle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toggleApplications != null && toggleApplications.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toggleApplications); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toggleApplications; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdApplicationsTogglePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enable/disable sub-account application(s) API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateSubAccountIdApplicationsTogglePutAsync (long? id, SubAccountAppsToggleRequest toggleApplications)
        {
             await CorporateSubAccountIdApplicationsTogglePutAsyncWithHttpInfo(id, toggleApplications);

        }

        /// <summary>
        /// Enable/disable sub-account application(s) API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdApplicationsTogglePutAsyncWithHttpInfo (long? id, SubAccountAppsToggleRequest toggleApplications)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdApplicationsTogglePut");
            // verify the required parameter 'toggleApplications' is set
            if (toggleApplications == null)
                throw new ApiException(400, "Missing required parameter 'toggleApplications' when calling MasterAccountApi->CorporateSubAccountIdApplicationsTogglePut");

            var localVarPath = "./corporate/subAccount/{id}/applications/toggle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toggleApplications != null && toggleApplications.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toggleApplications); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toggleApplications; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdApplicationsTogglePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns></returns>
        public void CorporateSubAccountIdDelete (long? id)
        {
             CorporateSubAccountIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateSubAccountIdDeleteWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdDelete");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateSubAccountIdDeleteAsync (long? id)
        {
             await CorporateSubAccountIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdDeleteAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdDelete");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>SubAccountDetailsResponse</returns>
        public SubAccountDetailsResponse CorporateSubAccountIdGet (long? id)
        {
             ApiResponse<SubAccountDetailsResponse> localVarResponse = CorporateSubAccountIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>ApiResponse of SubAccountDetailsResponse</returns>
        public ApiResponse< SubAccountDetailsResponse > CorporateSubAccountIdGetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdGet");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountDetailsResponse)));
        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>Task of SubAccountDetailsResponse</returns>
        public async System.Threading.Tasks.Task<SubAccountDetailsResponse> CorporateSubAccountIdGetAsync (long? id)
        {
             ApiResponse<SubAccountDetailsResponse> localVarResponse = await CorporateSubAccountIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>Task of ApiResponse (SubAccountDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubAccountDetailsResponse>> CorporateSubAccountIdGetAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdGet");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountDetailsResponse)));
        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns></returns>
        public void CorporateSubAccountIdPlanPut (long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
             CorporateSubAccountIdPlanPutWithHttpInfo(id, updatePlanDetails);
        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateSubAccountIdPlanPutWithHttpInfo (long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");
            // verify the required parameter 'updatePlanDetails' is set
            if (updatePlanDetails == null)
                throw new ApiException(400, "Missing required parameter 'updatePlanDetails' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");

            var localVarPath = "./corporate/subAccount/{id}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updatePlanDetails != null && updatePlanDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePlanDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlanDetails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdPlanPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateSubAccountIdPlanPutAsync (long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
             await CorporateSubAccountIdPlanPutAsyncWithHttpInfo(id, updatePlanDetails);

        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdPlanPutAsyncWithHttpInfo (long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");
            // verify the required parameter 'updatePlanDetails' is set
            if (updatePlanDetails == null)
                throw new ApiException(400, "Missing required parameter 'updatePlanDetails' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");

            var localVarPath = "./corporate/subAccount/{id}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updatePlanDetails != null && updatePlanDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePlanDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlanDetails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdPlanPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Associate an IP to sub-accounts This endpoint allows to associate an IP to sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address association details</param>
        /// <returns>Object</returns>
        public Object CorporateSubAccountIpAssociatePost (Body1 body)
        {
             ApiResponse<Object> localVarResponse = CorporateSubAccountIpAssociatePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Associate an IP to sub-accounts This endpoint allows to associate an IP to sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address association details</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CorporateSubAccountIpAssociatePostWithHttpInfo (Body1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateSubAccountIpAssociatePost");

            var localVarPath = "./corporate/subAccount/ip/associate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIpAssociatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Associate an IP to sub-accounts This endpoint allows to associate an IP to sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address association details</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CorporateSubAccountIpAssociatePostAsync (Body1 body)
        {
             ApiResponse<Object> localVarResponse = await CorporateSubAccountIpAssociatePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Associate an IP to sub-accounts This endpoint allows to associate an IP to sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address association details</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIpAssociatePostAsyncWithHttpInfo (Body1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateSubAccountIpAssociatePost");

            var localVarPath = "./corporate/subAccount/ip/associate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIpAssociatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Dissociate an IP from sub-accounts This endpoint allows to dissociate an IP from sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address dissociation details</param>
        /// <returns></returns>
        public void CorporateSubAccountIpDissociatePut (Body2 body)
        {
             CorporateSubAccountIpDissociatePutWithHttpInfo(body);
        }

        /// <summary>
        /// Dissociate an IP from sub-accounts This endpoint allows to dissociate an IP from sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address dissociation details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateSubAccountIpDissociatePutWithHttpInfo (Body2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateSubAccountIpDissociatePut");

            var localVarPath = "./corporate/subAccount/ip/dissociate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIpDissociatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Dissociate an IP from sub-accounts This endpoint allows to dissociate an IP from sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address dissociation details</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateSubAccountIpDissociatePutAsync (Body2 body)
        {
             await CorporateSubAccountIpDissociatePutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Dissociate an IP from sub-accounts This endpoint allows to dissociate an IP from sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Ip address dissociation details</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIpDissociatePutAsyncWithHttpInfo (Body2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateSubAccountIpDissociatePut");

            var localVarPath = "./corporate/subAccount/ip/dissociate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIpDissociatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>CreateApiKeyResponse</returns>
        public CreateApiKeyResponse CorporateSubAccountKeyPost (CreateApiKeyRequest createApiKeyRequest)
        {
             ApiResponse<CreateApiKeyResponse> localVarResponse = CorporateSubAccountKeyPostWithHttpInfo(createApiKeyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>ApiResponse of CreateApiKeyResponse</returns>
        public ApiResponse< CreateApiKeyResponse > CorporateSubAccountKeyPostWithHttpInfo (CreateApiKeyRequest createApiKeyRequest)
        {
            // verify the required parameter 'createApiKeyRequest' is set
            if (createApiKeyRequest == null)
                throw new ApiException(400, "Missing required parameter 'createApiKeyRequest' when calling MasterAccountApi->CorporateSubAccountKeyPost");

            var localVarPath = "./corporate/subAccount/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createApiKeyRequest != null && createApiKeyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createApiKeyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createApiKeyRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountKeyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateApiKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateApiKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateApiKeyResponse)));
        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>Task of CreateApiKeyResponse</returns>
        public async System.Threading.Tasks.Task<CreateApiKeyResponse> CorporateSubAccountKeyPostAsync (CreateApiKeyRequest createApiKeyRequest)
        {
             ApiResponse<CreateApiKeyResponse> localVarResponse = await CorporateSubAccountKeyPostAsyncWithHttpInfo(createApiKeyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>Task of ApiResponse (CreateApiKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateApiKeyResponse>> CorporateSubAccountKeyPostAsyncWithHttpInfo (CreateApiKeyRequest createApiKeyRequest)
        {
            // verify the required parameter 'createApiKeyRequest' is set
            if (createApiKeyRequest == null)
                throw new ApiException(400, "Missing required parameter 'createApiKeyRequest' when calling MasterAccountApi->CorporateSubAccountKeyPost");

            var localVarPath = "./corporate/subAccount/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createApiKeyRequest != null && createApiKeyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createApiKeyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createApiKeyRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountKeyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateApiKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateApiKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateApiKeyResponse)));
        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>CreateSubAccountResponse</returns>
        public CreateSubAccountResponse CorporateSubAccountPost (CreateSubAccount subAccountCreate)
        {
             ApiResponse<CreateSubAccountResponse> localVarResponse = CorporateSubAccountPostWithHttpInfo(subAccountCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>ApiResponse of CreateSubAccountResponse</returns>
        public ApiResponse< CreateSubAccountResponse > CorporateSubAccountPostWithHttpInfo (CreateSubAccount subAccountCreate)
        {
            // verify the required parameter 'subAccountCreate' is set
            if (subAccountCreate == null)
                throw new ApiException(400, "Missing required parameter 'subAccountCreate' when calling MasterAccountApi->CorporateSubAccountPost");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subAccountCreate != null && subAccountCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subAccountCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subAccountCreate; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateSubAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubAccountResponse)));
        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>Task of CreateSubAccountResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubAccountResponse> CorporateSubAccountPostAsync (CreateSubAccount subAccountCreate)
        {
             ApiResponse<CreateSubAccountResponse> localVarResponse = await CorporateSubAccountPostAsyncWithHttpInfo(subAccountCreate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>Task of ApiResponse (CreateSubAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSubAccountResponse>> CorporateSubAccountPostAsyncWithHttpInfo (CreateSubAccount subAccountCreate)
        {
            // verify the required parameter 'subAccountCreate' is set
            if (subAccountCreate == null)
                throw new ApiException(400, "Missing required parameter 'subAccountCreate' when calling MasterAccountApi->CorporateSubAccountPost");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subAccountCreate != null && subAccountCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subAccountCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subAccountCreate; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateSubAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubAccountResponse)));
        }

        /// <summary>
        /// Generate SSO token to access sub-account This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>GetSsoToken</returns>
        public GetSsoToken CorporateSubAccountSsoTokenPost (SsoTokenRequest ssoTokenRequest)
        {
             ApiResponse<GetSsoToken> localVarResponse = CorporateSubAccountSsoTokenPostWithHttpInfo(ssoTokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate SSO token to access sub-account This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>ApiResponse of GetSsoToken</returns>
        public ApiResponse< GetSsoToken > CorporateSubAccountSsoTokenPostWithHttpInfo (SsoTokenRequest ssoTokenRequest)
        {
            // verify the required parameter 'ssoTokenRequest' is set
            if (ssoTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'ssoTokenRequest' when calling MasterAccountApi->CorporateSubAccountSsoTokenPost");

            var localVarPath = "./corporate/subAccount/ssoToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssoTokenRequest != null && ssoTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssoTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssoTokenRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountSsoTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSsoToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSsoToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSsoToken)));
        }

        /// <summary>
        /// Generate SSO token to access sub-account This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>Task of GetSsoToken</returns>
        public async System.Threading.Tasks.Task<GetSsoToken> CorporateSubAccountSsoTokenPostAsync (SsoTokenRequest ssoTokenRequest)
        {
             ApiResponse<GetSsoToken> localVarResponse = await CorporateSubAccountSsoTokenPostAsyncWithHttpInfo(ssoTokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate SSO token to access sub-account This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>Task of ApiResponse (GetSsoToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSsoToken>> CorporateSubAccountSsoTokenPostAsyncWithHttpInfo (SsoTokenRequest ssoTokenRequest)
        {
            // verify the required parameter 'ssoTokenRequest' is set
            if (ssoTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'ssoTokenRequest' when calling MasterAccountApi->CorporateSubAccountSsoTokenPost");

            var localVarPath = "./corporate/subAccount/ssoToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssoTokenRequest != null && ssoTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssoTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssoTokenRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountSsoTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSsoToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSsoToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSsoToken)));
        }

        /// <summary>
        /// Update sub-accounts plan This endpoint will update multiple sub-accounts plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlanDetails">Values to update sub-accounts plan</param>
        /// <returns></returns>
        public void CorporateSubAccountsPlanPut (SubAccountsUpdatePlanRequest updatePlanDetails)
        {
             CorporateSubAccountsPlanPutWithHttpInfo(updatePlanDetails);
        }

        /// <summary>
        /// Update sub-accounts plan This endpoint will update multiple sub-accounts plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlanDetails">Values to update sub-accounts plan</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateSubAccountsPlanPutWithHttpInfo (SubAccountsUpdatePlanRequest updatePlanDetails)
        {
            // verify the required parameter 'updatePlanDetails' is set
            if (updatePlanDetails == null)
                throw new ApiException(400, "Missing required parameter 'updatePlanDetails' when calling MasterAccountApi->CorporateSubAccountsPlanPut");

            var localVarPath = "./corporate/subAccounts/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updatePlanDetails != null && updatePlanDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePlanDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlanDetails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountsPlanPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update sub-accounts plan This endpoint will update multiple sub-accounts plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlanDetails">Values to update sub-accounts plan</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateSubAccountsPlanPutAsync (SubAccountsUpdatePlanRequest updatePlanDetails)
        {
             await CorporateSubAccountsPlanPutAsyncWithHttpInfo(updatePlanDetails);

        }

        /// <summary>
        /// Update sub-accounts plan This endpoint will update multiple sub-accounts plan. On the Corporate solution new version v2, you can set an unlimited number of credits in your sub-organization. Please pass the value “-1\&quot; to set the consumable in unlimited mode.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlanDetails">Values to update sub-accounts plan</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountsPlanPutAsyncWithHttpInfo (SubAccountsUpdatePlanRequest updatePlanDetails)
        {
            // verify the required parameter 'updatePlanDetails' is set
            if (updatePlanDetails == null)
                throw new ApiException(400, "Missing required parameter 'updatePlanDetails' when calling MasterAccountApi->CorporateSubAccountsPlanPut");

            var localVarPath = "./corporate/subAccounts/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updatePlanDetails != null && updatePlanDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePlanDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlanDetails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountsPlanPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change admin user permissions This endpoint will allow you to change the permissions of Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of Admin user</param>
        /// <param name="body">Values to update an admin user permissions</param>
        /// <returns></returns>
        public void CorporateUserEmailPermissionsPut (string email, Body5 body)
        {
             CorporateUserEmailPermissionsPutWithHttpInfo(email, body);
        }

        /// <summary>
        /// Change admin user permissions This endpoint will allow you to change the permissions of Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of Admin user</param>
        /// <param name="body">Values to update an admin user permissions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateUserEmailPermissionsPutWithHttpInfo (string email, Body5 body)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->CorporateUserEmailPermissionsPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateUserEmailPermissionsPut");

            var localVarPath = "./corporate/user/{email}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateUserEmailPermissionsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change admin user permissions This endpoint will allow you to change the permissions of Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of Admin user</param>
        /// <param name="body">Values to update an admin user permissions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateUserEmailPermissionsPutAsync (string email, Body5 body)
        {
             await CorporateUserEmailPermissionsPutAsyncWithHttpInfo(email, body);

        }

        /// <summary>
        /// Change admin user permissions This endpoint will allow you to change the permissions of Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of Admin user</param>
        /// <param name="body">Values to update an admin user permissions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateUserEmailPermissionsPutAsyncWithHttpInfo (string email, Body5 body)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->CorporateUserEmailPermissionsPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateUserEmailPermissionsPut");

            var localVarPath = "./corporate/user/{email}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateUserEmailPermissionsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Resend / cancel admin user invitation This endpoint will allow the user to: - Resend an admin user invitation - Cancel an admin user invitation 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 CorporateUserInvitationActionEmailPut (string action, string email)
        {
             ApiResponse<InlineResponse200> localVarResponse = CorporateUserInvitationActionEmailPutWithHttpInfo(action, email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resend / cancel admin user invitation This endpoint will allow the user to: - Resend an admin user invitation - Cancel an admin user invitation 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > CorporateUserInvitationActionEmailPutWithHttpInfo (string action, string email)
        {
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling MasterAccountApi->CorporateUserInvitationActionEmailPut");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->CorporateUserInvitationActionEmailPut");

            var localVarPath = "./corporate/user/invitation/{action}/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateUserInvitationActionEmailPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Resend / cancel admin user invitation This endpoint will allow the user to: - Resend an admin user invitation - Cancel an admin user invitation 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> CorporateUserInvitationActionEmailPutAsync (string action, string email)
        {
             ApiResponse<InlineResponse200> localVarResponse = await CorporateUserInvitationActionEmailPutAsyncWithHttpInfo(action, email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resend / cancel admin user invitation This endpoint will allow the user to: - Resend an admin user invitation - Cancel an admin user invitation 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> CorporateUserInvitationActionEmailPutAsyncWithHttpInfo (string action, string email)
        {
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling MasterAccountApi->CorporateUserInvitationActionEmailPut");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->CorporateUserInvitationActionEmailPut");

            var localVarPath = "./corporate/user/invitation/{action}/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateUserInvitationActionEmailPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Revoke an admin user This endpoint allows to revoke/remove an invited member of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns></returns>
        public void CorporateUserRevokeEmailDelete (string email)
        {
             CorporateUserRevokeEmailDeleteWithHttpInfo(email);
        }

        /// <summary>
        /// Revoke an admin user This endpoint allows to revoke/remove an invited member of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateUserRevokeEmailDeleteWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->CorporateUserRevokeEmailDelete");

            var localVarPath = "./corporate/user/revoke/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateUserRevokeEmailDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Revoke an admin user This endpoint allows to revoke/remove an invited member of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateUserRevokeEmailDeleteAsync (string email)
        {
             await CorporateUserRevokeEmailDeleteAsyncWithHttpInfo(email);

        }

        /// <summary>
        /// Revoke an admin user This endpoint allows to revoke/remove an invited member of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateUserRevokeEmailDeleteAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->CorporateUserRevokeEmailDelete");

            var localVarPath = "./corporate/user/revoke/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateUserRevokeEmailDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get user activity logs 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="email">Enter the user&#39;s email address to filter their activity in the account. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>GetAccountActivity</returns>
        public GetAccountActivity GetAccountActivity (string startDate = null, string endDate = null, string email = null, long? limit = null, long? offset = null)
        {
             ApiResponse<GetAccountActivity> localVarResponse = GetAccountActivityWithHttpInfo(startDate, endDate, email, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user activity logs 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="email">Enter the user&#39;s email address to filter their activity in the account. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAccountActivity</returns>
        public ApiResponse< GetAccountActivity > GetAccountActivityWithHttpInfo (string startDate = null, string endDate = null, string email = null, long? limit = null, long? offset = null)
        {

            var localVarPath = "./organization/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAccountActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetAccountActivity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAccountActivity)));
        }

        /// <summary>
        /// Get user activity logs 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="email">Enter the user&#39;s email address to filter their activity in the account. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>Task of GetAccountActivity</returns>
        public async System.Threading.Tasks.Task<GetAccountActivity> GetAccountActivityAsync (string startDate = null, string endDate = null, string email = null, long? limit = null, long? offset = null)
        {
             ApiResponse<GetAccountActivity> localVarResponse = await GetAccountActivityAsyncWithHttpInfo(startDate, endDate, email, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user activity logs 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="email">Enter the user&#39;s email address to filter their activity in the account. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAccountActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAccountActivity>> GetAccountActivityAsyncWithHttpInfo (string startDate = null, string endDate = null, string email = null, long? limit = null, long? offset = null)
        {

            var localVarPath = "./organization/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAccountActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetAccountActivity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAccountActivity)));
        }

        /// <summary>
        /// Get the list of all admin users This endpoint allows you to list all Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCorporateInvitedUsersList</returns>
        public GetCorporateInvitedUsersList GetCorporateInvitedUsersList ()
        {
             ApiResponse<GetCorporateInvitedUsersList> localVarResponse = GetCorporateInvitedUsersListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all admin users This endpoint allows you to list all Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCorporateInvitedUsersList</returns>
        public ApiResponse< GetCorporateInvitedUsersList > GetCorporateInvitedUsersListWithHttpInfo ()
        {

            var localVarPath = "./corporate/invited/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporateInvitedUsersList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporateInvitedUsersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporateInvitedUsersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporateInvitedUsersList)));
        }

        /// <summary>
        /// Get the list of all admin users This endpoint allows you to list all Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCorporateInvitedUsersList</returns>
        public async System.Threading.Tasks.Task<GetCorporateInvitedUsersList> GetCorporateInvitedUsersListAsync ()
        {
             ApiResponse<GetCorporateInvitedUsersList> localVarResponse = await GetCorporateInvitedUsersListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of all admin users This endpoint allows you to list all Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCorporateInvitedUsersList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporateInvitedUsersList>> GetCorporateInvitedUsersListAsyncWithHttpInfo ()
        {

            var localVarPath = "./corporate/invited/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporateInvitedUsersList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporateInvitedUsersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporateInvitedUsersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporateInvitedUsersList)));
        }

        /// <summary>
        /// Check admin user permissions This endpoint will provide the list of admin user permissions
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>GetCorporateUserPermission</returns>
        public GetCorporateUserPermission GetCorporateUserPermission (string email)
        {
             ApiResponse<GetCorporateUserPermission> localVarResponse = GetCorporateUserPermissionWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check admin user permissions This endpoint will provide the list of admin user permissions
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>ApiResponse of GetCorporateUserPermission</returns>
        public ApiResponse< GetCorporateUserPermission > GetCorporateUserPermissionWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->GetCorporateUserPermission");

            var localVarPath = "./corporate/user/{email}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporateUserPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporateUserPermission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporateUserPermission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporateUserPermission)));
        }

        /// <summary>
        /// Check admin user permissions This endpoint will provide the list of admin user permissions
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>Task of GetCorporateUserPermission</returns>
        public async System.Threading.Tasks.Task<GetCorporateUserPermission> GetCorporateUserPermissionAsync (string email)
        {
             ApiResponse<GetCorporateUserPermission> localVarResponse = await GetCorporateUserPermissionAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check admin user permissions This endpoint will provide the list of admin user permissions
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>Task of ApiResponse (GetCorporateUserPermission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporateUserPermission>> GetCorporateUserPermissionAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->GetCorporateUserPermission");

            var localVarPath = "./corporate/user/{email}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporateUserPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporateUserPermission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporateUserPermission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporateUserPermission)));
        }

        /// <summary>
        /// Get the list of groups This endpoint allows you to list all groups created on your Admin account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse2001&gt;</returns>
        public List<InlineResponse2001> GetSubAccountGroups ()
        {
             ApiResponse<List<InlineResponse2001>> localVarResponse = GetSubAccountGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of groups This endpoint allows you to list all groups created on your Admin account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse2001&gt;</returns>
        public ApiResponse< List<InlineResponse2001> > GetSubAccountGroupsWithHttpInfo ()
        {

            var localVarPath = "./corporate/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubAccountGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2001>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<InlineResponse2001>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2001>)));
        }

        /// <summary>
        /// Get the list of groups This endpoint allows you to list all groups created on your Admin account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse2001&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2001>> GetSubAccountGroupsAsync ()
        {
             ApiResponse<List<InlineResponse2001>> localVarResponse = await GetSubAccountGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of groups This endpoint allows you to list all groups created on your Admin account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2001&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2001>>> GetSubAccountGroupsAsyncWithHttpInfo ()
        {

            var localVarPath = "./corporate/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubAccountGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2001>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<InlineResponse2001>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2001>)));
        }

        /// <summary>
        /// Send invitation to an admin user &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot; - &#x60;sub_organization_groups&#x60;   - \&quot;create\&quot;   - \&quot;edit_delete\&quot; - &#x60;create_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;manage_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;analytics&#x60;   - \&quot;download_data\&quot;   - \&quot;create_alerts\&quot;   - \&quot;my_looks\&quot;   - \&quot;explore_create\&quot; - &#x60;security&#x60;   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>InviteAdminUser</returns>
        public InviteAdminUser InviteAdminUser (InviteAdminUser sendInvitation)
        {
             ApiResponse<InviteAdminUser> localVarResponse = InviteAdminUserWithHttpInfo(sendInvitation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send invitation to an admin user &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot; - &#x60;sub_organization_groups&#x60;   - \&quot;create\&quot;   - \&quot;edit_delete\&quot; - &#x60;create_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;manage_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;analytics&#x60;   - \&quot;download_data\&quot;   - \&quot;create_alerts\&quot;   - \&quot;my_looks\&quot;   - \&quot;explore_create\&quot; - &#x60;security&#x60;   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>ApiResponse of InviteAdminUser</returns>
        public ApiResponse< InviteAdminUser > InviteAdminUserWithHttpInfo (InviteAdminUser sendInvitation)
        {
            // verify the required parameter 'sendInvitation' is set
            if (sendInvitation == null)
                throw new ApiException(400, "Missing required parameter 'sendInvitation' when calling MasterAccountApi->InviteAdminUser");

            var localVarPath = "./corporate/user/invitation/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendInvitation != null && sendInvitation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendInvitation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendInvitation; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteAdminUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InviteAdminUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InviteAdminUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InviteAdminUser)));
        }

        /// <summary>
        /// Send invitation to an admin user &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot; - &#x60;sub_organization_groups&#x60;   - \&quot;create\&quot;   - \&quot;edit_delete\&quot; - &#x60;create_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;manage_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;analytics&#x60;   - \&quot;download_data\&quot;   - \&quot;create_alerts\&quot;   - \&quot;my_looks\&quot;   - \&quot;explore_create\&quot; - &#x60;security&#x60;   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>Task of InviteAdminUser</returns>
        public async System.Threading.Tasks.Task<InviteAdminUser> InviteAdminUserAsync (InviteAdminUser sendInvitation)
        {
             ApiResponse<InviteAdminUser> localVarResponse = await InviteAdminUserAsyncWithHttpInfo(sendInvitation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send invitation to an admin user &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot; - &#x60;sub_organization_groups&#x60;   - \&quot;create\&quot;   - \&quot;edit_delete\&quot; - &#x60;create_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;manage_sub_organizations&#x60;   - \&quot;all\&quot; - &#x60;analytics&#x60;   - \&quot;download_data\&quot;   - \&quot;create_alerts\&quot;   - \&quot;my_looks\&quot;   - \&quot;explore_create\&quot; - &#x60;security&#x60;   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>Task of ApiResponse (InviteAdminUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InviteAdminUser>> InviteAdminUserAsyncWithHttpInfo (InviteAdminUser sendInvitation)
        {
            // verify the required parameter 'sendInvitation' is set
            if (sendInvitation == null)
                throw new ApiException(400, "Missing required parameter 'sendInvitation' when calling MasterAccountApi->InviteAdminUser");

            var localVarPath = "./corporate/user/invitation/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendInvitation != null && sendInvitation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendInvitation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendInvitation; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteAdminUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InviteAdminUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InviteAdminUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InviteAdminUser)));
        }

    }
}
