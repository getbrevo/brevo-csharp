/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using brevo_csharp.Client;
using brevo_csharp.Model;

namespace brevo_csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MasterAccountApi
    {
        private brevo_csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MasterAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MasterAccountApi(String basePath)
        {
            this.Configuration = new brevo_csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MasterAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MasterAccountApi(brevo_csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = brevo_csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public brevo_csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public brevo_csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a group This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns></returns>
        public void CorporateGroupIdDelete (string apiKey, string partnerKey, string id)
        {
             CorporateGroupIdDeleteWithHttpInfo(apiKey, partnerKey, id);
        }

        /// <summary>
        /// Delete a group This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateGroupIdDeleteWithHttpInfo (string apiKey, string partnerKey, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdDelete");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a group This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateGroupIdDeleteAsync (string apiKey, string partnerKey, string id)
        {
             await CorporateGroupIdDeleteAsyncWithHttpInfo(apiKey, partnerKey, id);

        }

        /// <summary>
        /// Delete a group This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateGroupIdDeleteAsyncWithHttpInfo (string apiKey, string partnerKey, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdDelete");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// GET a group details This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>CorporateGroupDetailsResponse</returns>
        public CorporateGroupDetailsResponse CorporateGroupIdGet (string apiKey, string partnerKey, string id)
        {
             ApiResponse<CorporateGroupDetailsResponse> localVarResponse = CorporateGroupIdGetWithHttpInfo(apiKey, partnerKey, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GET a group details This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>ApiResponse of CorporateGroupDetailsResponse</returns>
        public ApiResponse< CorporateGroupDetailsResponse > CorporateGroupIdGetWithHttpInfo (string apiKey, string partnerKey, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdGet");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CorporateGroupDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CorporateGroupDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CorporateGroupDetailsResponse)));
        }

        /// <summary>
        /// GET a group details This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>Task of CorporateGroupDetailsResponse</returns>
        public async System.Threading.Tasks.Task<CorporateGroupDetailsResponse> CorporateGroupIdGetAsync (string apiKey, string partnerKey, string id)
        {
             ApiResponse<CorporateGroupDetailsResponse> localVarResponse = await CorporateGroupIdGetAsyncWithHttpInfo(apiKey, partnerKey, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GET a group details This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group of sub-organization</param>
        /// <returns>Task of ApiResponse (CorporateGroupDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CorporateGroupDetailsResponse>> CorporateGroupIdGetAsyncWithHttpInfo (string apiKey, string partnerKey, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdGet");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CorporateGroupDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CorporateGroupDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CorporateGroupDetailsResponse)));
        }

        /// <summary>
        /// Update a group of sub-accounts This endpoint allows you to update a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns></returns>
        public void CorporateGroupIdPut (string apiKey, string partnerKey, string id, Body1 body)
        {
             CorporateGroupIdPutWithHttpInfo(apiKey, partnerKey, id, body);
        }

        /// <summary>
        /// Update a group of sub-accounts This endpoint allows you to update a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateGroupIdPutWithHttpInfo (string apiKey, string partnerKey, string id, Body1 body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupIdPut");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a group of sub-accounts This endpoint allows you to update a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateGroupIdPutAsync (string apiKey, string partnerKey, string id, Body1 body)
        {
             await CorporateGroupIdPutAsyncWithHttpInfo(apiKey, partnerKey, id, body);

        }

        /// <summary>
        /// Update a group of sub-accounts This endpoint allows you to update a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the group</param>
        /// <param name="body">Group details to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateGroupIdPutAsyncWithHttpInfo (string apiKey, string partnerKey, string id, Body1 body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateGroupIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupIdPut");

            var localVarPath = "./corporate/group/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new group of sub-accounts This endpoint allows to create a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 CorporateGroupPost (string apiKey, string partnerKey, Body body)
        {
             ApiResponse<InlineResponse201> localVarResponse = CorporateGroupPostWithHttpInfo(apiKey, partnerKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new group of sub-accounts This endpoint allows to create a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse< InlineResponse201 > CorporateGroupPostWithHttpInfo (string apiKey, string partnerKey, Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupPost");

            var localVarPath = "./corporate/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Create a new group of sub-accounts This endpoint allows to create a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> CorporateGroupPostAsync (string apiKey, string partnerKey, Body body)
        {
             ApiResponse<InlineResponse201> localVarResponse = await CorporateGroupPostAsyncWithHttpInfo(apiKey, partnerKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new group of sub-accounts This endpoint allows to create a group of sub-accounts
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Group details to be created.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CorporateGroupPostAsyncWithHttpInfo (string apiKey, string partnerKey, Body body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupPost");

            var localVarPath = "./corporate/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Delete sub-account from group This endpoint allows you to remove a sub-organization from a group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns></returns>
        public void CorporateGroupUnlinkGroupIdSubAccountsPut (string apiKey, string partnerKey, string groupId, Body2 body)
        {
             CorporateGroupUnlinkGroupIdSubAccountsPutWithHttpInfo(apiKey, partnerKey, groupId, body);
        }

        /// <summary>
        /// Delete sub-account from group This endpoint allows you to remove a sub-organization from a group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateGroupUnlinkGroupIdSubAccountsPutWithHttpInfo (string apiKey, string partnerKey, string groupId, Body2 body)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling MasterAccountApi->CorporateGroupUnlinkGroupIdSubAccountsPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupUnlinkGroupIdSubAccountsPut");

            var localVarPath = "./corporate/group/unlink/{groupId}/subAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupUnlinkGroupIdSubAccountsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete sub-account from group This endpoint allows you to remove a sub-organization from a group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateGroupUnlinkGroupIdSubAccountsPutAsync (string apiKey, string partnerKey, string groupId, Body2 body)
        {
             await CorporateGroupUnlinkGroupIdSubAccountsPutAsyncWithHttpInfo(apiKey, partnerKey, groupId, body);

        }

        /// <summary>
        /// Delete sub-account from group This endpoint allows you to remove a sub-organization from a group.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Id of the group</param>
        /// <param name="body">List of sub-account ids</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateGroupUnlinkGroupIdSubAccountsPutAsyncWithHttpInfo (string apiKey, string partnerKey, string groupId, Body2 body)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling MasterAccountApi->CorporateGroupUnlinkGroupIdSubAccountsPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MasterAccountApi->CorporateGroupUnlinkGroupIdSubAccountsPut");

            var localVarPath = "./corporate/group/unlink/{groupId}/subAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateGroupUnlinkGroupIdSubAccountsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MasterDetailsResponse</returns>
        public MasterDetailsResponse CorporateMasterAccountGet (string apiKey, string partnerKey)
        {
             ApiResponse<MasterDetailsResponse> localVarResponse = CorporateMasterAccountGetWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MasterDetailsResponse</returns>
        public ApiResponse< MasterDetailsResponse > CorporateMasterAccountGetWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./corporate/masterAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateMasterAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasterDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MasterDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasterDetailsResponse)));
        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MasterDetailsResponse</returns>
        public async System.Threading.Tasks.Task<MasterDetailsResponse> CorporateMasterAccountGetAsync (string apiKey, string partnerKey)
        {
             ApiResponse<MasterDetailsResponse> localVarResponse = await CorporateMasterAccountGetAsyncWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of requested master account This endpoint will provide the details of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MasterDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MasterDetailsResponse>> CorporateMasterAccountGetAsyncWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./corporate/masterAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateMasterAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasterDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MasterDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasterDetailsResponse)));
        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>SubAccountsResponse</returns>
        public SubAccountsResponse CorporateSubAccountGet (string apiKey, string partnerKey, int? offset, int? limit)
        {
             ApiResponse<SubAccountsResponse> localVarResponse = CorporateSubAccountGetWithHttpInfo(apiKey, partnerKey, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>ApiResponse of SubAccountsResponse</returns>
        public ApiResponse< SubAccountsResponse > CorporateSubAccountGetWithHttpInfo (string apiKey, string partnerKey, int? offset, int? limit)
        {
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MasterAccountApi->CorporateSubAccountGet");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling MasterAccountApi->CorporateSubAccountGet");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountsResponse)));
        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>Task of SubAccountsResponse</returns>
        public async System.Threading.Tasks.Task<SubAccountsResponse> CorporateSubAccountGetAsync (string apiKey, string partnerKey, int? offset, int? limit)
        {
             ApiResponse<SubAccountsResponse> localVarResponse = await CorporateSubAccountGetAsyncWithHttpInfo(apiKey, partnerKey, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of all the sub-accounts of the master account. This endpoint will provide the list all the sub-accounts of the master account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Index of the first sub-account in the page</param>
        /// <param name="limit">Number of sub-accounts to be displayed on each page</param>
        /// <returns>Task of ApiResponse (SubAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubAccountsResponse>> CorporateSubAccountGetAsyncWithHttpInfo (string apiKey, string partnerKey, int? offset, int? limit)
        {
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MasterAccountApi->CorporateSubAccountGet");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling MasterAccountApi->CorporateSubAccountGet");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountsResponse)));
        }

        /// <summary>
        /// Enable/disable sub-account application(s) API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns></returns>
        public void CorporateSubAccountIdApplicationsTogglePut (string apiKey, string partnerKey, long? id, SubAccountAppsToggleRequest toggleApplications)
        {
             CorporateSubAccountIdApplicationsTogglePutWithHttpInfo(apiKey, partnerKey, id, toggleApplications);
        }

        /// <summary>
        /// Enable/disable sub-account application(s) API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateSubAccountIdApplicationsTogglePutWithHttpInfo (string apiKey, string partnerKey, long? id, SubAccountAppsToggleRequest toggleApplications)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdApplicationsTogglePut");
            // verify the required parameter 'toggleApplications' is set
            if (toggleApplications == null)
                throw new ApiException(400, "Missing required parameter 'toggleApplications' when calling MasterAccountApi->CorporateSubAccountIdApplicationsTogglePut");

            var localVarPath = "./corporate/subAccount/{id}/applications/toggle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toggleApplications != null && toggleApplications.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toggleApplications); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toggleApplications; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdApplicationsTogglePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enable/disable sub-account application(s) API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateSubAccountIdApplicationsTogglePutAsync (string apiKey, string partnerKey, long? id, SubAccountAppsToggleRequest toggleApplications)
        {
             await CorporateSubAccountIdApplicationsTogglePutAsyncWithHttpInfo(apiKey, partnerKey, id, toggleApplications);

        }

        /// <summary>
        /// Enable/disable sub-account application(s) API endpoint for the Corporate owner to enable/disable applications on the sub-account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization (mandatory)</param>
        /// <param name="toggleApplications">List of applications to activate or deactivate on a sub-account</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdApplicationsTogglePutAsyncWithHttpInfo (string apiKey, string partnerKey, long? id, SubAccountAppsToggleRequest toggleApplications)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdApplicationsTogglePut");
            // verify the required parameter 'toggleApplications' is set
            if (toggleApplications == null)
                throw new ApiException(400, "Missing required parameter 'toggleApplications' when calling MasterAccountApi->CorporateSubAccountIdApplicationsTogglePut");

            var localVarPath = "./corporate/subAccount/{id}/applications/toggle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toggleApplications != null && toggleApplications.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(toggleApplications); // http body (model) parameter
            }
            else
            {
                localVarPostBody = toggleApplications; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdApplicationsTogglePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns></returns>
        public void CorporateSubAccountIdDelete (string apiKey, string partnerKey, long? id)
        {
             CorporateSubAccountIdDeleteWithHttpInfo(apiKey, partnerKey, id);
        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateSubAccountIdDeleteWithHttpInfo (string apiKey, string partnerKey, long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdDelete");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateSubAccountIdDeleteAsync (string apiKey, string partnerKey, long? id)
        {
             await CorporateSubAccountIdDeleteAsyncWithHttpInfo(apiKey, partnerKey, id);

        }

        /// <summary>
        /// Delete a sub-account 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdDeleteAsyncWithHttpInfo (string apiKey, string partnerKey, long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdDelete");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>SubAccountDetailsResponse</returns>
        public SubAccountDetailsResponse CorporateSubAccountIdGet (string apiKey, string partnerKey, long? id)
        {
             ApiResponse<SubAccountDetailsResponse> localVarResponse = CorporateSubAccountIdGetWithHttpInfo(apiKey, partnerKey, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>ApiResponse of SubAccountDetailsResponse</returns>
        public ApiResponse< SubAccountDetailsResponse > CorporateSubAccountIdGetWithHttpInfo (string apiKey, string partnerKey, long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdGet");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountDetailsResponse)));
        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>Task of SubAccountDetailsResponse</returns>
        public async System.Threading.Tasks.Task<SubAccountDetailsResponse> CorporateSubAccountIdGetAsync (string apiKey, string partnerKey, long? id)
        {
             ApiResponse<SubAccountDetailsResponse> localVarResponse = await CorporateSubAccountIdGetAsyncWithHttpInfo(apiKey, partnerKey, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sub-account details This endpoint will provide the details for the specified sub-account company
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <returns>Task of ApiResponse (SubAccountDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubAccountDetailsResponse>> CorporateSubAccountIdGetAsyncWithHttpInfo (string apiKey, string partnerKey, long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdGet");

            var localVarPath = "./corporate/subAccount/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubAccountDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SubAccountDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubAccountDetailsResponse)));
        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns></returns>
        public void CorporateSubAccountIdPlanPut (string apiKey, string partnerKey, long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
             CorporateSubAccountIdPlanPutWithHttpInfo(apiKey, partnerKey, id, updatePlanDetails);
        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateSubAccountIdPlanPutWithHttpInfo (string apiKey, string partnerKey, long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");
            // verify the required parameter 'updatePlanDetails' is set
            if (updatePlanDetails == null)
                throw new ApiException(400, "Missing required parameter 'updatePlanDetails' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");

            var localVarPath = "./corporate/subAccount/{id}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updatePlanDetails != null && updatePlanDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePlanDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlanDetails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdPlanPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateSubAccountIdPlanPutAsync (string apiKey, string partnerKey, long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
             await CorporateSubAccountIdPlanPutAsyncWithHttpInfo(apiKey, partnerKey, id, updatePlanDetails);

        }

        /// <summary>
        /// Update sub-account plan This endpoint will update the sub-account plan
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the sub-account organization</param>
        /// <param name="updatePlanDetails">Values to update a sub-account plan</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateSubAccountIdPlanPutAsyncWithHttpInfo (string apiKey, string partnerKey, long? id, SubAccountUpdatePlanRequest updatePlanDetails)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");
            // verify the required parameter 'updatePlanDetails' is set
            if (updatePlanDetails == null)
                throw new ApiException(400, "Missing required parameter 'updatePlanDetails' when calling MasterAccountApi->CorporateSubAccountIdPlanPut");

            var localVarPath = "./corporate/subAccount/{id}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updatePlanDetails != null && updatePlanDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePlanDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlanDetails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountIdPlanPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>CreateApiKeyResponse</returns>
        public CreateApiKeyResponse CorporateSubAccountKeyPost (string apiKey, string partnerKey, CreateApiKeyRequest createApiKeyRequest)
        {
             ApiResponse<CreateApiKeyResponse> localVarResponse = CorporateSubAccountKeyPostWithHttpInfo(apiKey, partnerKey, createApiKeyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>ApiResponse of CreateApiKeyResponse</returns>
        public ApiResponse< CreateApiKeyResponse > CorporateSubAccountKeyPostWithHttpInfo (string apiKey, string partnerKey, CreateApiKeyRequest createApiKeyRequest)
        {
            // verify the required parameter 'createApiKeyRequest' is set
            if (createApiKeyRequest == null)
                throw new ApiException(400, "Missing required parameter 'createApiKeyRequest' when calling MasterAccountApi->CorporateSubAccountKeyPost");

            var localVarPath = "./corporate/subAccount/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createApiKeyRequest != null && createApiKeyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createApiKeyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createApiKeyRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountKeyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateApiKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateApiKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateApiKeyResponse)));
        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>Task of CreateApiKeyResponse</returns>
        public async System.Threading.Tasks.Task<CreateApiKeyResponse> CorporateSubAccountKeyPostAsync (string apiKey, string partnerKey, CreateApiKeyRequest createApiKeyRequest)
        {
             ApiResponse<CreateApiKeyResponse> localVarResponse = await CorporateSubAccountKeyPostAsyncWithHttpInfo(apiKey, partnerKey, createApiKeyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an API key for a sub-account This endpoint will generate an API v3 key for a sub account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createApiKeyRequest">Values to generate API key for sub-account</param>
        /// <returns>Task of ApiResponse (CreateApiKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateApiKeyResponse>> CorporateSubAccountKeyPostAsyncWithHttpInfo (string apiKey, string partnerKey, CreateApiKeyRequest createApiKeyRequest)
        {
            // verify the required parameter 'createApiKeyRequest' is set
            if (createApiKeyRequest == null)
                throw new ApiException(400, "Missing required parameter 'createApiKeyRequest' when calling MasterAccountApi->CorporateSubAccountKeyPost");

            var localVarPath = "./corporate/subAccount/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createApiKeyRequest != null && createApiKeyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createApiKeyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createApiKeyRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountKeyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateApiKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateApiKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateApiKeyResponse)));
        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>CreateSubAccountResponse</returns>
        public CreateSubAccountResponse CorporateSubAccountPost (string apiKey, string partnerKey, CreateSubAccount subAccountCreate)
        {
             ApiResponse<CreateSubAccountResponse> localVarResponse = CorporateSubAccountPostWithHttpInfo(apiKey, partnerKey, subAccountCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>ApiResponse of CreateSubAccountResponse</returns>
        public ApiResponse< CreateSubAccountResponse > CorporateSubAccountPostWithHttpInfo (string apiKey, string partnerKey, CreateSubAccount subAccountCreate)
        {
            // verify the required parameter 'subAccountCreate' is set
            if (subAccountCreate == null)
                throw new ApiException(400, "Missing required parameter 'subAccountCreate' when calling MasterAccountApi->CorporateSubAccountPost");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subAccountCreate != null && subAccountCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subAccountCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subAccountCreate; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateSubAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubAccountResponse)));
        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>Task of CreateSubAccountResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubAccountResponse> CorporateSubAccountPostAsync (string apiKey, string partnerKey, CreateSubAccount subAccountCreate)
        {
             ApiResponse<CreateSubAccountResponse> localVarResponse = await CorporateSubAccountPostAsyncWithHttpInfo(apiKey, partnerKey, subAccountCreate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new sub-account under a master account. This endpoint will create a new sub-account under a master account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountCreate">values to create new sub-account</param>
        /// <returns>Task of ApiResponse (CreateSubAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSubAccountResponse>> CorporateSubAccountPostAsyncWithHttpInfo (string apiKey, string partnerKey, CreateSubAccount subAccountCreate)
        {
            // verify the required parameter 'subAccountCreate' is set
            if (subAccountCreate == null)
                throw new ApiException(400, "Missing required parameter 'subAccountCreate' when calling MasterAccountApi->CorporateSubAccountPost");

            var localVarPath = "./corporate/subAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subAccountCreate != null && subAccountCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subAccountCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subAccountCreate; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateSubAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubAccountResponse)));
        }

        /// <summary>
        /// Generate SSO token to access Brevo This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>GetSsoToken</returns>
        public GetSsoToken CorporateSubAccountSsoTokenPost (string apiKey, string partnerKey, SsoTokenRequest ssoTokenRequest)
        {
             ApiResponse<GetSsoToken> localVarResponse = CorporateSubAccountSsoTokenPostWithHttpInfo(apiKey, partnerKey, ssoTokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate SSO token to access Brevo This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>ApiResponse of GetSsoToken</returns>
        public ApiResponse< GetSsoToken > CorporateSubAccountSsoTokenPostWithHttpInfo (string apiKey, string partnerKey, SsoTokenRequest ssoTokenRequest)
        {
            // verify the required parameter 'ssoTokenRequest' is set
            if (ssoTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'ssoTokenRequest' when calling MasterAccountApi->CorporateSubAccountSsoTokenPost");

            var localVarPath = "./corporate/subAccount/ssoToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssoTokenRequest != null && ssoTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssoTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssoTokenRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountSsoTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSsoToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSsoToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSsoToken)));
        }

        /// <summary>
        /// Generate SSO token to access Brevo This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>Task of GetSsoToken</returns>
        public async System.Threading.Tasks.Task<GetSsoToken> CorporateSubAccountSsoTokenPostAsync (string apiKey, string partnerKey, SsoTokenRequest ssoTokenRequest)
        {
             ApiResponse<GetSsoToken> localVarResponse = await CorporateSubAccountSsoTokenPostAsyncWithHttpInfo(apiKey, partnerKey, ssoTokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate SSO token to access Brevo This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssoTokenRequest">Values to generate SSO token for sub-account</param>
        /// <returns>Task of ApiResponse (GetSsoToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSsoToken>> CorporateSubAccountSsoTokenPostAsyncWithHttpInfo (string apiKey, string partnerKey, SsoTokenRequest ssoTokenRequest)
        {
            // verify the required parameter 'ssoTokenRequest' is set
            if (ssoTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'ssoTokenRequest' when calling MasterAccountApi->CorporateSubAccountSsoTokenPost");

            var localVarPath = "./corporate/subAccount/ssoToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssoTokenRequest != null && ssoTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssoTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssoTokenRequest; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateSubAccountSsoTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSsoToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSsoToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSsoToken)));
        }

        /// <summary>
        /// Resend / cancel admin user invitation This endpoint will allow the user to:  - Resend an admin user invitation - Cancel an admin user invitation 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 CorporateUserInvitationActionEmailPut (string apiKey, string partnerKey, string action, string email)
        {
             ApiResponse<InlineResponse200> localVarResponse = CorporateUserInvitationActionEmailPutWithHttpInfo(apiKey, partnerKey, action, email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resend / cancel admin user invitation This endpoint will allow the user to:  - Resend an admin user invitation - Cancel an admin user invitation 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > CorporateUserInvitationActionEmailPutWithHttpInfo (string apiKey, string partnerKey, string action, string email)
        {
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling MasterAccountApi->CorporateUserInvitationActionEmailPut");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->CorporateUserInvitationActionEmailPut");

            var localVarPath = "./corporate/user/invitation/{action}/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateUserInvitationActionEmailPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Resend / cancel admin user invitation This endpoint will allow the user to:  - Resend an admin user invitation - Cancel an admin user invitation 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> CorporateUserInvitationActionEmailPutAsync (string apiKey, string partnerKey, string action, string email)
        {
             ApiResponse<InlineResponse200> localVarResponse = await CorporateUserInvitationActionEmailPutAsyncWithHttpInfo(apiKey, partnerKey, action, email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resend / cancel admin user invitation This endpoint will allow the user to:  - Resend an admin user invitation - Cancel an admin user invitation 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Action to be performed (cancel / resend)</param>
        /// <param name="email">Email address of the recipient</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> CorporateUserInvitationActionEmailPutAsyncWithHttpInfo (string apiKey, string partnerKey, string action, string email)
        {
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling MasterAccountApi->CorporateUserInvitationActionEmailPut");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->CorporateUserInvitationActionEmailPut");

            var localVarPath = "./corporate/user/invitation/{action}/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateUserInvitationActionEmailPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Revoke an admin user This endpoint allows to revoke/remove an invited member of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns></returns>
        public void CorporateUserRevokeEmailDelete (string apiKey, string partnerKey, string email)
        {
             CorporateUserRevokeEmailDeleteWithHttpInfo(apiKey, partnerKey, email);
        }

        /// <summary>
        /// Revoke an admin user This endpoint allows to revoke/remove an invited member of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CorporateUserRevokeEmailDeleteWithHttpInfo (string apiKey, string partnerKey, string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->CorporateUserRevokeEmailDelete");

            var localVarPath = "./corporate/user/revoke/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateUserRevokeEmailDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Revoke an admin user This endpoint allows to revoke/remove an invited member of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CorporateUserRevokeEmailDeleteAsync (string apiKey, string partnerKey, string email)
        {
             await CorporateUserRevokeEmailDeleteAsyncWithHttpInfo(apiKey, partnerKey, email);

        }

        /// <summary>
        /// Revoke an admin user This endpoint allows to revoke/remove an invited member of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email of the invited user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CorporateUserRevokeEmailDeleteAsyncWithHttpInfo (string apiKey, string partnerKey, string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling MasterAccountApi->CorporateUserRevokeEmailDelete");

            var localVarPath = "./corporate/user/revoke/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CorporateUserRevokeEmailDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get user activity logs 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>GetAccountActivity</returns>
        public GetAccountActivity GetAccountActivity (string apiKey, string partnerKey, string startDate = null, string endDate = null, long? limit = null, long? offset = null)
        {
             ApiResponse<GetAccountActivity> localVarResponse = GetAccountActivityWithHttpInfo(apiKey, partnerKey, startDate, endDate, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user activity logs 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAccountActivity</returns>
        public ApiResponse< GetAccountActivity > GetAccountActivityWithHttpInfo (string apiKey, string partnerKey, string startDate = null, string endDate = null, long? limit = null, long? offset = null)
        {

            var localVarPath = "./organization/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAccountActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetAccountActivity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAccountActivity)));
        }

        /// <summary>
        /// Get user activity logs 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>Task of GetAccountActivity</returns>
        public async System.Threading.Tasks.Task<GetAccountActivity> GetAccountActivityAsync (string apiKey, string partnerKey, string startDate = null, string endDate = null, long? limit = null, long? offset = null)
        {
             ApiResponse<GetAccountActivity> localVarResponse = await GetAccountActivityAsyncWithHttpInfo(apiKey, partnerKey, startDate, endDate, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user activity logs 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAccountActivity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAccountActivity>> GetAccountActivityAsyncWithHttpInfo (string apiKey, string partnerKey, string startDate = null, string endDate = null, long? limit = null, long? offset = null)
        {

            var localVarPath = "./organization/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAccountActivity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetAccountActivity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAccountActivity)));
        }

        /// <summary>
        /// Get the list of all admin users This endpoint allows you to list all Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCorporateInvitedUsersList</returns>
        public GetCorporateInvitedUsersList GetCorporateInvitedUsersList (string apiKey, string partnerKey)
        {
             ApiResponse<GetCorporateInvitedUsersList> localVarResponse = GetCorporateInvitedUsersListWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all admin users This endpoint allows you to list all Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCorporateInvitedUsersList</returns>
        public ApiResponse< GetCorporateInvitedUsersList > GetCorporateInvitedUsersListWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./corporate/invited/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporateInvitedUsersList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporateInvitedUsersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporateInvitedUsersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporateInvitedUsersList)));
        }

        /// <summary>
        /// Get the list of all admin users This endpoint allows you to list all Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCorporateInvitedUsersList</returns>
        public async System.Threading.Tasks.Task<GetCorporateInvitedUsersList> GetCorporateInvitedUsersListAsync (string apiKey, string partnerKey)
        {
             ApiResponse<GetCorporateInvitedUsersList> localVarResponse = await GetCorporateInvitedUsersListAsyncWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of all admin users This endpoint allows you to list all Admin users of your Admin account
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCorporateInvitedUsersList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporateInvitedUsersList>> GetCorporateInvitedUsersListAsyncWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./corporate/invited/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporateInvitedUsersList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporateInvitedUsersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetCorporateInvitedUsersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporateInvitedUsersList)));
        }

        /// <summary>
        /// Get the list of groups This endpoint allows you to list all groups created on your Admin account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse2001&gt;</returns>
        public List<InlineResponse2001> GetSubAccountGroups (string apiKey, string partnerKey)
        {
             ApiResponse<List<InlineResponse2001>> localVarResponse = GetSubAccountGroupsWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of groups This endpoint allows you to list all groups created on your Admin account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse2001&gt;</returns>
        public ApiResponse< List<InlineResponse2001> > GetSubAccountGroupsWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./corporate/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubAccountGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2001>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<InlineResponse2001>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2001>)));
        }

        /// <summary>
        /// Get the list of groups This endpoint allows you to list all groups created on your Admin account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse2001&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2001>> GetSubAccountGroupsAsync (string apiKey, string partnerKey)
        {
             ApiResponse<List<InlineResponse2001>> localVarResponse = await GetSubAccountGroupsAsyncWithHttpInfo(apiKey, partnerKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of groups This endpoint allows you to list all groups created on your Admin account.
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2001&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2001>>> GetSubAccountGroupsAsyncWithHttpInfo (string apiKey, string partnerKey)
        {

            var localVarPath = "./corporate/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubAccountGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2001>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<InlineResponse2001>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2001>)));
        }

        /// <summary>
        /// Send invitation to an admin user &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>InviteAdminUser</returns>
        public InviteAdminUser InviteAdminUser (string apiKey, string partnerKey, InviteAdminUser sendInvitation)
        {
             ApiResponse<InviteAdminUser> localVarResponse = InviteAdminUserWithHttpInfo(apiKey, partnerKey, sendInvitation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send invitation to an admin user &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>ApiResponse of InviteAdminUser</returns>
        public ApiResponse< InviteAdminUser > InviteAdminUserWithHttpInfo (string apiKey, string partnerKey, InviteAdminUser sendInvitation)
        {
            // verify the required parameter 'sendInvitation' is set
            if (sendInvitation == null)
                throw new ApiException(400, "Missing required parameter 'sendInvitation' when calling MasterAccountApi->InviteAdminUser");

            var localVarPath = "./corporate/user/invitation/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendInvitation != null && sendInvitation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendInvitation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendInvitation; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteAdminUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InviteAdminUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InviteAdminUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InviteAdminUser)));
        }

        /// <summary>
        /// Send invitation to an admin user &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>Task of InviteAdminUser</returns>
        public async System.Threading.Tasks.Task<InviteAdminUser> InviteAdminUserAsync (string apiKey, string partnerKey, InviteAdminUser sendInvitation)
        {
             ApiResponse<InviteAdminUser> localVarResponse = await InviteAdminUserAsyncWithHttpInfo(apiKey, partnerKey, sendInvitation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send invitation to an admin user &#x60;This endpoint allows you to invite a member to manage the Admin account  Features and their respective permissions are as below:  - &#x60;my_plan&#x60;:   - \&quot;all\&quot; - &#x60;api&#x60;:   - \&quot;none\&quot; - &#x60;user_management&#x60;:   - \&quot;all\&quot; - &#x60;app_management&#x60; | Not available in ENTv2:   - \&quot;all\&quot;  **Note**: - If &#x60;all_features_access: false&#x60; then only privileges are required otherwise if &#x60;true&#x60; then it&#39;s assumed that all permissions will be there for the invited admin user. 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendInvitation">Payload to send an invitation</param>
        /// <returns>Task of ApiResponse (InviteAdminUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InviteAdminUser>> InviteAdminUserAsyncWithHttpInfo (string apiKey, string partnerKey, InviteAdminUser sendInvitation)
        {
            // verify the required parameter 'sendInvitation' is set
            if (sendInvitation == null)
                throw new ApiException(400, "Missing required parameter 'sendInvitation' when calling MasterAccountApi->InviteAdminUser");

            var localVarPath = "./corporate/user/invitation/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendInvitation != null && sendInvitation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendInvitation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendInvitation; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteAdminUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InviteAdminUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InviteAdminUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InviteAdminUser)));
        }

    }
}
