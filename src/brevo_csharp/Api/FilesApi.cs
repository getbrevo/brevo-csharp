/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using brevo_csharp.Client;
using brevo_csharp.Model;

namespace brevo_csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi
    {
        private brevo_csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = new brevo_csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(brevo_csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = brevo_csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = brevo_csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public brevo_csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public brevo_csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all files 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>FileList</returns>
        public FileList CrmFilesGet (string apiKey, string partnerKey, string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null)
        {
             ApiResponse<FileList> localVarResponse = CrmFilesGetWithHttpInfo(apiKey, partnerKey, entity, entityIds, dateFrom, dateTo, offset, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all files 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>ApiResponse of FileList</returns>
        public ApiResponse< FileList > CrmFilesGetWithHttpInfo (string apiKey, string partnerKey, string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null)
        {

            var localVarPath = "./crm/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entity", entity)); // query parameter
            if (entityIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityIds", entityIds)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrmFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileList)));
        }

        /// <summary>
        /// Get all files 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>Task of FileList</returns>
        public async System.Threading.Tasks.Task<FileList> CrmFilesGetAsync (string apiKey, string partnerKey, string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null)
        {
             ApiResponse<FileList> localVarResponse = await CrmFilesGetAsyncWithHttpInfo(apiKey, partnerKey, entity, entityIds, dateFrom, dateTo, offset, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all files 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>Task of ApiResponse (FileList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileList>> CrmFilesGetAsyncWithHttpInfo (string apiKey, string partnerKey, string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null)
        {

            var localVarPath = "./crm/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entity", entity)); // query parameter
            if (entityIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityIds", entityIds)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrmFilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileList)));
        }

        /// <summary>
        /// Get file details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>FileData</returns>
        public FileData CrmFilesIdDataGet (string apiKey, string partnerKey, string id)
        {
             ApiResponse<FileData> localVarResponse = CrmFilesIdDataGetWithHttpInfo(apiKey, partnerKey, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get file details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>ApiResponse of FileData</returns>
        public ApiResponse< FileData > CrmFilesIdDataGetWithHttpInfo (string apiKey, string partnerKey, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdDataGet");

            var localVarPath = "./crm/files/{id}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrmFilesIdDataGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileData)));
        }

        /// <summary>
        /// Get file details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>Task of FileData</returns>
        public async System.Threading.Tasks.Task<FileData> CrmFilesIdDataGetAsync (string apiKey, string partnerKey, string id)
        {
             ApiResponse<FileData> localVarResponse = await CrmFilesIdDataGetAsyncWithHttpInfo(apiKey, partnerKey, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get file details 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>Task of ApiResponse (FileData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileData>> CrmFilesIdDataGetAsyncWithHttpInfo (string apiKey, string partnerKey, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdDataGet");

            var localVarPath = "./crm/files/{id}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrmFilesIdDataGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileData)));
        }

        /// <summary>
        /// Delete a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns></returns>
        public void CrmFilesIdDelete (string apiKey, string partnerKey, string id)
        {
             CrmFilesIdDeleteWithHttpInfo(apiKey, partnerKey, id);
        }

        /// <summary>
        /// Delete a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CrmFilesIdDeleteWithHttpInfo (string apiKey, string partnerKey, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdDelete");

            var localVarPath = "./crm/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrmFilesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CrmFilesIdDeleteAsync (string apiKey, string partnerKey, string id)
        {
             await CrmFilesIdDeleteAsyncWithHttpInfo(apiKey, partnerKey, id);

        }

        /// <summary>
        /// Delete a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CrmFilesIdDeleteAsyncWithHttpInfo (string apiKey, string partnerKey, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdDelete");

            var localVarPath = "./crm/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrmFilesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Download a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>FileDownloadableLink</returns>
        public FileDownloadableLink CrmFilesIdGet (string apiKey, string partnerKey, string id)
        {
             ApiResponse<FileDownloadableLink> localVarResponse = CrmFilesIdGetWithHttpInfo(apiKey, partnerKey, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>ApiResponse of FileDownloadableLink</returns>
        public ApiResponse< FileDownloadableLink > CrmFilesIdGetWithHttpInfo (string apiKey, string partnerKey, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdGet");

            var localVarPath = "./crm/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrmFilesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDownloadableLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileDownloadableLink) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDownloadableLink)));
        }

        /// <summary>
        /// Download a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>Task of FileDownloadableLink</returns>
        public async System.Threading.Tasks.Task<FileDownloadableLink> CrmFilesIdGetAsync (string apiKey, string partnerKey, string id)
        {
             ApiResponse<FileDownloadableLink> localVarResponse = await CrmFilesIdGetAsyncWithHttpInfo(apiKey, partnerKey, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>Task of ApiResponse (FileDownloadableLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileDownloadableLink>> CrmFilesIdGetAsyncWithHttpInfo (string apiKey, string partnerKey, string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdGet");

            var localVarPath = "./crm/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrmFilesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDownloadableLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileDownloadableLink) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDownloadableLink)));
        }

        /// <summary>
        /// Upload a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>FileData</returns>
        public FileData CrmFilesPost (string apiKey, string partnerKey, System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null)
        {
             ApiResponse<FileData> localVarResponse = CrmFilesPostWithHttpInfo(apiKey, partnerKey, file, dealId, contactId, companyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>ApiResponse of FileData</returns>
        public ApiResponse< FileData > CrmFilesPostWithHttpInfo (string apiKey, string partnerKey, System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->CrmFilesPost");

            var localVarPath = "./crm/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (dealId != null) localVarFormParams.Add("dealId", this.Configuration.ApiClient.ParameterToString(dealId)); // form parameter
            if (contactId != null) localVarFormParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // form parameter
            if (companyId != null) localVarFormParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // form parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrmFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileData)));
        }

        /// <summary>
        /// Upload a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>Task of FileData</returns>
        public async System.Threading.Tasks.Task<FileData> CrmFilesPostAsync (string apiKey, string partnerKey, System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null)
        {
             ApiResponse<FileData> localVarResponse = await CrmFilesPostAsyncWithHttpInfo(apiKey, partnerKey, file, dealId, contactId, companyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a file 
        /// </summary>
        /// <exception cref="brevo_csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>Task of ApiResponse (FileData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileData>> CrmFilesPostAsyncWithHttpInfo (string apiKey, string partnerKey, System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->CrmFilesPost");

            var localVarPath = "./crm/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (dealId != null) localVarFormParams.Add("dealId", this.Configuration.ApiClient.ParameterToString(dealId)); // form parameter
            if (contactId != null) localVarFormParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // form parameter
            if (companyId != null) localVarFormParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // form parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["api-key"] = apiKey;
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(partnerKey))
            {
                localVarHeaderParams["partner-key"] = partnerKey;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CrmFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileData)));
        }

    }
}
