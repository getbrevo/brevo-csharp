/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// CreateSmtpTemplate
    /// </summary>
    [DataContract]
    public partial class CreateSmtpTemplate :  IEquatable<CreateSmtpTemplate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSmtpTemplate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSmtpTemplate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSmtpTemplate" /> class.
        /// </summary>
        /// <param name="tag">Tag of the template.</param>
        /// <param name="sender">sender (required).</param>
        /// <param name="templateName">Name of the template (required).</param>
        /// <param name="htmlContent">Body of the message (HTML version). The field must have more than 10 characters. REQUIRED if htmlUrl is empty.</param>
        /// <param name="htmlUrl">Url which contents the body of the email message. REQUIRED if htmlContent is empty.</param>
        /// <param name="subject">Subject of the template (required).</param>
        /// <param name="replyTo">Email on which campaign recipients will be able to reply to.</param>
        /// <param name="toField">To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization.</param>
        /// <param name="attachmentUrl">Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps.</param>
        /// <param name="isActive">Status of template. isActive &#x3D; true means template is active and isActive &#x3D; false means template is inactive.</param>
        public CreateSmtpTemplate(string tag = default(string), CreateSmtpTemplateSender sender = default(CreateSmtpTemplateSender), string templateName = default(string), string htmlContent = default(string), string htmlUrl = default(string), string subject = default(string), string replyTo = default(string), string toField = default(string), string attachmentUrl = default(string), bool? isActive = default(bool?))
        {
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new InvalidDataException("sender is a required property for CreateSmtpTemplate and cannot be null");
            }
            else
            {
                this.Sender = sender;
            }
            // to ensure "templateName" is required (not null)
            if (templateName == null)
            {
                throw new InvalidDataException("templateName is a required property for CreateSmtpTemplate and cannot be null");
            }
            else
            {
                this.TemplateName = templateName;
            }
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new InvalidDataException("subject is a required property for CreateSmtpTemplate and cannot be null");
            }
            else
            {
                this.Subject = subject;
            }
            this.Tag = tag;
            this.HtmlContent = htmlContent;
            this.HtmlUrl = htmlUrl;
            this.ReplyTo = replyTo;
            this.ToField = toField;
            this.AttachmentUrl = attachmentUrl;
            this.IsActive = isActive;
        }
        
        /// <summary>
        /// Tag of the template
        /// </summary>
        /// <value>Tag of the template</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public CreateSmtpTemplateSender Sender { get; set; }

        /// <summary>
        /// Name of the template
        /// </summary>
        /// <value>Name of the template</value>
        [DataMember(Name="templateName", EmitDefaultValue=false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Body of the message (HTML version). The field must have more than 10 characters. REQUIRED if htmlUrl is empty
        /// </summary>
        /// <value>Body of the message (HTML version). The field must have more than 10 characters. REQUIRED if htmlUrl is empty</value>
        [DataMember(Name="htmlContent", EmitDefaultValue=false)]
        public string HtmlContent { get; set; }

        /// <summary>
        /// Url which contents the body of the email message. REQUIRED if htmlContent is empty
        /// </summary>
        /// <value>Url which contents the body of the email message. REQUIRED if htmlContent is empty</value>
        [DataMember(Name="htmlUrl", EmitDefaultValue=false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Subject of the template
        /// </summary>
        /// <value>Subject of the template</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Email on which campaign recipients will be able to reply to
        /// </summary>
        /// <value>Email on which campaign recipients will be able to reply to</value>
        [DataMember(Name="replyTo", EmitDefaultValue=false)]
        public string ReplyTo { get; set; }

        /// <summary>
        /// To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
        /// </summary>
        /// <value>To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization</value>
        [DataMember(Name="toField", EmitDefaultValue=false)]
        public string ToField { get; set; }

        /// <summary>
        /// Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
        /// </summary>
        /// <value>Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps</value>
        [DataMember(Name="attachmentUrl", EmitDefaultValue=false)]
        public string AttachmentUrl { get; set; }

        /// <summary>
        /// Status of template. isActive &#x3D; true means template is active and isActive &#x3D; false means template is inactive
        /// </summary>
        /// <value>Status of template. isActive &#x3D; true means template is active and isActive &#x3D; false means template is inactive</value>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSmtpTemplate {\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  ToField: ").Append(ToField).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSmtpTemplate);
        }

        /// <summary>
        /// Returns true if CreateSmtpTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSmtpTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSmtpTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                ) && 
                (
                    this.HtmlContent == input.HtmlContent ||
                    (this.HtmlContent != null &&
                    this.HtmlContent.Equals(input.HtmlContent))
                ) && 
                (
                    this.HtmlUrl == input.HtmlUrl ||
                    (this.HtmlUrl != null &&
                    this.HtmlUrl.Equals(input.HtmlUrl))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.ReplyTo == input.ReplyTo ||
                    (this.ReplyTo != null &&
                    this.ReplyTo.Equals(input.ReplyTo))
                ) && 
                (
                    this.ToField == input.ToField ||
                    (this.ToField != null &&
                    this.ToField.Equals(input.ToField))
                ) && 
                (
                    this.AttachmentUrl == input.AttachmentUrl ||
                    (this.AttachmentUrl != null &&
                    this.AttachmentUrl.Equals(input.AttachmentUrl))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.TemplateName != null)
                    hashCode = hashCode * 59 + this.TemplateName.GetHashCode();
                if (this.HtmlContent != null)
                    hashCode = hashCode * 59 + this.HtmlContent.GetHashCode();
                if (this.HtmlUrl != null)
                    hashCode = hashCode * 59 + this.HtmlUrl.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.ReplyTo != null)
                    hashCode = hashCode * 59 + this.ReplyTo.GetHashCode();
                if (this.ToField != null)
                    hashCode = hashCode * 59 + this.ToField.GetHashCode();
                if (this.AttachmentUrl != null)
                    hashCode = hashCode * 59 + this.AttachmentUrl.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                return hashCode;
            }
        }
    }

}
