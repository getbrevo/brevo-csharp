/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// MainLimit
    /// </summary>
    [DataContract]
    public partial class MainLimit :  IEquatable<MainLimit>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainLimit" /> class.
        /// </summary>
        /// <param name="createdAt">Timestamp when the reward limit was created.</param>
        /// <param name="durationUnit">Unit of time for the reward limit&#39;s availability (e.g., day/week/month/year)..</param>
        /// <param name="durationValue">Number of days/weeks/month/year for reward limit.</param>
        /// <param name="limitValue">Value of the limit.</param>
        /// <param name="rewardLimitId">Unique identifier for the reward limit.</param>
        /// <param name="slidingSchedule">Select true to calculate all redeems / attributions from previous value of selected durationUnit to current time.</param>
        /// <param name="type">Type of reward.</param>
        /// <param name="updatedAt">Timestamp when the reward limit was created.</param>
        public MainLimit(DateTime? createdAt = default(DateTime?), string durationUnit = default(string), int? durationValue = default(int?), int? limitValue = default(int?), string rewardLimitId = default(string), bool? slidingSchedule = default(bool?), string type = default(string), DateTime? updatedAt = default(DateTime?))
        {
            this.CreatedAt = createdAt;
            this.DurationUnit = durationUnit;
            this.DurationValue = durationValue;
            this.LimitValue = limitValue;
            this.RewardLimitId = rewardLimitId;
            this.SlidingSchedule = slidingSchedule;
            this.Type = type;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Timestamp when the reward limit was created
        /// </summary>
        /// <value>Timestamp when the reward limit was created</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Unit of time for the reward limit&#39;s availability (e.g., day/week/month/year).
        /// </summary>
        /// <value>Unit of time for the reward limit&#39;s availability (e.g., day/week/month/year).</value>
        [DataMember(Name="durationUnit", EmitDefaultValue=false)]
        public string DurationUnit { get; set; }

        /// <summary>
        /// Number of days/weeks/month/year for reward limit
        /// </summary>
        /// <value>Number of days/weeks/month/year for reward limit</value>
        [DataMember(Name="durationValue", EmitDefaultValue=false)]
        public int? DurationValue { get; set; }

        /// <summary>
        /// Value of the limit
        /// </summary>
        /// <value>Value of the limit</value>
        [DataMember(Name="limitValue", EmitDefaultValue=false)]
        public int? LimitValue { get; set; }

        /// <summary>
        /// Unique identifier for the reward limit
        /// </summary>
        /// <value>Unique identifier for the reward limit</value>
        [DataMember(Name="rewardLimitId", EmitDefaultValue=false)]
        public string RewardLimitId { get; set; }

        /// <summary>
        /// Select true to calculate all redeems / attributions from previous value of selected durationUnit to current time
        /// </summary>
        /// <value>Select true to calculate all redeems / attributions from previous value of selected durationUnit to current time</value>
        [DataMember(Name="slidingSchedule", EmitDefaultValue=false)]
        public bool? SlidingSchedule { get; set; }

        /// <summary>
        /// Type of reward
        /// </summary>
        /// <value>Type of reward</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Timestamp when the reward limit was created
        /// </summary>
        /// <value>Timestamp when the reward limit was created</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainLimit {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DurationUnit: ").Append(DurationUnit).Append("\n");
            sb.Append("  DurationValue: ").Append(DurationValue).Append("\n");
            sb.Append("  LimitValue: ").Append(LimitValue).Append("\n");
            sb.Append("  RewardLimitId: ").Append(RewardLimitId).Append("\n");
            sb.Append("  SlidingSchedule: ").Append(SlidingSchedule).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainLimit);
        }

        /// <summary>
        /// Returns true if MainLimit instances are equal
        /// </summary>
        /// <param name="input">Instance of MainLimit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainLimit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DurationUnit == input.DurationUnit ||
                    (this.DurationUnit != null &&
                    this.DurationUnit.Equals(input.DurationUnit))
                ) && 
                (
                    this.DurationValue == input.DurationValue ||
                    (this.DurationValue != null &&
                    this.DurationValue.Equals(input.DurationValue))
                ) && 
                (
                    this.LimitValue == input.LimitValue ||
                    (this.LimitValue != null &&
                    this.LimitValue.Equals(input.LimitValue))
                ) && 
                (
                    this.RewardLimitId == input.RewardLimitId ||
                    (this.RewardLimitId != null &&
                    this.RewardLimitId.Equals(input.RewardLimitId))
                ) && 
                (
                    this.SlidingSchedule == input.SlidingSchedule ||
                    (this.SlidingSchedule != null &&
                    this.SlidingSchedule.Equals(input.SlidingSchedule))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DurationUnit != null)
                    hashCode = hashCode * 59 + this.DurationUnit.GetHashCode();
                if (this.DurationValue != null)
                    hashCode = hashCode * 59 + this.DurationValue.GetHashCode();
                if (this.LimitValue != null)
                    hashCode = hashCode * 59 + this.LimitValue.GetHashCode();
                if (this.RewardLimitId != null)
                    hashCode = hashCode * 59 + this.RewardLimitId.GetHashCode();
                if (this.SlidingSchedule != null)
                    hashCode = hashCode * 59 + this.SlidingSchedule.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
