/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Payload for updating an existing balance limit, specifying constraints on transactions or amounts.
    /// </summary>
    [DataContract]
    public partial class UpdateBalanceLimitPayload :  IEquatable<UpdateBalanceLimitPayload>
    {
        /// <summary>
        /// Defines whether the limit applies to transaction count or amount.
        /// </summary>
        /// <value>Defines whether the limit applies to transaction count or amount.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConstraintTypeEnum
        {
            
            /// <summary>
            /// Enum Transaction for value: transaction
            /// </summary>
            [EnumMember(Value = "transaction")]
            Transaction = 1,
            
            /// <summary>
            /// Enum Amount for value: amount
            /// </summary>
            [EnumMember(Value = "amount")]
            Amount = 2
        }

        /// <summary>
        /// Defines whether the limit applies to transaction count or amount.
        /// </summary>
        /// <value>Defines whether the limit applies to transaction count or amount.</value>
        [DataMember(Name="constraintType", EmitDefaultValue=false)]
        public ConstraintTypeEnum ConstraintType { get; set; }
        /// <summary>
        /// Unit of time for which the limit is applicable.
        /// </summary>
        /// <value>Unit of time for which the limit is applicable.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DurationUnitEnum
        {
            
            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 1,
            
            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 2,
            
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 3,
            
            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 4
        }

        /// <summary>
        /// Unit of time for which the limit is applicable.
        /// </summary>
        /// <value>Unit of time for which the limit is applicable.</value>
        [DataMember(Name="durationUnit", EmitDefaultValue=false)]
        public DurationUnitEnum DurationUnit { get; set; }
        /// <summary>
        /// Specifies whether the limit applies to credit or debit transactions.
        /// </summary>
        /// <value>Specifies whether the limit applies to credit or debit transactions.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionTypeEnum
        {
            
            /// <summary>
            /// Enum Credit for value: credit
            /// </summary>
            [EnumMember(Value = "credit")]
            Credit = 1,
            
            /// <summary>
            /// Enum Debit for value: debit
            /// </summary>
            [EnumMember(Value = "debit")]
            Debit = 2
        }

        /// <summary>
        /// Specifies whether the limit applies to credit or debit transactions.
        /// </summary>
        /// <value>Specifies whether the limit applies to credit or debit transactions.</value>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public TransactionTypeEnum TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateBalanceLimitPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateBalanceLimitPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateBalanceLimitPayload" /> class.
        /// </summary>
        /// <param name="constraintType">Defines whether the limit applies to transaction count or amount. (required).</param>
        /// <param name="durationUnit">Unit of time for which the limit is applicable. (required).</param>
        /// <param name="durationValue">Number of time units for the balance limit. (required).</param>
        /// <param name="slidingSchedule">Determines if the limit resets on a rolling schedule..</param>
        /// <param name="transactionType">Specifies whether the limit applies to credit or debit transactions. (required).</param>
        /// <param name="value">Maximum allowed value for the specified constraint type. (required).</param>
        public UpdateBalanceLimitPayload(ConstraintTypeEnum constraintType = default(ConstraintTypeEnum), DurationUnitEnum durationUnit = default(DurationUnitEnum), int? durationValue = default(int?), bool? slidingSchedule = default(bool?), TransactionTypeEnum transactionType = default(TransactionTypeEnum), int? value = default(int?))
        {
            // to ensure "constraintType" is required (not null)
            if (constraintType == null)
            {
                throw new InvalidDataException("constraintType is a required property for UpdateBalanceLimitPayload and cannot be null");
            }
            else
            {
                this.ConstraintType = constraintType;
            }
            // to ensure "durationUnit" is required (not null)
            if (durationUnit == null)
            {
                throw new InvalidDataException("durationUnit is a required property for UpdateBalanceLimitPayload and cannot be null");
            }
            else
            {
                this.DurationUnit = durationUnit;
            }
            // to ensure "durationValue" is required (not null)
            if (durationValue == null)
            {
                throw new InvalidDataException("durationValue is a required property for UpdateBalanceLimitPayload and cannot be null");
            }
            else
            {
                this.DurationValue = durationValue;
            }
            // to ensure "transactionType" is required (not null)
            if (transactionType == null)
            {
                throw new InvalidDataException("transactionType is a required property for UpdateBalanceLimitPayload and cannot be null");
            }
            else
            {
                this.TransactionType = transactionType;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for UpdateBalanceLimitPayload and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            this.SlidingSchedule = slidingSchedule;
        }
        


        /// <summary>
        /// Number of time units for the balance limit.
        /// </summary>
        /// <value>Number of time units for the balance limit.</value>
        [DataMember(Name="durationValue", EmitDefaultValue=false)]
        public int? DurationValue { get; set; }

        /// <summary>
        /// Determines if the limit resets on a rolling schedule.
        /// </summary>
        /// <value>Determines if the limit resets on a rolling schedule.</value>
        [DataMember(Name="slidingSchedule", EmitDefaultValue=false)]
        public bool? SlidingSchedule { get; set; }


        /// <summary>
        /// Maximum allowed value for the specified constraint type.
        /// </summary>
        /// <value>Maximum allowed value for the specified constraint type.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public int? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateBalanceLimitPayload {\n");
            sb.Append("  ConstraintType: ").Append(ConstraintType).Append("\n");
            sb.Append("  DurationUnit: ").Append(DurationUnit).Append("\n");
            sb.Append("  DurationValue: ").Append(DurationValue).Append("\n");
            sb.Append("  SlidingSchedule: ").Append(SlidingSchedule).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateBalanceLimitPayload);
        }

        /// <summary>
        /// Returns true if UpdateBalanceLimitPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateBalanceLimitPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateBalanceLimitPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConstraintType == input.ConstraintType ||
                    (this.ConstraintType != null &&
                    this.ConstraintType.Equals(input.ConstraintType))
                ) && 
                (
                    this.DurationUnit == input.DurationUnit ||
                    (this.DurationUnit != null &&
                    this.DurationUnit.Equals(input.DurationUnit))
                ) && 
                (
                    this.DurationValue == input.DurationValue ||
                    (this.DurationValue != null &&
                    this.DurationValue.Equals(input.DurationValue))
                ) && 
                (
                    this.SlidingSchedule == input.SlidingSchedule ||
                    (this.SlidingSchedule != null &&
                    this.SlidingSchedule.Equals(input.SlidingSchedule))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConstraintType != null)
                    hashCode = hashCode * 59 + this.ConstraintType.GetHashCode();
                if (this.DurationUnit != null)
                    hashCode = hashCode * 59 + this.DurationUnit.GetHashCode();
                if (this.DurationValue != null)
                    hashCode = hashCode * 59 + this.DurationValue.GetHashCode();
                if (this.SlidingSchedule != null)
                    hashCode = hashCode * 59 + this.SlidingSchedule.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }
    }

}
