/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// SendWhatsappMessage
    /// </summary>
    [DataContract]
    public partial class SendWhatsappMessage :  IEquatable<SendWhatsappMessage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendWhatsappMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendWhatsappMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendWhatsappMessage" /> class.
        /// </summary>
        /// <param name="templateId">ID of the template to send.</param>
        /// <param name="text">Text to be sent as message body (will be overridden if templateId is passed in the same request).</param>
        /// <param name="senderNumber">WhatsApp Number with country code. Example, 85264318721 (required).</param>
        /// <param name="_params">Pass the set of attributes to customize the template. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}..</param>
        /// <param name="contactNumbers">List of phone numbers of the contacts (required).</param>
        public SendWhatsappMessage(int? templateId = default(int?), string text = default(string), string senderNumber = default(string), Object _params = default(Object), List<string> contactNumbers = default(List<string>))
        {
            // to ensure "senderNumber" is required (not null)
            if (senderNumber == null)
            {
                throw new InvalidDataException("senderNumber is a required property for SendWhatsappMessage and cannot be null");
            }
            else
            {
                this.SenderNumber = senderNumber;
            }
            // to ensure "contactNumbers" is required (not null)
            if (contactNumbers == null)
            {
                throw new InvalidDataException("contactNumbers is a required property for SendWhatsappMessage and cannot be null");
            }
            else
            {
                this.ContactNumbers = contactNumbers;
            }
            this.TemplateId = templateId;
            this.Text = text;
            this.Params = _params;
        }
        
        /// <summary>
        /// ID of the template to send
        /// </summary>
        /// <value>ID of the template to send</value>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public int? TemplateId { get; set; }

        /// <summary>
        /// Text to be sent as message body (will be overridden if templateId is passed in the same request)
        /// </summary>
        /// <value>Text to be sent as message body (will be overridden if templateId is passed in the same request)</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// WhatsApp Number with country code. Example, 85264318721
        /// </summary>
        /// <value>WhatsApp Number with country code. Example, 85264318721</value>
        [DataMember(Name="senderNumber", EmitDefaultValue=false)]
        public string SenderNumber { get; set; }

        /// <summary>
        /// Pass the set of attributes to customize the template. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}.
        /// </summary>
        /// <value>Pass the set of attributes to customize the template. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}.</value>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public Object Params { get; set; }

        /// <summary>
        /// List of phone numbers of the contacts
        /// </summary>
        /// <value>List of phone numbers of the contacts</value>
        [DataMember(Name="contactNumbers", EmitDefaultValue=false)]
        public List<string> ContactNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendWhatsappMessage {\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  SenderNumber: ").Append(SenderNumber).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  ContactNumbers: ").Append(ContactNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendWhatsappMessage);
        }

        /// <summary>
        /// Returns true if SendWhatsappMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of SendWhatsappMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendWhatsappMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.SenderNumber == input.SenderNumber ||
                    (this.SenderNumber != null &&
                    this.SenderNumber.Equals(input.SenderNumber))
                ) && 
                (
                    this.Params == input.Params ||
                    (this.Params != null &&
                    this.Params.Equals(input.Params))
                ) && 
                (
                    this.ContactNumbers == input.ContactNumbers ||
                    this.ContactNumbers != null &&
                    this.ContactNumbers.SequenceEqual(input.ContactNumbers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.SenderNumber != null)
                    hashCode = hashCode * 59 + this.SenderNumber.GetHashCode();
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                if (this.ContactNumbers != null)
                    hashCode = hashCode * 59 + this.ContactNumbers.GetHashCode();
                return hashCode;
            }
        }
    }

}
