/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Payload for creating a transaction, specifying balance details and optional expiration.
    /// </summary>
    [DataContract]
    public partial class CreateTransactionPayload :  IEquatable<CreateTransactionPayload>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTransactionPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionPayload" /> class.
        /// </summary>
        /// <param name="loyaltySubscriptionId">Unique identifier for the loyalty subscription (required unless &#x60;contactId&#x60; is provided)..</param>
        /// <param name="amount">Transaction amount (must be provided). (required).</param>
        /// <param name="autoComplete">Whether the transaction should be automatically completed..</param>
        /// <param name="balanceDefinitionId">Unique identifier (UUID) of the associated balance definition. (required).</param>
        /// <param name="balanceExpiryInMinutes">Optional expiry time for the balance in minutes (must be greater than 0 if provided)..</param>
        /// <param name="contactId">Unique identifier of the contact involved in the transaction (required unless &#x60;LoyaltySubscriptionId&#x60; is provided)..</param>
        /// <param name="eventTime">Optional timestamp specifying when the transaction occurred..</param>
        /// <param name="meta">Optional metadata associated with the transaction..</param>
        /// <param name="ttl">Optional time-to-live for the transaction (must be greater than 0 if provided)..</param>
        public CreateTransactionPayload(string loyaltySubscriptionId = default(string), decimal? amount = default(decimal?), bool? autoComplete = default(bool?), string balanceDefinitionId = default(string), int? balanceExpiryInMinutes = default(int?), int? contactId = default(int?), string eventTime = default(string), Object meta = default(Object), int? ttl = default(int?))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for CreateTransactionPayload and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "balanceDefinitionId" is required (not null)
            if (balanceDefinitionId == null)
            {
                throw new InvalidDataException("balanceDefinitionId is a required property for CreateTransactionPayload and cannot be null");
            }
            else
            {
                this.BalanceDefinitionId = balanceDefinitionId;
            }
            this.LoyaltySubscriptionId = loyaltySubscriptionId;
            this.AutoComplete = autoComplete;
            this.BalanceExpiryInMinutes = balanceExpiryInMinutes;
            this.ContactId = contactId;
            this.EventTime = eventTime;
            this.Meta = meta;
            this.Ttl = ttl;
        }
        
        /// <summary>
        /// Unique identifier for the loyalty subscription (required unless &#x60;contactId&#x60; is provided).
        /// </summary>
        /// <value>Unique identifier for the loyalty subscription (required unless &#x60;contactId&#x60; is provided).</value>
        [DataMember(Name="LoyaltySubscriptionId", EmitDefaultValue=false)]
        public string LoyaltySubscriptionId { get; set; }

        /// <summary>
        /// Transaction amount (must be provided).
        /// </summary>
        /// <value>Transaction amount (must be provided).</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Whether the transaction should be automatically completed.
        /// </summary>
        /// <value>Whether the transaction should be automatically completed.</value>
        [DataMember(Name="autoComplete", EmitDefaultValue=false)]
        public bool? AutoComplete { get; set; }

        /// <summary>
        /// Unique identifier (UUID) of the associated balance definition.
        /// </summary>
        /// <value>Unique identifier (UUID) of the associated balance definition.</value>
        [DataMember(Name="balanceDefinitionId", EmitDefaultValue=false)]
        public string BalanceDefinitionId { get; set; }

        /// <summary>
        /// Optional expiry time for the balance in minutes (must be greater than 0 if provided).
        /// </summary>
        /// <value>Optional expiry time for the balance in minutes (must be greater than 0 if provided).</value>
        [DataMember(Name="balanceExpiryInMinutes", EmitDefaultValue=false)]
        public int? BalanceExpiryInMinutes { get; set; }

        /// <summary>
        /// Unique identifier of the contact involved in the transaction (required unless &#x60;LoyaltySubscriptionId&#x60; is provided).
        /// </summary>
        /// <value>Unique identifier of the contact involved in the transaction (required unless &#x60;LoyaltySubscriptionId&#x60; is provided).</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public int? ContactId { get; set; }

        /// <summary>
        /// Optional timestamp specifying when the transaction occurred.
        /// </summary>
        /// <value>Optional timestamp specifying when the transaction occurred.</value>
        [DataMember(Name="eventTime", EmitDefaultValue=false)]
        public string EventTime { get; set; }

        /// <summary>
        /// Optional metadata associated with the transaction.
        /// </summary>
        /// <value>Optional metadata associated with the transaction.</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Object Meta { get; set; }

        /// <summary>
        /// Optional time-to-live for the transaction (must be greater than 0 if provided).
        /// </summary>
        /// <value>Optional time-to-live for the transaction (must be greater than 0 if provided).</value>
        [DataMember(Name="ttl", EmitDefaultValue=false)]
        public int? Ttl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTransactionPayload {\n");
            sb.Append("  LoyaltySubscriptionId: ").Append(LoyaltySubscriptionId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AutoComplete: ").Append(AutoComplete).Append("\n");
            sb.Append("  BalanceDefinitionId: ").Append(BalanceDefinitionId).Append("\n");
            sb.Append("  BalanceExpiryInMinutes: ").Append(BalanceExpiryInMinutes).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTransactionPayload);
        }

        /// <summary>
        /// Returns true if CreateTransactionPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTransactionPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTransactionPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoyaltySubscriptionId == input.LoyaltySubscriptionId ||
                    (this.LoyaltySubscriptionId != null &&
                    this.LoyaltySubscriptionId.Equals(input.LoyaltySubscriptionId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AutoComplete == input.AutoComplete ||
                    (this.AutoComplete != null &&
                    this.AutoComplete.Equals(input.AutoComplete))
                ) && 
                (
                    this.BalanceDefinitionId == input.BalanceDefinitionId ||
                    (this.BalanceDefinitionId != null &&
                    this.BalanceDefinitionId.Equals(input.BalanceDefinitionId))
                ) && 
                (
                    this.BalanceExpiryInMinutes == input.BalanceExpiryInMinutes ||
                    (this.BalanceExpiryInMinutes != null &&
                    this.BalanceExpiryInMinutes.Equals(input.BalanceExpiryInMinutes))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.EventTime == input.EventTime ||
                    (this.EventTime != null &&
                    this.EventTime.Equals(input.EventTime))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.Ttl == input.Ttl ||
                    (this.Ttl != null &&
                    this.Ttl.Equals(input.Ttl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoyaltySubscriptionId != null)
                    hashCode = hashCode * 59 + this.LoyaltySubscriptionId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AutoComplete != null)
                    hashCode = hashCode * 59 + this.AutoComplete.GetHashCode();
                if (this.BalanceDefinitionId != null)
                    hashCode = hashCode * 59 + this.BalanceDefinitionId.GetHashCode();
                if (this.BalanceExpiryInMinutes != null)
                    hashCode = hashCode * 59 + this.BalanceExpiryInMinutes.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.EventTime != null)
                    hashCode = hashCode * 59 + this.EventTime.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.Ttl != null)
                    hashCode = hashCode * 59 + this.Ttl.GetHashCode();
                return hashCode;
            }
        }
    }

}
