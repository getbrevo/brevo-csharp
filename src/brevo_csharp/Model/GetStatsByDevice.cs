/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetStatsByDevice
    /// </summary>
    [DataContract]
    public partial class GetStatsByDevice :  IEquatable<GetStatsByDevice>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetStatsByDevice" /> class.
        /// </summary>
        /// <param name="desktop">Statistics of the campaign on the basis of desktop devices.</param>
        /// <param name="mobile">Statistics of the campaign on the basis of mobile devices.</param>
        /// <param name="tablet">Statistics of the campaign on the basis of tablet devices.</param>
        /// <param name="unknown">Statistics of the campaign on the basis of unknown devices.</param>
        public GetStatsByDevice(Dictionary<string, GetDeviceBrowserStats> desktop = default(Dictionary<string, GetDeviceBrowserStats>), Dictionary<string, GetDeviceBrowserStats> mobile = default(Dictionary<string, GetDeviceBrowserStats>), Dictionary<string, GetDeviceBrowserStats> tablet = default(Dictionary<string, GetDeviceBrowserStats>), Dictionary<string, GetDeviceBrowserStats> unknown = default(Dictionary<string, GetDeviceBrowserStats>))
        {
            this.Desktop = desktop;
            this.Mobile = mobile;
            this.Tablet = tablet;
            this.Unknown = unknown;
        }
        
        /// <summary>
        /// Statistics of the campaign on the basis of desktop devices
        /// </summary>
        /// <value>Statistics of the campaign on the basis of desktop devices</value>
        [DataMember(Name="desktop", EmitDefaultValue=false)]
        public Dictionary<string, GetDeviceBrowserStats> Desktop { get; set; }

        /// <summary>
        /// Statistics of the campaign on the basis of mobile devices
        /// </summary>
        /// <value>Statistics of the campaign on the basis of mobile devices</value>
        [DataMember(Name="mobile", EmitDefaultValue=false)]
        public Dictionary<string, GetDeviceBrowserStats> Mobile { get; set; }

        /// <summary>
        /// Statistics of the campaign on the basis of tablet devices
        /// </summary>
        /// <value>Statistics of the campaign on the basis of tablet devices</value>
        [DataMember(Name="tablet", EmitDefaultValue=false)]
        public Dictionary<string, GetDeviceBrowserStats> Tablet { get; set; }

        /// <summary>
        /// Statistics of the campaign on the basis of unknown devices
        /// </summary>
        /// <value>Statistics of the campaign on the basis of unknown devices</value>
        [DataMember(Name="unknown", EmitDefaultValue=false)]
        public Dictionary<string, GetDeviceBrowserStats> Unknown { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetStatsByDevice {\n");
            sb.Append("  Desktop: ").Append(Desktop).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  Tablet: ").Append(Tablet).Append("\n");
            sb.Append("  Unknown: ").Append(Unknown).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetStatsByDevice);
        }

        /// <summary>
        /// Returns true if GetStatsByDevice instances are equal
        /// </summary>
        /// <param name="input">Instance of GetStatsByDevice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetStatsByDevice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Desktop == input.Desktop ||
                    this.Desktop != null &&
                    this.Desktop.SequenceEqual(input.Desktop)
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    this.Mobile != null &&
                    this.Mobile.SequenceEqual(input.Mobile)
                ) && 
                (
                    this.Tablet == input.Tablet ||
                    this.Tablet != null &&
                    this.Tablet.SequenceEqual(input.Tablet)
                ) && 
                (
                    this.Unknown == input.Unknown ||
                    this.Unknown != null &&
                    this.Unknown.SequenceEqual(input.Unknown)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Desktop != null)
                    hashCode = hashCode * 59 + this.Desktop.GetHashCode();
                if (this.Mobile != null)
                    hashCode = hashCode * 59 + this.Mobile.GetHashCode();
                if (this.Tablet != null)
                    hashCode = hashCode * 59 + this.Tablet.GetHashCode();
                if (this.Unknown != null)
                    hashCode = hashCode * 59 + this.Unknown.GetHashCode();
                return hashCode;
            }
        }
    }

}
