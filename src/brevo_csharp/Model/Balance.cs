/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Balance
    /// </summary>
    [DataContract]
    public partial class Balance :  IEquatable<Balance>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Balance" /> class.
        /// </summary>
        /// <param name="amount">The current amount available in the balance.</param>
        /// <param name="balanceDefinitionId">balance definition ID.</param>
        /// <param name="consumedAt">Timestamp of when the balance was last consumed.</param>
        /// <param name="contactId">contact ID.</param>
        /// <param name="createdAt">Timestamp of when the balance was created.</param>
        /// <param name="expiresAt">Expiration timestamp of the balance.</param>
        /// <param name="id">Unique identifier for the balance.</param>
        /// <param name="loyaltyProgramId">loyalty program ID.</param>
        /// <param name="organizationId">organization ID.</param>
        public Balance(decimal? amount = default(decimal?), string balanceDefinitionId = default(string), string consumedAt = default(string), int? contactId = default(int?), string createdAt = default(string), string expiresAt = default(string), string id = default(string), string loyaltyProgramId = default(string), int? organizationId = default(int?))
        {
            this.Amount = amount;
            this.BalanceDefinitionId = balanceDefinitionId;
            this.ConsumedAt = consumedAt;
            this.ContactId = contactId;
            this.CreatedAt = createdAt;
            this.ExpiresAt = expiresAt;
            this.Id = id;
            this.LoyaltyProgramId = loyaltyProgramId;
            this.OrganizationId = organizationId;
        }
        
        /// <summary>
        /// The current amount available in the balance
        /// </summary>
        /// <value>The current amount available in the balance</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// balance definition ID
        /// </summary>
        /// <value>balance definition ID</value>
        [DataMember(Name="balanceDefinitionId", EmitDefaultValue=false)]
        public string BalanceDefinitionId { get; set; }

        /// <summary>
        /// Timestamp of when the balance was last consumed
        /// </summary>
        /// <value>Timestamp of when the balance was last consumed</value>
        [DataMember(Name="consumedAt", EmitDefaultValue=false)]
        public string ConsumedAt { get; set; }

        /// <summary>
        /// contact ID
        /// </summary>
        /// <value>contact ID</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public int? ContactId { get; set; }

        /// <summary>
        /// Timestamp of when the balance was created
        /// </summary>
        /// <value>Timestamp of when the balance was created</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Expiration timestamp of the balance
        /// </summary>
        /// <value>Expiration timestamp of the balance</value>
        [DataMember(Name="expiresAt", EmitDefaultValue=false)]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Unique identifier for the balance
        /// </summary>
        /// <value>Unique identifier for the balance</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// loyalty program ID
        /// </summary>
        /// <value>loyalty program ID</value>
        [DataMember(Name="loyaltyProgramId", EmitDefaultValue=false)]
        public string LoyaltyProgramId { get; set; }

        /// <summary>
        /// organization ID
        /// </summary>
        /// <value>organization ID</value>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public int? OrganizationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Balance {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BalanceDefinitionId: ").Append(BalanceDefinitionId).Append("\n");
            sb.Append("  ConsumedAt: ").Append(ConsumedAt).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LoyaltyProgramId: ").Append(LoyaltyProgramId).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Balance);
        }

        /// <summary>
        /// Returns true if Balance instances are equal
        /// </summary>
        /// <param name="input">Instance of Balance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Balance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BalanceDefinitionId == input.BalanceDefinitionId ||
                    (this.BalanceDefinitionId != null &&
                    this.BalanceDefinitionId.Equals(input.BalanceDefinitionId))
                ) && 
                (
                    this.ConsumedAt == input.ConsumedAt ||
                    (this.ConsumedAt != null &&
                    this.ConsumedAt.Equals(input.ConsumedAt))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LoyaltyProgramId == input.LoyaltyProgramId ||
                    (this.LoyaltyProgramId != null &&
                    this.LoyaltyProgramId.Equals(input.LoyaltyProgramId))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BalanceDefinitionId != null)
                    hashCode = hashCode * 59 + this.BalanceDefinitionId.GetHashCode();
                if (this.ConsumedAt != null)
                    hashCode = hashCode * 59 + this.ConsumedAt.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LoyaltyProgramId != null)
                    hashCode = hashCode * 59 + this.LoyaltyProgramId.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                return hashCode;
            }
        }
    }

}
