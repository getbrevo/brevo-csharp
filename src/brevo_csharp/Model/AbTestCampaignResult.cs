/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// AbTestCampaignResult
    /// </summary>
    [DataContract]
    public partial class AbTestCampaignResult :  IEquatable<AbTestCampaignResult>
    {
        /// <summary>
        /// Winning Campaign Info. pending &#x3D; Campaign has been picked for sending and winning version is yet to be decided, tie &#x3D; A tie happened between both the versions, notAvailable &#x3D; Campaign has not yet been picked for sending.
        /// </summary>
        /// <value>Winning Campaign Info. pending &#x3D; Campaign has been picked for sending and winning version is yet to be decided, tie &#x3D; A tie happened between both the versions, notAvailable &#x3D; Campaign has not yet been picked for sending.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WinningVersionEnum
        {
            
            /// <summary>
            /// Enum NotAvailable for value: notAvailable
            /// </summary>
            [EnumMember(Value = "notAvailable")]
            NotAvailable = 1,
            
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 2,
            
            /// <summary>
            /// Enum Tie for value: tie
            /// </summary>
            [EnumMember(Value = "tie")]
            Tie = 3,
            
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 4,
            
            /// <summary>
            /// Enum B for value: B
            /// </summary>
            [EnumMember(Value = "B")]
            B = 5
        }

        /// <summary>
        /// Winning Campaign Info. pending &#x3D; Campaign has been picked for sending and winning version is yet to be decided, tie &#x3D; A tie happened between both the versions, notAvailable &#x3D; Campaign has not yet been picked for sending.
        /// </summary>
        /// <value>Winning Campaign Info. pending &#x3D; Campaign has been picked for sending and winning version is yet to be decided, tie &#x3D; A tie happened between both the versions, notAvailable &#x3D; Campaign has not yet been picked for sending.</value>
        [DataMember(Name="winningVersion", EmitDefaultValue=false)]
        public WinningVersionEnum? WinningVersion { get; set; }
        /// <summary>
        /// Criteria choosen for winning version (Open/Click)
        /// </summary>
        /// <value>Criteria choosen for winning version (Open/Click)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WinningCriteriaEnum
        {
            
            /// <summary>
            /// Enum Open for value: Open
            /// </summary>
            [EnumMember(Value = "Open")]
            Open = 1,
            
            /// <summary>
            /// Enum Click for value: Click
            /// </summary>
            [EnumMember(Value = "Click")]
            Click = 2
        }

        /// <summary>
        /// Criteria choosen for winning version (Open/Click)
        /// </summary>
        /// <value>Criteria choosen for winning version (Open/Click)</value>
        [DataMember(Name="winningCriteria", EmitDefaultValue=false)]
        public WinningCriteriaEnum? WinningCriteria { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AbTestCampaignResult" /> class.
        /// </summary>
        /// <param name="winningVersion">Winning Campaign Info. pending &#x3D; Campaign has been picked for sending and winning version is yet to be decided, tie &#x3D; A tie happened between both the versions, notAvailable &#x3D; Campaign has not yet been picked for sending..</param>
        /// <param name="winningCriteria">Criteria choosen for winning version (Open/Click).</param>
        /// <param name="winningSubjectLine">Subject Line of current winning version.</param>
        /// <param name="openRate">Open rate for current winning version.</param>
        /// <param name="clickRate">Click rate for current winning version.</param>
        /// <param name="winningVersionRate">Open/Click rate for the winner version.</param>
        /// <param name="statistics">statistics.</param>
        /// <param name="clickedLinks">clickedLinks.</param>
        public AbTestCampaignResult(WinningVersionEnum? winningVersion = default(WinningVersionEnum?), WinningCriteriaEnum? winningCriteria = default(WinningCriteriaEnum?), string winningSubjectLine = default(string), string openRate = default(string), string clickRate = default(string), string winningVersionRate = default(string), AbTestCampaignResultStatistics statistics = default(AbTestCampaignResultStatistics), AbTestCampaignResultClickedLinks clickedLinks = default(AbTestCampaignResultClickedLinks))
        {
            this.WinningVersion = winningVersion;
            this.WinningCriteria = winningCriteria;
            this.WinningSubjectLine = winningSubjectLine;
            this.OpenRate = openRate;
            this.ClickRate = clickRate;
            this.WinningVersionRate = winningVersionRate;
            this.Statistics = statistics;
            this.ClickedLinks = clickedLinks;
        }
        


        /// <summary>
        /// Subject Line of current winning version
        /// </summary>
        /// <value>Subject Line of current winning version</value>
        [DataMember(Name="winningSubjectLine", EmitDefaultValue=false)]
        public string WinningSubjectLine { get; set; }

        /// <summary>
        /// Open rate for current winning version
        /// </summary>
        /// <value>Open rate for current winning version</value>
        [DataMember(Name="openRate", EmitDefaultValue=false)]
        public string OpenRate { get; set; }

        /// <summary>
        /// Click rate for current winning version
        /// </summary>
        /// <value>Click rate for current winning version</value>
        [DataMember(Name="clickRate", EmitDefaultValue=false)]
        public string ClickRate { get; set; }

        /// <summary>
        /// Open/Click rate for the winner version
        /// </summary>
        /// <value>Open/Click rate for the winner version</value>
        [DataMember(Name="winningVersionRate", EmitDefaultValue=false)]
        public string WinningVersionRate { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [DataMember(Name="statistics", EmitDefaultValue=false)]
        public AbTestCampaignResultStatistics Statistics { get; set; }

        /// <summary>
        /// Gets or Sets ClickedLinks
        /// </summary>
        [DataMember(Name="clickedLinks", EmitDefaultValue=false)]
        public AbTestCampaignResultClickedLinks ClickedLinks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AbTestCampaignResult {\n");
            sb.Append("  WinningVersion: ").Append(WinningVersion).Append("\n");
            sb.Append("  WinningCriteria: ").Append(WinningCriteria).Append("\n");
            sb.Append("  WinningSubjectLine: ").Append(WinningSubjectLine).Append("\n");
            sb.Append("  OpenRate: ").Append(OpenRate).Append("\n");
            sb.Append("  ClickRate: ").Append(ClickRate).Append("\n");
            sb.Append("  WinningVersionRate: ").Append(WinningVersionRate).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("  ClickedLinks: ").Append(ClickedLinks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AbTestCampaignResult);
        }

        /// <summary>
        /// Returns true if AbTestCampaignResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AbTestCampaignResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AbTestCampaignResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WinningVersion == input.WinningVersion ||
                    (this.WinningVersion != null &&
                    this.WinningVersion.Equals(input.WinningVersion))
                ) && 
                (
                    this.WinningCriteria == input.WinningCriteria ||
                    (this.WinningCriteria != null &&
                    this.WinningCriteria.Equals(input.WinningCriteria))
                ) && 
                (
                    this.WinningSubjectLine == input.WinningSubjectLine ||
                    (this.WinningSubjectLine != null &&
                    this.WinningSubjectLine.Equals(input.WinningSubjectLine))
                ) && 
                (
                    this.OpenRate == input.OpenRate ||
                    (this.OpenRate != null &&
                    this.OpenRate.Equals(input.OpenRate))
                ) && 
                (
                    this.ClickRate == input.ClickRate ||
                    (this.ClickRate != null &&
                    this.ClickRate.Equals(input.ClickRate))
                ) && 
                (
                    this.WinningVersionRate == input.WinningVersionRate ||
                    (this.WinningVersionRate != null &&
                    this.WinningVersionRate.Equals(input.WinningVersionRate))
                ) && 
                (
                    this.Statistics == input.Statistics ||
                    (this.Statistics != null &&
                    this.Statistics.Equals(input.Statistics))
                ) && 
                (
                    this.ClickedLinks == input.ClickedLinks ||
                    (this.ClickedLinks != null &&
                    this.ClickedLinks.Equals(input.ClickedLinks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WinningVersion != null)
                    hashCode = hashCode * 59 + this.WinningVersion.GetHashCode();
                if (this.WinningCriteria != null)
                    hashCode = hashCode * 59 + this.WinningCriteria.GetHashCode();
                if (this.WinningSubjectLine != null)
                    hashCode = hashCode * 59 + this.WinningSubjectLine.GetHashCode();
                if (this.OpenRate != null)
                    hashCode = hashCode * 59 + this.OpenRate.GetHashCode();
                if (this.ClickRate != null)
                    hashCode = hashCode * 59 + this.ClickRate.GetHashCode();
                if (this.WinningVersionRate != null)
                    hashCode = hashCode * 59 + this.WinningVersionRate.GetHashCode();
                if (this.Statistics != null)
                    hashCode = hashCode * 59 + this.Statistics.GetHashCode();
                if (this.ClickedLinks != null)
                    hashCode = hashCode * 59 + this.ClickedLinks.GetHashCode();
                return hashCode;
            }
        }
    }

}
