/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Represents a record of a past transaction, including status and key timestamps.
    /// </summary>
    [DataContract]
    public partial class TransactionHistory :  IEquatable<TransactionHistory>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionHistory" /> class.
        /// </summary>
        /// <param name="amount">The transaction amount..</param>
        /// <param name="balanceExpirationDate">Expiration date of the balance associated with this transaction..</param>
        /// <param name="cancelledAt">Timestamp when the transaction was canceled, if applicable..</param>
        /// <param name="completedAt">Timestamp when the transaction was successfully completed..</param>
        /// <param name="createdAt">Timestamp when the transaction was initiated..</param>
        /// <param name="id">Unique identifier of the transaction..</param>
        /// <param name="meta">Optional metadata associated with the transaction..</param>
        /// <param name="rejectReason">Reason for rejection, if the transaction was declined..</param>
        /// <param name="rejectedAt">Timestamp when the transaction was rejected..</param>
        /// <param name="status">Current status of the transaction (e.g., pending, completed, rejected)..</param>
        public TransactionHistory(decimal? amount = default(decimal?), string balanceExpirationDate = default(string), string cancelledAt = default(string), string completedAt = default(string), string createdAt = default(string), string id = default(string), Object meta = default(Object), string rejectReason = default(string), string rejectedAt = default(string), string status = default(string))
        {
            this.Amount = amount;
            this.BalanceExpirationDate = balanceExpirationDate;
            this.CancelledAt = cancelledAt;
            this.CompletedAt = completedAt;
            this.CreatedAt = createdAt;
            this.Id = id;
            this.Meta = meta;
            this.RejectReason = rejectReason;
            this.RejectedAt = rejectedAt;
            this.Status = status;
        }
        
        /// <summary>
        /// The transaction amount.
        /// </summary>
        /// <value>The transaction amount.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Expiration date of the balance associated with this transaction.
        /// </summary>
        /// <value>Expiration date of the balance associated with this transaction.</value>
        [DataMember(Name="balanceExpirationDate", EmitDefaultValue=false)]
        public string BalanceExpirationDate { get; set; }

        /// <summary>
        /// Timestamp when the transaction was canceled, if applicable.
        /// </summary>
        /// <value>Timestamp when the transaction was canceled, if applicable.</value>
        [DataMember(Name="cancelledAt", EmitDefaultValue=false)]
        public string CancelledAt { get; set; }

        /// <summary>
        /// Timestamp when the transaction was successfully completed.
        /// </summary>
        /// <value>Timestamp when the transaction was successfully completed.</value>
        [DataMember(Name="completedAt", EmitDefaultValue=false)]
        public string CompletedAt { get; set; }

        /// <summary>
        /// Timestamp when the transaction was initiated.
        /// </summary>
        /// <value>Timestamp when the transaction was initiated.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Unique identifier of the transaction.
        /// </summary>
        /// <value>Unique identifier of the transaction.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Optional metadata associated with the transaction.
        /// </summary>
        /// <value>Optional metadata associated with the transaction.</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Object Meta { get; set; }

        /// <summary>
        /// Reason for rejection, if the transaction was declined.
        /// </summary>
        /// <value>Reason for rejection, if the transaction was declined.</value>
        [DataMember(Name="rejectReason", EmitDefaultValue=false)]
        public string RejectReason { get; set; }

        /// <summary>
        /// Timestamp when the transaction was rejected.
        /// </summary>
        /// <value>Timestamp when the transaction was rejected.</value>
        [DataMember(Name="rejectedAt", EmitDefaultValue=false)]
        public string RejectedAt { get; set; }

        /// <summary>
        /// Current status of the transaction (e.g., pending, completed, rejected).
        /// </summary>
        /// <value>Current status of the transaction (e.g., pending, completed, rejected).</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionHistory {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BalanceExpirationDate: ").Append(BalanceExpirationDate).Append("\n");
            sb.Append("  CancelledAt: ").Append(CancelledAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  RejectReason: ").Append(RejectReason).Append("\n");
            sb.Append("  RejectedAt: ").Append(RejectedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionHistory);
        }

        /// <summary>
        /// Returns true if TransactionHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BalanceExpirationDate == input.BalanceExpirationDate ||
                    (this.BalanceExpirationDate != null &&
                    this.BalanceExpirationDate.Equals(input.BalanceExpirationDate))
                ) && 
                (
                    this.CancelledAt == input.CancelledAt ||
                    (this.CancelledAt != null &&
                    this.CancelledAt.Equals(input.CancelledAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.RejectReason == input.RejectReason ||
                    (this.RejectReason != null &&
                    this.RejectReason.Equals(input.RejectReason))
                ) && 
                (
                    this.RejectedAt == input.RejectedAt ||
                    (this.RejectedAt != null &&
                    this.RejectedAt.Equals(input.RejectedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BalanceExpirationDate != null)
                    hashCode = hashCode * 59 + this.BalanceExpirationDate.GetHashCode();
                if (this.CancelledAt != null)
                    hashCode = hashCode * 59 + this.CancelledAt.GetHashCode();
                if (this.CompletedAt != null)
                    hashCode = hashCode * 59 + this.CompletedAt.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.RejectReason != null)
                    hashCode = hashCode * 59 + this.RejectReason.GetHashCode();
                if (this.RejectedAt != null)
                    hashCode = hashCode * 59 + this.RejectedAt.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }
    }

}
