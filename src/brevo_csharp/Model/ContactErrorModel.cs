/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// ContactErrorModel
    /// </summary>
    [DataContract]
    public partial class ContactErrorModel :  IEquatable<ContactErrorModel>
    {
        /// <summary>
        /// Error code displayed in case of a failure
        /// </summary>
        /// <value>Error code displayed in case of a failure</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            
            /// <summary>
            /// Enum Invalidparameter for value: invalid_parameter
            /// </summary>
            [EnumMember(Value = "invalid_parameter")]
            Invalidparameter = 1,
            
            /// <summary>
            /// Enum Missingparameter for value: missing_parameter
            /// </summary>
            [EnumMember(Value = "missing_parameter")]
            Missingparameter = 2,
            
            /// <summary>
            /// Enum Documentnotfound for value: document_not_found
            /// </summary>
            [EnumMember(Value = "document_not_found")]
            Documentnotfound = 3,
            
            /// <summary>
            /// Enum Accountinprocess for value: account_in_process
            /// </summary>
            [EnumMember(Value = "account_in_process")]
            Accountinprocess = 4,
            
            /// <summary>
            /// Enum Duplicateparameter for value: duplicate_parameter
            /// </summary>
            [EnumMember(Value = "duplicate_parameter")]
            Duplicateparameter = 5,
            
            /// <summary>
            /// Enum Methodnotallowed for value: method_not_allowed
            /// </summary>
            [EnumMember(Value = "method_not_allowed")]
            Methodnotallowed = 6,
            
            /// <summary>
            /// Enum Outofrange for value: out_of_range
            /// </summary>
            [EnumMember(Value = "out_of_range")]
            Outofrange = 7
        }

        /// <summary>
        /// Error code displayed in case of a failure
        /// </summary>
        /// <value>Error code displayed in case of a failure</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public CodeEnum Code { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactErrorModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactErrorModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactErrorModel" /> class.
        /// </summary>
        /// <param name="code">Error code displayed in case of a failure (required).</param>
        /// <param name="message">Readable message associated to the failure (required).</param>
        /// <param name="metadata">Additional information about the error.</param>
        public ContactErrorModel(CodeEnum code = default(CodeEnum), string message = default(string), Object metadata = default(Object))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for ContactErrorModel and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for ContactErrorModel and cannot be null");
            }
            else
            {
                this.Message = message;
            }
            this.Metadata = metadata;
        }
        

        /// <summary>
        /// Readable message associated to the failure
        /// </summary>
        /// <value>Readable message associated to the failure</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Additional information about the error
        /// </summary>
        /// <value>Additional information about the error</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactErrorModel {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactErrorModel);
        }

        /// <summary>
        /// Returns true if ContactErrorModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactErrorModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactErrorModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }
    }

}
