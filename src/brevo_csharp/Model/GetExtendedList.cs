/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetExtendedList
    /// </summary>
    [DataContract]
    public partial class GetExtendedList :  IEquatable<GetExtendedList>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExtendedList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetExtendedList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExtendedList" /> class.
        /// </summary>
        /// <param name="id">ID of the list (required).</param>
        /// <param name="name">Name of the list (required).</param>
        /// <param name="totalBlacklisted">Number of blacklisted contacts in the list (required).</param>
        /// <param name="totalSubscribers">Number of contacts in the list (required).</param>
        /// <param name="uniqueSubscribers">Number of unique contacts in the list (required).</param>
        /// <param name="folderId">ID of the folder (required).</param>
        /// <param name="createdAt">Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ) (required).</param>
        /// <param name="campaignStats">campaignStats.</param>
        /// <param name="dynamicList">Status telling if the list is dynamic or not (true&#x3D;dynamic, false&#x3D;not dynamic).</param>
        public GetExtendedList(long? id = default(long?), string name = default(string), long? totalBlacklisted = default(long?), long? totalSubscribers = default(long?), long? uniqueSubscribers = default(long?), long? folderId = default(long?), string createdAt = default(string), List<GetExtendedListCampaignStats> campaignStats = default(List<GetExtendedListCampaignStats>), bool? dynamicList = default(bool?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for GetExtendedList and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GetExtendedList and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "totalBlacklisted" is required (not null)
            if (totalBlacklisted == null)
            {
                throw new InvalidDataException("totalBlacklisted is a required property for GetExtendedList and cannot be null");
            }
            else
            {
                this.TotalBlacklisted = totalBlacklisted;
            }
            // to ensure "totalSubscribers" is required (not null)
            if (totalSubscribers == null)
            {
                throw new InvalidDataException("totalSubscribers is a required property for GetExtendedList and cannot be null");
            }
            else
            {
                this.TotalSubscribers = totalSubscribers;
            }
            // to ensure "uniqueSubscribers" is required (not null)
            if (uniqueSubscribers == null)
            {
                throw new InvalidDataException("uniqueSubscribers is a required property for GetExtendedList and cannot be null");
            }
            else
            {
                this.UniqueSubscribers = uniqueSubscribers;
            }
            // to ensure "folderId" is required (not null)
            if (folderId == null)
            {
                throw new InvalidDataException("folderId is a required property for GetExtendedList and cannot be null");
            }
            else
            {
                this.FolderId = folderId;
            }
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for GetExtendedList and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
            this.CampaignStats = campaignStats;
            this.DynamicList = dynamicList;
        }
        
        /// <summary>
        /// ID of the list
        /// </summary>
        /// <value>ID of the list</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Name of the list
        /// </summary>
        /// <value>Name of the list</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Number of blacklisted contacts in the list
        /// </summary>
        /// <value>Number of blacklisted contacts in the list</value>
        [DataMember(Name="totalBlacklisted", EmitDefaultValue=false)]
        public long? TotalBlacklisted { get; set; }

        /// <summary>
        /// Number of contacts in the list
        /// </summary>
        /// <value>Number of contacts in the list</value>
        [DataMember(Name="totalSubscribers", EmitDefaultValue=false)]
        public long? TotalSubscribers { get; set; }

        /// <summary>
        /// Number of unique contacts in the list
        /// </summary>
        /// <value>Number of unique contacts in the list</value>
        [DataMember(Name="uniqueSubscribers", EmitDefaultValue=false)]
        public long? UniqueSubscribers { get; set; }

        /// <summary>
        /// ID of the folder
        /// </summary>
        /// <value>ID of the folder</value>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public long? FolderId { get; set; }

        /// <summary>
        /// Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CampaignStats
        /// </summary>
        [DataMember(Name="campaignStats", EmitDefaultValue=false)]
        public List<GetExtendedListCampaignStats> CampaignStats { get; set; }

        /// <summary>
        /// Status telling if the list is dynamic or not (true&#x3D;dynamic, false&#x3D;not dynamic)
        /// </summary>
        /// <value>Status telling if the list is dynamic or not (true&#x3D;dynamic, false&#x3D;not dynamic)</value>
        [DataMember(Name="dynamicList", EmitDefaultValue=false)]
        public bool? DynamicList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetExtendedList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TotalBlacklisted: ").Append(TotalBlacklisted).Append("\n");
            sb.Append("  TotalSubscribers: ").Append(TotalSubscribers).Append("\n");
            sb.Append("  UniqueSubscribers: ").Append(UniqueSubscribers).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CampaignStats: ").Append(CampaignStats).Append("\n");
            sb.Append("  DynamicList: ").Append(DynamicList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetExtendedList);
        }

        /// <summary>
        /// Returns true if GetExtendedList instances are equal
        /// </summary>
        /// <param name="input">Instance of GetExtendedList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetExtendedList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TotalBlacklisted == input.TotalBlacklisted ||
                    (this.TotalBlacklisted != null &&
                    this.TotalBlacklisted.Equals(input.TotalBlacklisted))
                ) && 
                (
                    this.TotalSubscribers == input.TotalSubscribers ||
                    (this.TotalSubscribers != null &&
                    this.TotalSubscribers.Equals(input.TotalSubscribers))
                ) && 
                (
                    this.UniqueSubscribers == input.UniqueSubscribers ||
                    (this.UniqueSubscribers != null &&
                    this.UniqueSubscribers.Equals(input.UniqueSubscribers))
                ) && 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CampaignStats == input.CampaignStats ||
                    this.CampaignStats != null &&
                    this.CampaignStats.SequenceEqual(input.CampaignStats)
                ) && 
                (
                    this.DynamicList == input.DynamicList ||
                    (this.DynamicList != null &&
                    this.DynamicList.Equals(input.DynamicList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TotalBlacklisted != null)
                    hashCode = hashCode * 59 + this.TotalBlacklisted.GetHashCode();
                if (this.TotalSubscribers != null)
                    hashCode = hashCode * 59 + this.TotalSubscribers.GetHashCode();
                if (this.UniqueSubscribers != null)
                    hashCode = hashCode * 59 + this.UniqueSubscribers.GetHashCode();
                if (this.FolderId != null)
                    hashCode = hashCode * 59 + this.FolderId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CampaignStats != null)
                    hashCode = hashCode * 59 + this.CampaignStats.GetHashCode();
                if (this.DynamicList != null)
                    hashCode = hashCode * 59 + this.DynamicList.GetHashCode();
                return hashCode;
            }
        }
    }

}
