/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// LoyaltyProgram
    /// </summary>
    [DataContract]
    public partial class LoyaltyProgram :  IEquatable<LoyaltyProgram>
    {
        /// <summary>
        /// Loyalty Program state
        /// </summary>
        /// <value>Loyalty Program state</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Inactive for value: inactive
            /// </summary>
            [EnumMember(Value = "inactive")]
            Inactive = 1,
            
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 2
        }

        /// <summary>
        /// Loyalty Program state
        /// </summary>
        /// <value>Loyalty Program state</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyProgram" /> class.
        /// </summary>
        /// <param name="codeCount">Loyalty Program code count.</param>
        /// <param name="createdAt">Loyalty Program creation date.</param>
        /// <param name="description">Loyalty Program description.</param>
        /// <param name="documentId">string.</param>
        /// <param name="id">Loyalty Program ID.</param>
        /// <param name="meta">Loyalty Program meta data.</param>
        /// <param name="name">Loyalty Program name.</param>
        /// <param name="pattern">string.</param>
        /// <param name="state">Loyalty Program state.</param>
        /// <param name="subscriptionGeneratorId">Loyalty Program subscription generator ID.</param>
        /// <param name="subscriptionPoolId">Loyalty Program subscription pool ID.</param>
        /// <param name="updatedAt">Loyalty Program last modification date.</param>
        public LoyaltyProgram(int? codeCount = default(int?), string createdAt = default(string), string description = default(string), string documentId = default(string), string id = default(string), Dictionary<string, Object> meta = default(Dictionary<string, Object>), string name = default(string), string pattern = default(string), StateEnum? state = default(StateEnum?), string subscriptionGeneratorId = default(string), string subscriptionPoolId = default(string), string updatedAt = default(string))
        {
            this.CodeCount = codeCount;
            this.CreatedAt = createdAt;
            this.Description = description;
            this.DocumentId = documentId;
            this.Id = id;
            this.Meta = meta;
            this.Name = name;
            this.Pattern = pattern;
            this.State = state;
            this.SubscriptionGeneratorId = subscriptionGeneratorId;
            this.SubscriptionPoolId = subscriptionPoolId;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Loyalty Program code count
        /// </summary>
        /// <value>Loyalty Program code count</value>
        [DataMember(Name="codeCount", EmitDefaultValue=false)]
        public int? CodeCount { get; set; }

        /// <summary>
        /// Loyalty Program creation date
        /// </summary>
        /// <value>Loyalty Program creation date</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Loyalty Program description
        /// </summary>
        /// <value>Loyalty Program description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// string
        /// </summary>
        /// <value>string</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Loyalty Program ID
        /// </summary>
        /// <value>Loyalty Program ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Loyalty Program meta data
        /// </summary>
        /// <value>Loyalty Program meta data</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Dictionary<string, Object> Meta { get; set; }

        /// <summary>
        /// Loyalty Program name
        /// </summary>
        /// <value>Loyalty Program name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// string
        /// </summary>
        /// <value>string</value>
        [DataMember(Name="pattern", EmitDefaultValue=false)]
        public string Pattern { get; set; }


        /// <summary>
        /// Loyalty Program subscription generator ID
        /// </summary>
        /// <value>Loyalty Program subscription generator ID</value>
        [DataMember(Name="subscriptionGeneratorId", EmitDefaultValue=false)]
        public string SubscriptionGeneratorId { get; set; }

        /// <summary>
        /// Loyalty Program subscription pool ID
        /// </summary>
        /// <value>Loyalty Program subscription pool ID</value>
        [DataMember(Name="subscriptionPoolId", EmitDefaultValue=false)]
        public string SubscriptionPoolId { get; set; }

        /// <summary>
        /// Loyalty Program last modification date
        /// </summary>
        /// <value>Loyalty Program last modification date</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoyaltyProgram {\n");
            sb.Append("  CodeCount: ").Append(CodeCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SubscriptionGeneratorId: ").Append(SubscriptionGeneratorId).Append("\n");
            sb.Append("  SubscriptionPoolId: ").Append(SubscriptionPoolId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoyaltyProgram);
        }

        /// <summary>
        /// Returns true if LoyaltyProgram instances are equal
        /// </summary>
        /// <param name="input">Instance of LoyaltyProgram to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyProgram input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodeCount == input.CodeCount ||
                    (this.CodeCount != null &&
                    this.CodeCount.Equals(input.CodeCount))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.SubscriptionGeneratorId == input.SubscriptionGeneratorId ||
                    (this.SubscriptionGeneratorId != null &&
                    this.SubscriptionGeneratorId.Equals(input.SubscriptionGeneratorId))
                ) && 
                (
                    this.SubscriptionPoolId == input.SubscriptionPoolId ||
                    (this.SubscriptionPoolId != null &&
                    this.SubscriptionPoolId.Equals(input.SubscriptionPoolId))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodeCount != null)
                    hashCode = hashCode * 59 + this.CodeCount.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Pattern != null)
                    hashCode = hashCode * 59 + this.Pattern.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.SubscriptionGeneratorId != null)
                    hashCode = hashCode * 59 + this.SubscriptionGeneratorId.GetHashCode();
                if (this.SubscriptionPoolId != null)
                    hashCode = hashCode * 59 + this.SubscriptionPoolId.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
