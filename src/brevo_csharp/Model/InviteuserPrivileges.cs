/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Privileges given to the user
    /// </summary>
    [DataContract]
    public partial class InviteuserPrivileges :  IEquatable<InviteuserPrivileges>
    {
        /// <summary>
        /// Feature name
        /// </summary>
        /// <value>Feature name</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FeatureEnum
        {
            
            /// <summary>
            /// Enum Emailcampaigns for value: email_campaigns
            /// </summary>
            [EnumMember(Value = "email_campaigns")]
            Emailcampaigns = 1,
            
            /// <summary>
            /// Enum Smscampaigns for value: sms_campaigns
            /// </summary>
            [EnumMember(Value = "sms_campaigns")]
            Smscampaigns = 2,
            
            /// <summary>
            /// Enum Contacts for value: contacts
            /// </summary>
            [EnumMember(Value = "contacts")]
            Contacts = 3,
            
            /// <summary>
            /// Enum Templates for value: templates
            /// </summary>
            [EnumMember(Value = "templates")]
            Templates = 4,
            
            /// <summary>
            /// Enum Workflows for value: workflows
            /// </summary>
            [EnumMember(Value = "workflows")]
            Workflows = 5,
            
            /// <summary>
            /// Enum Facebookads for value: facebook_ads
            /// </summary>
            [EnumMember(Value = "facebook_ads")]
            Facebookads = 6,
            
            /// <summary>
            /// Enum Landingpages for value: landing_pages
            /// </summary>
            [EnumMember(Value = "landing_pages")]
            Landingpages = 7,
            
            /// <summary>
            /// Enum Transactionalemails for value: transactional_emails
            /// </summary>
            [EnumMember(Value = "transactional_emails")]
            Transactionalemails = 8,
            
            /// <summary>
            /// Enum Smtpapi for value: smtp_api
            /// </summary>
            [EnumMember(Value = "smtp_api")]
            Smtpapi = 9,
            
            /// <summary>
            /// Enum Usermanagement for value: user_management
            /// </summary>
            [EnumMember(Value = "user_management")]
            Usermanagement = 10,
            
            /// <summary>
            /// Enum Salesplatform for value: sales_platform
            /// </summary>
            [EnumMember(Value = "sales_platform")]
            Salesplatform = 11,
            
            /// <summary>
            /// Enum Phone for value: phone
            /// </summary>
            [EnumMember(Value = "phone")]
            Phone = 12,
            
            /// <summary>
            /// Enum Conversations for value: conversations
            /// </summary>
            [EnumMember(Value = "conversations")]
            Conversations = 13,
            
            /// <summary>
            /// Enum Sendersdomainsdedicatedips for value: senders_domains_dedicated_ips
            /// </summary>
            [EnumMember(Value = "senders_domains_dedicated_ips")]
            Sendersdomainsdedicatedips = 14,
            
            /// <summary>
            /// Enum Pushnotifications for value: push_notifications
            /// </summary>
            [EnumMember(Value = "push_notifications")]
            Pushnotifications = 15
        }

        /// <summary>
        /// Feature name
        /// </summary>
        /// <value>Feature name</value>
        [DataMember(Name="feature", EmitDefaultValue=false)]
        public FeatureEnum? Feature { get; set; }
        /// <summary>
        /// Defines Permissions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PermissionsEnum
        {
            
            /// <summary>
            /// Enum Createeditdelete for value: create_edit_delete
            /// </summary>
            [EnumMember(Value = "create_edit_delete")]
            Createeditdelete = 1,
            
            /// <summary>
            /// Enum Sendschedulesuspend for value: send_schedule_suspend
            /// </summary>
            [EnumMember(Value = "send_schedule_suspend")]
            Sendschedulesuspend = 2,
            
            /// <summary>
            /// Enum View for value: view
            /// </summary>
            [EnumMember(Value = "view")]
            View = 3,
            
            /// <summary>
            /// Enum Import for value: import
            /// </summary>
            [EnumMember(Value = "import")]
            Import = 4,
            
            /// <summary>
            /// Enum Export for value: export
            /// </summary>
            [EnumMember(Value = "export")]
            Export = 5,
            
            /// <summary>
            /// Enum Listandattributes for value: list_and_attributes
            /// </summary>
            [EnumMember(Value = "list_and_attributes")]
            Listandattributes = 6,
            
            /// <summary>
            /// Enum Forms for value: forms
            /// </summary>
            [EnumMember(Value = "forms")]
            Forms = 7,
            
            /// <summary>
            /// Enum Activatedeactivate for value: activate_deactivate
            /// </summary>
            [EnumMember(Value = "activate_deactivate")]
            Activatedeactivate = 8,
            
            /// <summary>
            /// Enum Activatedeactivatepause for value: activate_deactivate_pause
            /// </summary>
            [EnumMember(Value = "activate_deactivate_pause")]
            Activatedeactivatepause = 9,
            
            /// <summary>
            /// Enum Settings for value: settings
            /// </summary>
            [EnumMember(Value = "settings")]
            Settings = 10,
            
            /// <summary>
            /// Enum Schedulepause for value: schedule_pause
            /// </summary>
            [EnumMember(Value = "schedule_pause")]
            Schedulepause = 11,
            
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 12,
            
            /// <summary>
            /// Enum Logs for value: logs
            /// </summary>
            [EnumMember(Value = "logs")]
            Logs = 13,
            
            /// <summary>
            /// Enum Access for value: access
            /// </summary>
            [EnumMember(Value = "access")]
            Access = 14,
            
            /// <summary>
            /// Enum Assign for value: assign
            /// </summary>
            [EnumMember(Value = "assign")]
            Assign = 15,
            
            /// <summary>
            /// Enum Configure for value: configure
            /// </summary>
            [EnumMember(Value = "configure")]
            Configure = 16,
            
            /// <summary>
            /// Enum Manageowneddealstaskscompanies for value: manage_owned_deals_tasks_companies
            /// </summary>
            [EnumMember(Value = "manage_owned_deals_tasks_companies")]
            Manageowneddealstaskscompanies = 17,
            
            /// <summary>
            /// Enum Manageothersdealstaskscompanies for value: manage_others_deals_tasks_companies
            /// </summary>
            [EnumMember(Value = "manage_others_deals_tasks_companies")]
            Manageothersdealstaskscompanies = 18,
            
            /// <summary>
            /// Enum Reports for value: reports
            /// </summary>
            [EnumMember(Value = "reports")]
            Reports = 19,
            
            /// <summary>
            /// Enum Sendersmanagement for value: senders_management
            /// </summary>
            [EnumMember(Value = "senders_management")]
            Sendersmanagement = 20,
            
            /// <summary>
            /// Enum Domainsmanagement for value: domains_management
            /// </summary>
            [EnumMember(Value = "domains_management")]
            Domainsmanagement = 21,
            
            /// <summary>
            /// Enum Dedicatedipsmanagement for value: dedicated_ips_management
            /// </summary>
            [EnumMember(Value = "dedicated_ips_management")]
            Dedicatedipsmanagement = 22,
            
            /// <summary>
            /// Enum Send for value: send
            /// </summary>
            [EnumMember(Value = "send")]
            Send = 23,
            
            /// <summary>
            /// Enum Smtp for value: smtp
            /// </summary>
            [EnumMember(Value = "smtp")]
            Smtp = 24,
            
            /// <summary>
            /// Enum Apikeys for value: apiKeys
            /// </summary>
            [EnumMember(Value = "apiKeys")]
            Apikeys = 25,
            
            /// <summary>
            /// Enum Authorizedips for value: authorized_ips
            /// </summary>
            [EnumMember(Value = "authorized_ips")]
            Authorizedips = 26,
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 27
        }


        /// <summary>
        /// Permissions for a given feature
        /// </summary>
        /// <value>Permissions for a given feature</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<PermissionsEnum> Permissions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteuserPrivileges" /> class.
        /// </summary>
        /// <param name="feature">Feature name.</param>
        /// <param name="permissions">Permissions for a given feature.</param>
        public InviteuserPrivileges(FeatureEnum? feature = default(FeatureEnum?), List<PermissionsEnum> permissions = default(List<PermissionsEnum>))
        {
            this.Feature = feature;
            this.Permissions = permissions;
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InviteuserPrivileges {\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InviteuserPrivileges);
        }

        /// <summary>
        /// Returns true if InviteuserPrivileges instances are equal
        /// </summary>
        /// <param name="input">Instance of InviteuserPrivileges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InviteuserPrivileges input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Feature == input.Feature ||
                    (this.Feature != null &&
                    this.Feature.Equals(input.Feature))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Feature != null)
                    hashCode = hashCode * 59 + this.Feature.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                return hashCode;
            }
        }
    }

}
