/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// BalanceLimit
    /// </summary>
    [DataContract]
    public partial class BalanceLimit :  IEquatable<BalanceLimit>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceLimit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BalanceLimit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceLimit" /> class.
        /// </summary>
        /// <param name="balanceDefinitionId">balance definition ID.</param>
        /// <param name="constraintType">Defines the type of constraint (e.g., transaction-based or amount-based)..</param>
        /// <param name="createdAt">Timestamp of when the balance limit was created. (required).</param>
        /// <param name="durationUnit">Time unit for the balance limit (day, week, month, year)..</param>
        /// <param name="durationValue">Number of time units the balance limit applies to..</param>
        /// <param name="id">Unique identifier for the balance limit..</param>
        /// <param name="slidingSchedule">Indicates if the limit resets periodically based on a sliding schedule..</param>
        /// <param name="transactionType">Specifies whether the limit applies to credit or debit transactions..</param>
        /// <param name="updatedAt">Timestamp of the last update to the balance limit. (required).</param>
        /// <param name="value">The maximum allowed value for the defined constraint..</param>
        public BalanceLimit(string balanceDefinitionId = default(string), string constraintType = default(string), string createdAt = default(string), string durationUnit = default(string), int? durationValue = default(int?), string id = default(string), bool? slidingSchedule = default(bool?), string transactionType = default(string), string updatedAt = default(string), int? value = default(int?))
        {
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for BalanceLimit and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new InvalidDataException("updatedAt is a required property for BalanceLimit and cannot be null");
            }
            else
            {
                this.UpdatedAt = updatedAt;
            }
            this.BalanceDefinitionId = balanceDefinitionId;
            this.ConstraintType = constraintType;
            this.DurationUnit = durationUnit;
            this.DurationValue = durationValue;
            this.Id = id;
            this.SlidingSchedule = slidingSchedule;
            this.TransactionType = transactionType;
            this.Value = value;
        }
        
        /// <summary>
        /// balance definition ID
        /// </summary>
        /// <value>balance definition ID</value>
        [DataMember(Name="balanceDefinitionId", EmitDefaultValue=false)]
        public string BalanceDefinitionId { get; set; }

        /// <summary>
        /// Defines the type of constraint (e.g., transaction-based or amount-based).
        /// </summary>
        /// <value>Defines the type of constraint (e.g., transaction-based or amount-based).</value>
        [DataMember(Name="constraintType", EmitDefaultValue=false)]
        public string ConstraintType { get; set; }

        /// <summary>
        /// Timestamp of when the balance limit was created.
        /// </summary>
        /// <value>Timestamp of when the balance limit was created.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Time unit for the balance limit (day, week, month, year).
        /// </summary>
        /// <value>Time unit for the balance limit (day, week, month, year).</value>
        [DataMember(Name="durationUnit", EmitDefaultValue=false)]
        public string DurationUnit { get; set; }

        /// <summary>
        /// Number of time units the balance limit applies to.
        /// </summary>
        /// <value>Number of time units the balance limit applies to.</value>
        [DataMember(Name="durationValue", EmitDefaultValue=false)]
        public int? DurationValue { get; set; }

        /// <summary>
        /// Unique identifier for the balance limit.
        /// </summary>
        /// <value>Unique identifier for the balance limit.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates if the limit resets periodically based on a sliding schedule.
        /// </summary>
        /// <value>Indicates if the limit resets periodically based on a sliding schedule.</value>
        [DataMember(Name="slidingSchedule", EmitDefaultValue=false)]
        public bool? SlidingSchedule { get; set; }

        /// <summary>
        /// Specifies whether the limit applies to credit or debit transactions.
        /// </summary>
        /// <value>Specifies whether the limit applies to credit or debit transactions.</value>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Timestamp of the last update to the balance limit.
        /// </summary>
        /// <value>Timestamp of the last update to the balance limit.</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// The maximum allowed value for the defined constraint.
        /// </summary>
        /// <value>The maximum allowed value for the defined constraint.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public int? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BalanceLimit {\n");
            sb.Append("  BalanceDefinitionId: ").Append(BalanceDefinitionId).Append("\n");
            sb.Append("  ConstraintType: ").Append(ConstraintType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DurationUnit: ").Append(DurationUnit).Append("\n");
            sb.Append("  DurationValue: ").Append(DurationValue).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SlidingSchedule: ").Append(SlidingSchedule).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BalanceLimit);
        }

        /// <summary>
        /// Returns true if BalanceLimit instances are equal
        /// </summary>
        /// <param name="input">Instance of BalanceLimit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BalanceLimit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BalanceDefinitionId == input.BalanceDefinitionId ||
                    (this.BalanceDefinitionId != null &&
                    this.BalanceDefinitionId.Equals(input.BalanceDefinitionId))
                ) && 
                (
                    this.ConstraintType == input.ConstraintType ||
                    (this.ConstraintType != null &&
                    this.ConstraintType.Equals(input.ConstraintType))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DurationUnit == input.DurationUnit ||
                    (this.DurationUnit != null &&
                    this.DurationUnit.Equals(input.DurationUnit))
                ) && 
                (
                    this.DurationValue == input.DurationValue ||
                    (this.DurationValue != null &&
                    this.DurationValue.Equals(input.DurationValue))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SlidingSchedule == input.SlidingSchedule ||
                    (this.SlidingSchedule != null &&
                    this.SlidingSchedule.Equals(input.SlidingSchedule))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BalanceDefinitionId != null)
                    hashCode = hashCode * 59 + this.BalanceDefinitionId.GetHashCode();
                if (this.ConstraintType != null)
                    hashCode = hashCode * 59 + this.ConstraintType.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DurationUnit != null)
                    hashCode = hashCode * 59 + this.DurationUnit.GetHashCode();
                if (this.DurationValue != null)
                    hashCode = hashCode * 59 + this.DurationValue.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SlidingSchedule != null)
                    hashCode = hashCode * 59 + this.SlidingSchedule.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }
    }

}
