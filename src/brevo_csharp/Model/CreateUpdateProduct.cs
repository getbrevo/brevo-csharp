/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// CreateUpdateProduct
    /// </summary>
    [DataContract]
    public partial class CreateUpdateProduct :  IEquatable<CreateUpdateProduct>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUpdateProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateUpdateProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUpdateProduct" /> class.
        /// </summary>
        /// <param name="id">Product ID for which you requested the details (required).</param>
        /// <param name="name">Mandatory in case of creation**. Name of the product for which you requested the details (required).</param>
        /// <param name="url">URL to the product.</param>
        /// <param name="imageUrl">Absolute URL to the cover image of the product.</param>
        /// <param name="sku">Product identifier from the shop.</param>
        /// <param name="price">Price of the product.</param>
        /// <param name="categories">Category ID-s of the product.</param>
        /// <param name="parentId">Parent product id of the product.</param>
        /// <param name="metaInfo">Meta data of product such as description, vendor, producer, stock level. The size of cumulative metaInfo shall not exceed **1000 KB**. Maximum length of metaInfo object can be 20..</param>
        /// <param name="updateEnabled">Facilitate to update the existing category in the same request (updateEnabled &#x3D; true) (default to false).</param>
        /// <param name="deletedAt">UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from the shop&#39;s database.</param>
        /// <param name="isDeleted">product deleted from the shop&#39;s database.</param>
        public CreateUpdateProduct(string id = default(string), string name = default(string), string url = default(string), string imageUrl = default(string), string sku = default(string), float? price = default(float?), List<string> categories = default(List<string>), string parentId = default(string), Dictionary<string, string> metaInfo = default(Dictionary<string, string>), bool? updateEnabled = false, string deletedAt = default(string), bool? isDeleted = default(bool?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for CreateUpdateProduct and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreateUpdateProduct and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Url = url;
            this.ImageUrl = imageUrl;
            this.Sku = sku;
            this.Price = price;
            this.Categories = categories;
            this.ParentId = parentId;
            this.MetaInfo = metaInfo;
            // use default value if no "updateEnabled" provided
            if (updateEnabled == null)
            {
                this.UpdateEnabled = false;
            }
            else
            {
                this.UpdateEnabled = updateEnabled;
            }
            this.DeletedAt = deletedAt;
            this.IsDeleted = isDeleted;
        }
        
        /// <summary>
        /// Product ID for which you requested the details
        /// </summary>
        /// <value>Product ID for which you requested the details</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Mandatory in case of creation**. Name of the product for which you requested the details
        /// </summary>
        /// <value>Mandatory in case of creation**. Name of the product for which you requested the details</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// URL to the product
        /// </summary>
        /// <value>URL to the product</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Absolute URL to the cover image of the product
        /// </summary>
        /// <value>Absolute URL to the cover image of the product</value>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Product identifier from the shop
        /// </summary>
        /// <value>Product identifier from the shop</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Price of the product
        /// </summary>
        /// <value>Price of the product</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public float? Price { get; set; }

        /// <summary>
        /// Category ID-s of the product
        /// </summary>
        /// <value>Category ID-s of the product</value>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Parent product id of the product
        /// </summary>
        /// <value>Parent product id of the product</value>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Meta data of product such as description, vendor, producer, stock level. The size of cumulative metaInfo shall not exceed **1000 KB**. Maximum length of metaInfo object can be 20.
        /// </summary>
        /// <value>Meta data of product such as description, vendor, producer, stock level. The size of cumulative metaInfo shall not exceed **1000 KB**. Maximum length of metaInfo object can be 20.</value>
        [DataMember(Name="metaInfo", EmitDefaultValue=false)]
        public Dictionary<string, string> MetaInfo { get; set; }

        /// <summary>
        /// Facilitate to update the existing category in the same request (updateEnabled &#x3D; true)
        /// </summary>
        /// <value>Facilitate to update the existing category in the same request (updateEnabled &#x3D; true)</value>
        [DataMember(Name="updateEnabled", EmitDefaultValue=false)]
        public bool? UpdateEnabled { get; set; }

        /// <summary>
        /// UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from the shop&#39;s database
        /// </summary>
        /// <value>UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from the shop&#39;s database</value>
        [DataMember(Name="deletedAt", EmitDefaultValue=false)]
        public string DeletedAt { get; set; }

        /// <summary>
        /// product deleted from the shop&#39;s database
        /// </summary>
        /// <value>product deleted from the shop&#39;s database</value>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateUpdateProduct {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  MetaInfo: ").Append(MetaInfo).Append("\n");
            sb.Append("  UpdateEnabled: ").Append(UpdateEnabled).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateUpdateProduct);
        }

        /// <summary>
        /// Returns true if CreateUpdateProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateUpdateProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUpdateProduct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.MetaInfo == input.MetaInfo ||
                    this.MetaInfo != null &&
                    this.MetaInfo.SequenceEqual(input.MetaInfo)
                ) && 
                (
                    this.UpdateEnabled == input.UpdateEnabled ||
                    (this.UpdateEnabled != null &&
                    this.UpdateEnabled.Equals(input.UpdateEnabled))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.MetaInfo != null)
                    hashCode = hashCode * 59 + this.MetaInfo.GetHashCode();
                if (this.UpdateEnabled != null)
                    hashCode = hashCode * 59 + this.UpdateEnabled.GetHashCode();
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                return hashCode;
            }
        }
    }

}
