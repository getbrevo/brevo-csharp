/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// MainValueResponse
    /// </summary>
    [DataContract]
    public partial class MainValueResponse :  IEquatable<MainValueResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainValueResponse" /> class.
        /// </summary>
        /// <param name="array">Array values to define the rule.</param>
        /// <param name="boolean">Boolean values for rule definition.</param>
        /// <param name="contactProperty">string.</param>
        /// <param name="date">Selected date for rule definition.</param>
        /// <param name="eventProperty">Selected event property for rule definition.</param>
        /// <param name="expression">Created expression for rule definition.</param>
        /// <param name="number">Boolean values for rule definition.</param>
        /// <param name="_string">String values for rule definition.</param>
        public MainValueResponse(List<MainValueResponse> array = default(List<MainValueResponse>), bool? boolean = default(bool?), string contactProperty = default(string), string date = default(string), string eventProperty = default(string), Object expression = default(Object), decimal? number = default(decimal?), string _string = default(string))
        {
            this.Array = array;
            this.Boolean = boolean;
            this.ContactProperty = contactProperty;
            this.Date = date;
            this.EventProperty = eventProperty;
            this.Expression = expression;
            this.Number = number;
            this.String = _string;
        }
        
        /// <summary>
        /// Array values to define the rule
        /// </summary>
        /// <value>Array values to define the rule</value>
        [DataMember(Name="array", EmitDefaultValue=false)]
        public List<MainValueResponse> Array { get; set; }

        /// <summary>
        /// Boolean values for rule definition
        /// </summary>
        /// <value>Boolean values for rule definition</value>
        [DataMember(Name="boolean", EmitDefaultValue=false)]
        public bool? Boolean { get; set; }

        /// <summary>
        /// string
        /// </summary>
        /// <value>string</value>
        [DataMember(Name="contactProperty", EmitDefaultValue=false)]
        public string ContactProperty { get; set; }

        /// <summary>
        /// Selected date for rule definition
        /// </summary>
        /// <value>Selected date for rule definition</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Selected event property for rule definition
        /// </summary>
        /// <value>Selected event property for rule definition</value>
        [DataMember(Name="eventProperty", EmitDefaultValue=false)]
        public string EventProperty { get; set; }

        /// <summary>
        /// Created expression for rule definition
        /// </summary>
        /// <value>Created expression for rule definition</value>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public Object Expression { get; set; }

        /// <summary>
        /// Boolean values for rule definition
        /// </summary>
        /// <value>Boolean values for rule definition</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public decimal? Number { get; set; }

        /// <summary>
        /// String values for rule definition
        /// </summary>
        /// <value>String values for rule definition</value>
        [DataMember(Name="string", EmitDefaultValue=false)]
        public string String { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainValueResponse {\n");
            sb.Append("  Array: ").Append(Array).Append("\n");
            sb.Append("  Boolean: ").Append(Boolean).Append("\n");
            sb.Append("  ContactProperty: ").Append(ContactProperty).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  EventProperty: ").Append(EventProperty).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  String: ").Append(String).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainValueResponse);
        }

        /// <summary>
        /// Returns true if MainValueResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MainValueResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainValueResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Array == input.Array ||
                    this.Array != null &&
                    this.Array.SequenceEqual(input.Array)
                ) && 
                (
                    this.Boolean == input.Boolean ||
                    (this.Boolean != null &&
                    this.Boolean.Equals(input.Boolean))
                ) && 
                (
                    this.ContactProperty == input.ContactProperty ||
                    (this.ContactProperty != null &&
                    this.ContactProperty.Equals(input.ContactProperty))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.EventProperty == input.EventProperty ||
                    (this.EventProperty != null &&
                    this.EventProperty.Equals(input.EventProperty))
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.String == input.String ||
                    (this.String != null &&
                    this.String.Equals(input.String))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Array != null)
                    hashCode = hashCode * 59 + this.Array.GetHashCode();
                if (this.Boolean != null)
                    hashCode = hashCode * 59 + this.Boolean.GetHashCode();
                if (this.ContactProperty != null)
                    hashCode = hashCode * 59 + this.ContactProperty.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.EventProperty != null)
                    hashCode = hashCode * 59 + this.EventProperty.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.String != null)
                    hashCode = hashCode * 59 + this.String.GetHashCode();
                return hashCode;
            }
        }
    }

}
