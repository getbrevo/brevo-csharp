/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetDeviceBrowserStats
    /// </summary>
    [DataContract]
    public partial class GetDeviceBrowserStats :  IEquatable<GetDeviceBrowserStats>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDeviceBrowserStats" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetDeviceBrowserStats() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDeviceBrowserStats" /> class.
        /// </summary>
        /// <param name="clickers">Number of total clicks for the campaign using the particular browser (required).</param>
        /// <param name="uniqueClicks">Number of unique clicks for the campaign using the particular browser (required).</param>
        /// <param name="viewed">Number of openings for the campaign using the particular browser (required).</param>
        /// <param name="uniqueViews">Number of unique openings for the campaign using the particular browser (required).</param>
        public GetDeviceBrowserStats(long? clickers = default(long?), long? uniqueClicks = default(long?), long? viewed = default(long?), long? uniqueViews = default(long?))
        {
            // to ensure "clickers" is required (not null)
            if (clickers == null)
            {
                throw new InvalidDataException("clickers is a required property for GetDeviceBrowserStats and cannot be null");
            }
            else
            {
                this.Clickers = clickers;
            }
            // to ensure "uniqueClicks" is required (not null)
            if (uniqueClicks == null)
            {
                throw new InvalidDataException("uniqueClicks is a required property for GetDeviceBrowserStats and cannot be null");
            }
            else
            {
                this.UniqueClicks = uniqueClicks;
            }
            // to ensure "viewed" is required (not null)
            if (viewed == null)
            {
                throw new InvalidDataException("viewed is a required property for GetDeviceBrowserStats and cannot be null");
            }
            else
            {
                this.Viewed = viewed;
            }
            // to ensure "uniqueViews" is required (not null)
            if (uniqueViews == null)
            {
                throw new InvalidDataException("uniqueViews is a required property for GetDeviceBrowserStats and cannot be null");
            }
            else
            {
                this.UniqueViews = uniqueViews;
            }
        }
        
        /// <summary>
        /// Number of total clicks for the campaign using the particular browser
        /// </summary>
        /// <value>Number of total clicks for the campaign using the particular browser</value>
        [DataMember(Name="clickers", EmitDefaultValue=false)]
        public long? Clickers { get; set; }

        /// <summary>
        /// Number of unique clicks for the campaign using the particular browser
        /// </summary>
        /// <value>Number of unique clicks for the campaign using the particular browser</value>
        [DataMember(Name="uniqueClicks", EmitDefaultValue=false)]
        public long? UniqueClicks { get; set; }

        /// <summary>
        /// Number of openings for the campaign using the particular browser
        /// </summary>
        /// <value>Number of openings for the campaign using the particular browser</value>
        [DataMember(Name="viewed", EmitDefaultValue=false)]
        public long? Viewed { get; set; }

        /// <summary>
        /// Number of unique openings for the campaign using the particular browser
        /// </summary>
        /// <value>Number of unique openings for the campaign using the particular browser</value>
        [DataMember(Name="uniqueViews", EmitDefaultValue=false)]
        public long? UniqueViews { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDeviceBrowserStats {\n");
            sb.Append("  Clickers: ").Append(Clickers).Append("\n");
            sb.Append("  UniqueClicks: ").Append(UniqueClicks).Append("\n");
            sb.Append("  Viewed: ").Append(Viewed).Append("\n");
            sb.Append("  UniqueViews: ").Append(UniqueViews).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDeviceBrowserStats);
        }

        /// <summary>
        /// Returns true if GetDeviceBrowserStats instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDeviceBrowserStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDeviceBrowserStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Clickers == input.Clickers ||
                    (this.Clickers != null &&
                    this.Clickers.Equals(input.Clickers))
                ) && 
                (
                    this.UniqueClicks == input.UniqueClicks ||
                    (this.UniqueClicks != null &&
                    this.UniqueClicks.Equals(input.UniqueClicks))
                ) && 
                (
                    this.Viewed == input.Viewed ||
                    (this.Viewed != null &&
                    this.Viewed.Equals(input.Viewed))
                ) && 
                (
                    this.UniqueViews == input.UniqueViews ||
                    (this.UniqueViews != null &&
                    this.UniqueViews.Equals(input.UniqueViews))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Clickers != null)
                    hashCode = hashCode * 59 + this.Clickers.GetHashCode();
                if (this.UniqueClicks != null)
                    hashCode = hashCode * 59 + this.UniqueClicks.GetHashCode();
                if (this.Viewed != null)
                    hashCode = hashCode * 59 + this.Viewed.GetHashCode();
                if (this.UniqueViews != null)
                    hashCode = hashCode * 59 + this.UniqueViews.GetHashCode();
                return hashCode;
            }
        }
    }

}
