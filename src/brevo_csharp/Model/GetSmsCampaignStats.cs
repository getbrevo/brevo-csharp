/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetSmsCampaignStats
    /// </summary>
    [DataContract]
    public partial class GetSmsCampaignStats :  IEquatable<GetSmsCampaignStats>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSmsCampaignStats" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSmsCampaignStats() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSmsCampaignStats" /> class.
        /// </summary>
        /// <param name="delivered">Number of delivered SMS (required).</param>
        /// <param name="sent">Number of sent SMS (required).</param>
        /// <param name="processing">Number of processing SMS (required).</param>
        /// <param name="softBounces">Number of softbounced SMS (required).</param>
        /// <param name="hardBounces">Number of hardbounced SMS (required).</param>
        /// <param name="unsubscriptions">Number of unsubscription SMS (required).</param>
        /// <param name="answered">Number of replies to the SMS (required).</param>
        public GetSmsCampaignStats(long? delivered = default(long?), long? sent = default(long?), long? processing = default(long?), long? softBounces = default(long?), long? hardBounces = default(long?), long? unsubscriptions = default(long?), long? answered = default(long?))
        {
            // to ensure "delivered" is required (not null)
            if (delivered == null)
            {
                throw new InvalidDataException("delivered is a required property for GetSmsCampaignStats and cannot be null");
            }
            else
            {
                this.Delivered = delivered;
            }
            // to ensure "sent" is required (not null)
            if (sent == null)
            {
                throw new InvalidDataException("sent is a required property for GetSmsCampaignStats and cannot be null");
            }
            else
            {
                this.Sent = sent;
            }
            // to ensure "processing" is required (not null)
            if (processing == null)
            {
                throw new InvalidDataException("processing is a required property for GetSmsCampaignStats and cannot be null");
            }
            else
            {
                this.Processing = processing;
            }
            // to ensure "softBounces" is required (not null)
            if (softBounces == null)
            {
                throw new InvalidDataException("softBounces is a required property for GetSmsCampaignStats and cannot be null");
            }
            else
            {
                this.SoftBounces = softBounces;
            }
            // to ensure "hardBounces" is required (not null)
            if (hardBounces == null)
            {
                throw new InvalidDataException("hardBounces is a required property for GetSmsCampaignStats and cannot be null");
            }
            else
            {
                this.HardBounces = hardBounces;
            }
            // to ensure "unsubscriptions" is required (not null)
            if (unsubscriptions == null)
            {
                throw new InvalidDataException("unsubscriptions is a required property for GetSmsCampaignStats and cannot be null");
            }
            else
            {
                this.Unsubscriptions = unsubscriptions;
            }
            // to ensure "answered" is required (not null)
            if (answered == null)
            {
                throw new InvalidDataException("answered is a required property for GetSmsCampaignStats and cannot be null");
            }
            else
            {
                this.Answered = answered;
            }
        }
        
        /// <summary>
        /// Number of delivered SMS
        /// </summary>
        /// <value>Number of delivered SMS</value>
        [DataMember(Name="delivered", EmitDefaultValue=false)]
        public long? Delivered { get; set; }

        /// <summary>
        /// Number of sent SMS
        /// </summary>
        /// <value>Number of sent SMS</value>
        [DataMember(Name="sent", EmitDefaultValue=false)]
        public long? Sent { get; set; }

        /// <summary>
        /// Number of processing SMS
        /// </summary>
        /// <value>Number of processing SMS</value>
        [DataMember(Name="processing", EmitDefaultValue=false)]
        public long? Processing { get; set; }

        /// <summary>
        /// Number of softbounced SMS
        /// </summary>
        /// <value>Number of softbounced SMS</value>
        [DataMember(Name="softBounces", EmitDefaultValue=false)]
        public long? SoftBounces { get; set; }

        /// <summary>
        /// Number of hardbounced SMS
        /// </summary>
        /// <value>Number of hardbounced SMS</value>
        [DataMember(Name="hardBounces", EmitDefaultValue=false)]
        public long? HardBounces { get; set; }

        /// <summary>
        /// Number of unsubscription SMS
        /// </summary>
        /// <value>Number of unsubscription SMS</value>
        [DataMember(Name="unsubscriptions", EmitDefaultValue=false)]
        public long? Unsubscriptions { get; set; }

        /// <summary>
        /// Number of replies to the SMS
        /// </summary>
        /// <value>Number of replies to the SMS</value>
        [DataMember(Name="answered", EmitDefaultValue=false)]
        public long? Answered { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetSmsCampaignStats {\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Processing: ").Append(Processing).Append("\n");
            sb.Append("  SoftBounces: ").Append(SoftBounces).Append("\n");
            sb.Append("  HardBounces: ").Append(HardBounces).Append("\n");
            sb.Append("  Unsubscriptions: ").Append(Unsubscriptions).Append("\n");
            sb.Append("  Answered: ").Append(Answered).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSmsCampaignStats);
        }

        /// <summary>
        /// Returns true if GetSmsCampaignStats instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSmsCampaignStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSmsCampaignStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Delivered == input.Delivered ||
                    (this.Delivered != null &&
                    this.Delivered.Equals(input.Delivered))
                ) && 
                (
                    this.Sent == input.Sent ||
                    (this.Sent != null &&
                    this.Sent.Equals(input.Sent))
                ) && 
                (
                    this.Processing == input.Processing ||
                    (this.Processing != null &&
                    this.Processing.Equals(input.Processing))
                ) && 
                (
                    this.SoftBounces == input.SoftBounces ||
                    (this.SoftBounces != null &&
                    this.SoftBounces.Equals(input.SoftBounces))
                ) && 
                (
                    this.HardBounces == input.HardBounces ||
                    (this.HardBounces != null &&
                    this.HardBounces.Equals(input.HardBounces))
                ) && 
                (
                    this.Unsubscriptions == input.Unsubscriptions ||
                    (this.Unsubscriptions != null &&
                    this.Unsubscriptions.Equals(input.Unsubscriptions))
                ) && 
                (
                    this.Answered == input.Answered ||
                    (this.Answered != null &&
                    this.Answered.Equals(input.Answered))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Delivered != null)
                    hashCode = hashCode * 59 + this.Delivered.GetHashCode();
                if (this.Sent != null)
                    hashCode = hashCode * 59 + this.Sent.GetHashCode();
                if (this.Processing != null)
                    hashCode = hashCode * 59 + this.Processing.GetHashCode();
                if (this.SoftBounces != null)
                    hashCode = hashCode * 59 + this.SoftBounces.GetHashCode();
                if (this.HardBounces != null)
                    hashCode = hashCode * 59 + this.HardBounces.GetHashCode();
                if (this.Unsubscriptions != null)
                    hashCode = hashCode * 59 + this.Unsubscriptions.GetHashCode();
                if (this.Answered != null)
                    hashCode = hashCode * 59 + this.Answered.GetHashCode();
                return hashCode;
            }
        }
    }

}
