/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetCorporateInvitedUsersListUsers
    /// </summary>
    [DataContract]
    public partial class GetCorporateInvitedUsersListUsers :  IEquatable<GetCorporateInvitedUsersListUsers>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporateInvitedUsersListUsers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporateInvitedUsersListUsers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporateInvitedUsersListUsers" /> class.
        /// </summary>
        /// <param name="groups">groups (required).</param>
        /// <param name="email">Email address of the user. (required).</param>
        /// <param name="isOwner">Flag for indicating is user owner of the organization. (required).</param>
        /// <param name="status">Status of the invited user. (required).</param>
        /// <param name="featureAccess">featureAccess (required).</param>
        public GetCorporateInvitedUsersListUsers(GetCorporateInvitedUsersListGroups groups = default(GetCorporateInvitedUsersListGroups), string email = default(string), string isOwner = default(string), string status = default(string), GetCorporateInvitedUsersListFeatureAccess featureAccess = default(GetCorporateInvitedUsersListFeatureAccess))
        {
            // to ensure "groups" is required (not null)
            if (groups == null)
            {
                throw new InvalidDataException("groups is a required property for GetCorporateInvitedUsersListUsers and cannot be null");
            }
            else
            {
                this.Groups = groups;
            }
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for GetCorporateInvitedUsersListUsers and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "isOwner" is required (not null)
            if (isOwner == null)
            {
                throw new InvalidDataException("isOwner is a required property for GetCorporateInvitedUsersListUsers and cannot be null");
            }
            else
            {
                this.IsOwner = isOwner;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for GetCorporateInvitedUsersListUsers and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "featureAccess" is required (not null)
            if (featureAccess == null)
            {
                throw new InvalidDataException("featureAccess is a required property for GetCorporateInvitedUsersListUsers and cannot be null");
            }
            else
            {
                this.FeatureAccess = featureAccess;
            }
        }
        
        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public GetCorporateInvitedUsersListGroups Groups { get; set; }

        /// <summary>
        /// Email address of the user.
        /// </summary>
        /// <value>Email address of the user.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Flag for indicating is user owner of the organization.
        /// </summary>
        /// <value>Flag for indicating is user owner of the organization.</value>
        [DataMember(Name="is_owner", EmitDefaultValue=false)]
        public string IsOwner { get; set; }

        /// <summary>
        /// Status of the invited user.
        /// </summary>
        /// <value>Status of the invited user.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets FeatureAccess
        /// </summary>
        [DataMember(Name="feature_access", EmitDefaultValue=false)]
        public GetCorporateInvitedUsersListFeatureAccess FeatureAccess { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporateInvitedUsersListUsers {\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FeatureAccess: ").Append(FeatureAccess).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporateInvitedUsersListUsers);
        }

        /// <summary>
        /// Returns true if GetCorporateInvitedUsersListUsers instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporateInvitedUsersListUsers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporateInvitedUsersListUsers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Groups == input.Groups ||
                    (this.Groups != null &&
                    this.Groups.Equals(input.Groups))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.IsOwner == input.IsOwner ||
                    (this.IsOwner != null &&
                    this.IsOwner.Equals(input.IsOwner))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.FeatureAccess == input.FeatureAccess ||
                    (this.FeatureAccess != null &&
                    this.FeatureAccess.Equals(input.FeatureAccess))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.IsOwner != null)
                    hashCode = hashCode * 59 + this.IsOwner.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.FeatureAccess != null)
                    hashCode = hashCode * 59 + this.FeatureAccess.GetHashCode();
                return hashCode;
            }
        }
    }

}
