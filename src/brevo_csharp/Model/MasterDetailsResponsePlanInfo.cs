/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Plan details
    /// </summary>
    [DataContract]
    public partial class MasterDetailsResponsePlanInfo :  IEquatable<MasterDetailsResponsePlanInfo>
    {
        /// <summary>
        /// Plan period type
        /// </summary>
        /// <value>Plan period type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlanPeriodEnum
        {
            
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 1,
            
            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 2
        }

        /// <summary>
        /// Plan period type
        /// </summary>
        /// <value>Plan period type</value>
        [DataMember(Name="planPeriod", EmitDefaultValue=false)]
        public PlanPeriodEnum? PlanPeriod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MasterDetailsResponsePlanInfo" /> class.
        /// </summary>
        /// <param name="currencyCode">Plan currency.</param>
        /// <param name="nextBillingAt">Timestamp of next billing date.</param>
        /// <param name="price">Plan amount.</param>
        /// <param name="planPeriod">Plan period type.</param>
        /// <param name="subAccounts">Number of sub-accounts.</param>
        /// <param name="features">List of provided features in the plan.</param>
        public MasterDetailsResponsePlanInfo(string currencyCode = default(string), long? nextBillingAt = default(long?), decimal? price = default(decimal?), PlanPeriodEnum? planPeriod = default(PlanPeriodEnum?), int? subAccounts = default(int?), List<MasterDetailsResponsePlanInfoFeatures> features = default(List<MasterDetailsResponsePlanInfoFeatures>))
        {
            this.CurrencyCode = currencyCode;
            this.NextBillingAt = nextBillingAt;
            this.Price = price;
            this.PlanPeriod = planPeriod;
            this.SubAccounts = subAccounts;
            this.Features = features;
        }
        
        /// <summary>
        /// Plan currency
        /// </summary>
        /// <value>Plan currency</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Timestamp of next billing date
        /// </summary>
        /// <value>Timestamp of next billing date</value>
        [DataMember(Name="nextBillingAt", EmitDefaultValue=false)]
        public long? NextBillingAt { get; set; }

        /// <summary>
        /// Plan amount
        /// </summary>
        /// <value>Plan amount</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal? Price { get; set; }


        /// <summary>
        /// Number of sub-accounts
        /// </summary>
        /// <value>Number of sub-accounts</value>
        [DataMember(Name="subAccounts", EmitDefaultValue=false)]
        public int? SubAccounts { get; set; }

        /// <summary>
        /// List of provided features in the plan
        /// </summary>
        /// <value>List of provided features in the plan</value>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public List<MasterDetailsResponsePlanInfoFeatures> Features { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MasterDetailsResponsePlanInfo {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  NextBillingAt: ").Append(NextBillingAt).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PlanPeriod: ").Append(PlanPeriod).Append("\n");
            sb.Append("  SubAccounts: ").Append(SubAccounts).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MasterDetailsResponsePlanInfo);
        }

        /// <summary>
        /// Returns true if MasterDetailsResponsePlanInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MasterDetailsResponsePlanInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MasterDetailsResponsePlanInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.NextBillingAt == input.NextBillingAt ||
                    (this.NextBillingAt != null &&
                    this.NextBillingAt.Equals(input.NextBillingAt))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.PlanPeriod == input.PlanPeriod ||
                    (this.PlanPeriod != null &&
                    this.PlanPeriod.Equals(input.PlanPeriod))
                ) && 
                (
                    this.SubAccounts == input.SubAccounts ||
                    (this.SubAccounts != null &&
                    this.SubAccounts.Equals(input.SubAccounts))
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.NextBillingAt != null)
                    hashCode = hashCode * 59 + this.NextBillingAt.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.PlanPeriod != null)
                    hashCode = hashCode * 59 + this.PlanPeriod.GetHashCode();
                if (this.SubAccounts != null)
                    hashCode = hashCode * 59 + this.SubAccounts.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                return hashCode;
            }
        }
    }

}
