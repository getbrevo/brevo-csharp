/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// WhatsappCampStats
    /// </summary>
    [DataContract]
    public partial class WhatsappCampStats :  IEquatable<WhatsappCampStats>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappCampStats" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WhatsappCampStats() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappCampStats" /> class.
        /// </summary>
        /// <param name="sent">sent (required).</param>
        /// <param name="delivered">delivered (required).</param>
        /// <param name="read">read (required).</param>
        /// <param name="unsubscribe">unsubscribe (required).</param>
        /// <param name="notSent">notSent (required).</param>
        public WhatsappCampStats(int? sent = default(int?), int? delivered = default(int?), int? read = default(int?), int? unsubscribe = default(int?), int? notSent = default(int?))
        {
            // to ensure "sent" is required (not null)
            if (sent == null)
            {
                throw new InvalidDataException("sent is a required property for WhatsappCampStats and cannot be null");
            }
            else
            {
                this.Sent = sent;
            }
            // to ensure "delivered" is required (not null)
            if (delivered == null)
            {
                throw new InvalidDataException("delivered is a required property for WhatsappCampStats and cannot be null");
            }
            else
            {
                this.Delivered = delivered;
            }
            // to ensure "read" is required (not null)
            if (read == null)
            {
                throw new InvalidDataException("read is a required property for WhatsappCampStats and cannot be null");
            }
            else
            {
                this.Read = read;
            }
            // to ensure "unsubscribe" is required (not null)
            if (unsubscribe == null)
            {
                throw new InvalidDataException("unsubscribe is a required property for WhatsappCampStats and cannot be null");
            }
            else
            {
                this.Unsubscribe = unsubscribe;
            }
            // to ensure "notSent" is required (not null)
            if (notSent == null)
            {
                throw new InvalidDataException("notSent is a required property for WhatsappCampStats and cannot be null");
            }
            else
            {
                this.NotSent = notSent;
            }
        }
        
        /// <summary>
        /// Gets or Sets Sent
        /// </summary>
        [DataMember(Name="sent", EmitDefaultValue=false)]
        public int? Sent { get; set; }

        /// <summary>
        /// Gets or Sets Delivered
        /// </summary>
        [DataMember(Name="delivered", EmitDefaultValue=false)]
        public int? Delivered { get; set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [DataMember(Name="read", EmitDefaultValue=false)]
        public int? Read { get; set; }

        /// <summary>
        /// Gets or Sets Unsubscribe
        /// </summary>
        [DataMember(Name="unsubscribe", EmitDefaultValue=false)]
        public int? Unsubscribe { get; set; }

        /// <summary>
        /// Gets or Sets NotSent
        /// </summary>
        [DataMember(Name="not_sent", EmitDefaultValue=false)]
        public int? NotSent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WhatsappCampStats {\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  Unsubscribe: ").Append(Unsubscribe).Append("\n");
            sb.Append("  NotSent: ").Append(NotSent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WhatsappCampStats);
        }

        /// <summary>
        /// Returns true if WhatsappCampStats instances are equal
        /// </summary>
        /// <param name="input">Instance of WhatsappCampStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WhatsappCampStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sent == input.Sent ||
                    (this.Sent != null &&
                    this.Sent.Equals(input.Sent))
                ) && 
                (
                    this.Delivered == input.Delivered ||
                    (this.Delivered != null &&
                    this.Delivered.Equals(input.Delivered))
                ) && 
                (
                    this.Read == input.Read ||
                    (this.Read != null &&
                    this.Read.Equals(input.Read))
                ) && 
                (
                    this.Unsubscribe == input.Unsubscribe ||
                    (this.Unsubscribe != null &&
                    this.Unsubscribe.Equals(input.Unsubscribe))
                ) && 
                (
                    this.NotSent == input.NotSent ||
                    (this.NotSent != null &&
                    this.NotSent.Equals(input.NotSent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sent != null)
                    hashCode = hashCode * 59 + this.Sent.GetHashCode();
                if (this.Delivered != null)
                    hashCode = hashCode * 59 + this.Delivered.GetHashCode();
                if (this.Read != null)
                    hashCode = hashCode * 59 + this.Read.GetHashCode();
                if (this.Unsubscribe != null)
                    hashCode = hashCode * 59 + this.Unsubscribe.GetHashCode();
                if (this.NotSent != null)
                    hashCode = hashCode * 59 + this.NotSent.GetHashCode();
                return hashCode;
            }
        }
    }

}
