/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// UpdateWebhook
    /// </summary>
    [DataContract]
    public partial class UpdateWebhook :  IEquatable<UpdateWebhook>
    {
        /// <summary>
        /// Defines Events
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventsEnum
        {
            
            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            [EnumMember(Value = "sent")]
            Sent = 1,
            
            /// <summary>
            /// Enum HardBounce for value: hardBounce
            /// </summary>
            [EnumMember(Value = "hardBounce")]
            HardBounce = 2,
            
            /// <summary>
            /// Enum SoftBounce for value: softBounce
            /// </summary>
            [EnumMember(Value = "softBounce")]
            SoftBounce = 3,
            
            /// <summary>
            /// Enum Blocked for value: blocked
            /// </summary>
            [EnumMember(Value = "blocked")]
            Blocked = 4,
            
            /// <summary>
            /// Enum Spam for value: spam
            /// </summary>
            [EnumMember(Value = "spam")]
            Spam = 5,
            
            /// <summary>
            /// Enum Delivered for value: delivered
            /// </summary>
            [EnumMember(Value = "delivered")]
            Delivered = 6,
            
            /// <summary>
            /// Enum Request for value: request
            /// </summary>
            [EnumMember(Value = "request")]
            Request = 7,
            
            /// <summary>
            /// Enum Click for value: click
            /// </summary>
            [EnumMember(Value = "click")]
            Click = 8,
            
            /// <summary>
            /// Enum Invalid for value: invalid
            /// </summary>
            [EnumMember(Value = "invalid")]
            Invalid = 9,
            
            /// <summary>
            /// Enum Deferred for value: deferred
            /// </summary>
            [EnumMember(Value = "deferred")]
            Deferred = 10,
            
            /// <summary>
            /// Enum Opened for value: opened
            /// </summary>
            [EnumMember(Value = "opened")]
            Opened = 11,
            
            /// <summary>
            /// Enum UniqueOpened for value: uniqueOpened
            /// </summary>
            [EnumMember(Value = "uniqueOpened")]
            UniqueOpened = 12,
            
            /// <summary>
            /// Enum Unsubscribed for value: unsubscribed
            /// </summary>
            [EnumMember(Value = "unsubscribed")]
            Unsubscribed = 13,
            
            /// <summary>
            /// Enum ListAddition for value: listAddition
            /// </summary>
            [EnumMember(Value = "listAddition")]
            ListAddition = 14,
            
            /// <summary>
            /// Enum ContactUpdated for value: contactUpdated
            /// </summary>
            [EnumMember(Value = "contactUpdated")]
            ContactUpdated = 15,
            
            /// <summary>
            /// Enum ContactDeleted for value: contactDeleted
            /// </summary>
            [EnumMember(Value = "contactDeleted")]
            ContactDeleted = 16,
            
            /// <summary>
            /// Enum InboundEmailProcessed for value: inboundEmailProcessed
            /// </summary>
            [EnumMember(Value = "inboundEmailProcessed")]
            InboundEmailProcessed = 17
        }


        /// <summary>
        /// - Events triggering the webhook. Possible values for **Transactional** type webhook: #### &#x60;sent&#x60; OR &#x60;request&#x60;, &#x60;delivered&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;blocked&#x60;, &#x60;spam&#x60;, &#x60;invalid&#x60;, &#x60;deferred&#x60;, &#x60;click&#x60;, &#x60;opened&#x60;, &#x60;uniqueOpened&#x60; and &#x60;unsubscribed&#x60; - Possible values for **Marketing** type webhook: #### &#x60;spam&#x60;, &#x60;opened&#x60;, &#x60;click&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;unsubscribed&#x60;, &#x60;listAddition&#x60; &amp; &#x60;delivered&#x60; - Possible values for **Inbound** type webhook: #### &#x60;inboundEmailProcessed&#x60; 
        /// </summary>
        /// <value>- Events triggering the webhook. Possible values for **Transactional** type webhook: #### &#x60;sent&#x60; OR &#x60;request&#x60;, &#x60;delivered&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;blocked&#x60;, &#x60;spam&#x60;, &#x60;invalid&#x60;, &#x60;deferred&#x60;, &#x60;click&#x60;, &#x60;opened&#x60;, &#x60;uniqueOpened&#x60; and &#x60;unsubscribed&#x60; - Possible values for **Marketing** type webhook: #### &#x60;spam&#x60;, &#x60;opened&#x60;, &#x60;click&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;unsubscribed&#x60;, &#x60;listAddition&#x60; &amp; &#x60;delivered&#x60; - Possible values for **Inbound** type webhook: #### &#x60;inboundEmailProcessed&#x60; </value>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<EventsEnum> Events { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateWebhook" /> class.
        /// </summary>
        /// <param name="url">URL of the webhook.</param>
        /// <param name="description">Description of the webhook.</param>
        /// <param name="events">- Events triggering the webhook. Possible values for **Transactional** type webhook: #### &#x60;sent&#x60; OR &#x60;request&#x60;, &#x60;delivered&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;blocked&#x60;, &#x60;spam&#x60;, &#x60;invalid&#x60;, &#x60;deferred&#x60;, &#x60;click&#x60;, &#x60;opened&#x60;, &#x60;uniqueOpened&#x60; and &#x60;unsubscribed&#x60; - Possible values for **Marketing** type webhook: #### &#x60;spam&#x60;, &#x60;opened&#x60;, &#x60;click&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;unsubscribed&#x60;, &#x60;listAddition&#x60; &amp; &#x60;delivered&#x60; - Possible values for **Inbound** type webhook: #### &#x60;inboundEmailProcessed&#x60; .</param>
        /// <param name="domain">Inbound domain of webhook, used in case of event type &#x60;inbound&#x60;.</param>
        /// <param name="batched">To send batched webhooks.</param>
        /// <param name="auth">auth.</param>
        /// <param name="headers">Custom headers to be send with webhooks.</param>
        public UpdateWebhook(string url = default(string), string description = default(string), List<EventsEnum> events = default(List<EventsEnum>), string domain = default(string), bool? batched = default(bool?), GetWebhookAuth auth = default(GetWebhookAuth), List<GetWebhookHeaders> headers = default(List<GetWebhookHeaders>))
        {
            this.Url = url;
            this.Description = description;
            this.Events = events;
            this.Domain = domain;
            this.Batched = batched;
            this.Auth = auth;
            this.Headers = headers;
        }
        
        /// <summary>
        /// URL of the webhook
        /// </summary>
        /// <value>URL of the webhook</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Description of the webhook
        /// </summary>
        /// <value>Description of the webhook</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Inbound domain of webhook, used in case of event type &#x60;inbound&#x60;
        /// </summary>
        /// <value>Inbound domain of webhook, used in case of event type &#x60;inbound&#x60;</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// To send batched webhooks
        /// </summary>
        /// <value>To send batched webhooks</value>
        [DataMember(Name="batched", EmitDefaultValue=false)]
        public bool? Batched { get; set; }

        /// <summary>
        /// Gets or Sets Auth
        /// </summary>
        [DataMember(Name="auth", EmitDefaultValue=false)]
        public GetWebhookAuth Auth { get; set; }

        /// <summary>
        /// Custom headers to be send with webhooks
        /// </summary>
        /// <value>Custom headers to be send with webhooks</value>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public List<GetWebhookHeaders> Headers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateWebhook {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Batched: ").Append(Batched).Append("\n");
            sb.Append("  Auth: ").Append(Auth).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateWebhook);
        }

        /// <summary>
        /// Returns true if UpdateWebhook instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateWebhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateWebhook input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Batched == input.Batched ||
                    (this.Batched != null &&
                    this.Batched.Equals(input.Batched))
                ) && 
                (
                    this.Auth == input.Auth ||
                    (this.Auth != null &&
                    this.Auth.Equals(input.Auth))
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.Batched != null)
                    hashCode = hashCode * 59 + this.Batched.GetHashCode();
                if (this.Auth != null)
                    hashCode = hashCode * 59 + this.Auth.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                return hashCode;
            }
        }
    }

}
