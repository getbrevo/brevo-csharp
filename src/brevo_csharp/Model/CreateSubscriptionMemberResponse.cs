/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// CreateSubscriptionMemberResponse
    /// </summary>
    [DataContract]
    public partial class CreateSubscriptionMemberResponse :  IEquatable<CreateSubscriptionMemberResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscriptionMemberResponse" /> class.
        /// </summary>
        /// <param name="organizationId">Organization Id.</param>
        /// <param name="ownerContactId">Owner Contact Id.</param>
        /// <param name="memberContactIds">Member Contact Ids.</param>
        /// <param name="createdAt">Subscription creation date.</param>
        /// <param name="updatedAt">Subscription last modification date.</param>
        public CreateSubscriptionMemberResponse(int? organizationId = default(int?), int? ownerContactId = default(int?), List<int?> memberContactIds = default(List<int?>), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?))
        {
            this.OrganizationId = organizationId;
            this.OwnerContactId = ownerContactId;
            this.MemberContactIds = memberContactIds;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Organization Id
        /// </summary>
        /// <value>Organization Id</value>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public int? OrganizationId { get; set; }

        /// <summary>
        /// Owner Contact Id
        /// </summary>
        /// <value>Owner Contact Id</value>
        [DataMember(Name="ownerContactId", EmitDefaultValue=false)]
        public int? OwnerContactId { get; set; }

        /// <summary>
        /// Member Contact Ids
        /// </summary>
        /// <value>Member Contact Ids</value>
        [DataMember(Name="memberContactIds", EmitDefaultValue=false)]
        public List<int?> MemberContactIds { get; set; }

        /// <summary>
        /// Subscription creation date
        /// </summary>
        /// <value>Subscription creation date</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Subscription last modification date
        /// </summary>
        /// <value>Subscription last modification date</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSubscriptionMemberResponse {\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OwnerContactId: ").Append(OwnerContactId).Append("\n");
            sb.Append("  MemberContactIds: ").Append(MemberContactIds).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSubscriptionMemberResponse);
        }

        /// <summary>
        /// Returns true if CreateSubscriptionMemberResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSubscriptionMemberResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSubscriptionMemberResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.OwnerContactId == input.OwnerContactId ||
                    (this.OwnerContactId != null &&
                    this.OwnerContactId.Equals(input.OwnerContactId))
                ) && 
                (
                    this.MemberContactIds == input.MemberContactIds ||
                    this.MemberContactIds != null &&
                    this.MemberContactIds.SequenceEqual(input.MemberContactIds)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.OwnerContactId != null)
                    hashCode = hashCode * 59 + this.OwnerContactId.GetHashCode();
                if (this.MemberContactIds != null)
                    hashCode = hashCode * 59 + this.MemberContactIds.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
