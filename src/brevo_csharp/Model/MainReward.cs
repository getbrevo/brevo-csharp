/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// MainReward
    /// </summary>
    [DataContract]
    public partial class MainReward :  IEquatable<MainReward>
    {
        /// <summary>
        /// Select startOfPeriod to configure rewards expiry on start of day/week/month/year. Select endOfPeriod to configure reward expiry on end of day/week/month/year, else select noModification
        /// </summary>
        /// <value>Select startOfPeriod to configure rewards expiry on start of day/week/month/year. Select endOfPeriod to configure reward expiry on end of day/week/month/year, else select noModification</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExpirationModifierEnum
        {
            
            /// <summary>
            /// Enum StartOfPeriod for value: startOfPeriod
            /// </summary>
            [EnumMember(Value = "startOfPeriod")]
            StartOfPeriod = 1,
            
            /// <summary>
            /// Enum EndOfPeriod for value: endOfPeriod
            /// </summary>
            [EnumMember(Value = "endOfPeriod")]
            EndOfPeriod = 2,
            
            /// <summary>
            /// Enum NoModification for value: noModification
            /// </summary>
            [EnumMember(Value = "noModification")]
            NoModification = 3
        }

        /// <summary>
        /// Select startOfPeriod to configure rewards expiry on start of day/week/month/year. Select endOfPeriod to configure reward expiry on end of day/week/month/year, else select noModification
        /// </summary>
        /// <value>Select startOfPeriod to configure rewards expiry on start of day/week/month/year. Select endOfPeriod to configure reward expiry on end of day/week/month/year, else select noModification</value>
        [DataMember(Name="expirationModifier", EmitDefaultValue=false)]
        public ExpirationModifierEnum? ExpirationModifier { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MainReward" /> class.
        /// </summary>
        /// <param name="attributionPerConsumer">Maximum number of times a consumer can be attributed this reward.</param>
        /// <param name="balanceDefinitionId">Unique identifier for the balance definition.</param>
        /// <param name="code">Unique code for the reward.</param>
        /// <param name="codeCount">Total number of codes generated.</param>
        /// <param name="codeGeneratorId">Unique identifier for the code generator.</param>
        /// <param name="codePoolId">Unique identifier for the code pool.</param>
        /// <param name="config">Configuration settings for the reward.</param>
        /// <param name="createdAt">Timestamp when the reward was created.</param>
        /// <param name="disabledAt">Disabled date of the reward.</param>
        /// <param name="endDate">End date of the reward validity.</param>
        /// <param name="expirationDate">Expiration date of the reward.</param>
        /// <param name="expirationModifier">Select startOfPeriod to configure rewards expiry on start of day/week/month/year. Select endOfPeriod to configure reward expiry on end of day/week/month/year, else select noModification (default to ExpirationModifierEnum.NoModification).</param>
        /// <param name="expirationUnit">Unit of time for the rewards&#39;s availability (e.g., day/week/month/year)..</param>
        /// <param name="expirationValue">Number of days/weeks/month/year for reward expiry.</param>
        /// <param name="generator">object.</param>
        /// <param name="id">Unique identifier for the reward.</param>
        /// <param name="limits">Attribution / Redeem Limits for the reward.</param>
        /// <param name="loyaltyProgramId">Id of the loyalty program to which the current reward belongs to.</param>
        /// <param name="meta">Additional data for reward definition.</param>
        /// <param name="name">Name of the reward.</param>
        /// <param name="products">Selected products for reward definition.</param>
        /// <param name="publicDescription">Public description for the reward.</param>
        /// <param name="publicImage">Public Image for the reward.</param>
        /// <param name="publicName">Public name for the reward.</param>
        /// <param name="redeemPerConsumer">Defines the redeem limit for the consumer.</param>
        /// <param name="redeemRules">Rules defined to redeem a reward.</param>
        /// <param name="rewardConfigs">object.</param>
        /// <param name="rule">Rule to define the reward.</param>
        /// <param name="startDate">Start date of attribution of the reward.</param>
        /// <param name="subtractBalanceDefinitionId">Id of the selected balance while redeeming / attributing a reward.</param>
        /// <param name="subtractBalanceStrategy">Strategy of the Balance while redeeming / attributing a reward.</param>
        /// <param name="subtractBalanceValue">Amount of balance to be selected while redeeming / attributing a reward.</param>
        /// <param name="subtractTotalBalance">Value to indicate to subtract full balance or not.</param>
        /// <param name="totalAttribution">Defines the limit to which a consumer can attribute a reward.</param>
        /// <param name="totalRedeem">Defines the limit to which a consumer can redeem a reward.</param>
        /// <param name="triggerId">Id of the Rule to be updated for that reward.</param>
        /// <param name="unit">Selected unit of the balance.</param>
        /// <param name="updatedAt">Timestamp for when this reward was last updated..</param>
        /// <param name="value">Value of metric in selected config for reward definition.</param>
        /// <param name="valueType">Type of config selected for reward definition.</param>
        public MainReward(int? attributionPerConsumer = default(int?), Guid? balanceDefinitionId = default(Guid?), string code = default(string), long? codeCount = default(long?), Guid? codeGeneratorId = default(Guid?), Guid? codePoolId = default(Guid?), string config = default(string), DateTime? createdAt = default(DateTime?), DateTime? disabledAt = default(DateTime?), DateTime? endDate = default(DateTime?), DateTime? expirationDate = default(DateTime?), ExpirationModifierEnum? expirationModifier = ExpirationModifierEnum.NoModification, string expirationUnit = default(string), int? expirationValue = default(int?), Object generator = default(Object), Guid? id = default(Guid?), List<MainLimit> limits = default(List<MainLimit>), Guid? loyaltyProgramId = default(Guid?), Dictionary<string, Object> meta = default(Dictionary<string, Object>), string name = default(string), List<MainProduct> products = default(List<MainProduct>), string publicDescription = default(string), string publicImage = default(string), string publicName = default(string), int? redeemPerConsumer = default(int?), List<string> redeemRules = default(List<string>), Object rewardConfigs = default(Object), Object rule = default(Object), DateTime? startDate = default(DateTime?), string subtractBalanceDefinitionId = default(string), string subtractBalanceStrategy = default(string), int? subtractBalanceValue = default(int?), bool? subtractTotalBalance = default(bool?), int? totalAttribution = default(int?), int? totalRedeem = default(int?), string triggerId = default(string), string unit = default(string), string updatedAt = default(string), decimal? value = default(decimal?), string valueType = default(string))
        {
            this.AttributionPerConsumer = attributionPerConsumer;
            this.BalanceDefinitionId = balanceDefinitionId;
            this.Code = code;
            this.CodeCount = codeCount;
            this.CodeGeneratorId = codeGeneratorId;
            this.CodePoolId = codePoolId;
            this.Config = config;
            this.CreatedAt = createdAt;
            this.DisabledAt = disabledAt;
            this.EndDate = endDate;
            this.ExpirationDate = expirationDate;
            // use default value if no "expirationModifier" provided
            if (expirationModifier == null)
            {
                this.ExpirationModifier = ExpirationModifierEnum.NoModification;
            }
            else
            {
                this.ExpirationModifier = expirationModifier;
            }
            this.ExpirationUnit = expirationUnit;
            this.ExpirationValue = expirationValue;
            this.Generator = generator;
            this.Id = id;
            this.Limits = limits;
            this.LoyaltyProgramId = loyaltyProgramId;
            this.Meta = meta;
            this.Name = name;
            this.Products = products;
            this.PublicDescription = publicDescription;
            this.PublicImage = publicImage;
            this.PublicName = publicName;
            this.RedeemPerConsumer = redeemPerConsumer;
            this.RedeemRules = redeemRules;
            this.RewardConfigs = rewardConfigs;
            this.Rule = rule;
            this.StartDate = startDate;
            this.SubtractBalanceDefinitionId = subtractBalanceDefinitionId;
            this.SubtractBalanceStrategy = subtractBalanceStrategy;
            this.SubtractBalanceValue = subtractBalanceValue;
            this.SubtractTotalBalance = subtractTotalBalance;
            this.TotalAttribution = totalAttribution;
            this.TotalRedeem = totalRedeem;
            this.TriggerId = triggerId;
            this.Unit = unit;
            this.UpdatedAt = updatedAt;
            this.Value = value;
            this.ValueType = valueType;
        }
        
        /// <summary>
        /// Maximum number of times a consumer can be attributed this reward
        /// </summary>
        /// <value>Maximum number of times a consumer can be attributed this reward</value>
        [DataMember(Name="attributionPerConsumer", EmitDefaultValue=false)]
        public int? AttributionPerConsumer { get; set; }

        /// <summary>
        /// Unique identifier for the balance definition
        /// </summary>
        /// <value>Unique identifier for the balance definition</value>
        [DataMember(Name="balanceDefinitionId", EmitDefaultValue=false)]
        public Guid? BalanceDefinitionId { get; set; }

        /// <summary>
        /// Unique code for the reward
        /// </summary>
        /// <value>Unique code for the reward</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Total number of codes generated
        /// </summary>
        /// <value>Total number of codes generated</value>
        [DataMember(Name="codeCount", EmitDefaultValue=false)]
        public long? CodeCount { get; set; }

        /// <summary>
        /// Unique identifier for the code generator
        /// </summary>
        /// <value>Unique identifier for the code generator</value>
        [DataMember(Name="codeGeneratorId", EmitDefaultValue=false)]
        public Guid? CodeGeneratorId { get; set; }

        /// <summary>
        /// Unique identifier for the code pool
        /// </summary>
        /// <value>Unique identifier for the code pool</value>
        [DataMember(Name="codePoolId", EmitDefaultValue=false)]
        public Guid? CodePoolId { get; set; }

        /// <summary>
        /// Configuration settings for the reward
        /// </summary>
        /// <value>Configuration settings for the reward</value>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public string Config { get; set; }

        /// <summary>
        /// Timestamp when the reward was created
        /// </summary>
        /// <value>Timestamp when the reward was created</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Disabled date of the reward
        /// </summary>
        /// <value>Disabled date of the reward</value>
        [DataMember(Name="disabledAt", EmitDefaultValue=false)]
        public DateTime? DisabledAt { get; set; }

        /// <summary>
        /// End date of the reward validity
        /// </summary>
        /// <value>End date of the reward validity</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Expiration date of the reward
        /// </summary>
        /// <value>Expiration date of the reward</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }


        /// <summary>
        /// Unit of time for the rewards&#39;s availability (e.g., day/week/month/year).
        /// </summary>
        /// <value>Unit of time for the rewards&#39;s availability (e.g., day/week/month/year).</value>
        [DataMember(Name="expirationUnit", EmitDefaultValue=false)]
        public string ExpirationUnit { get; set; }

        /// <summary>
        /// Number of days/weeks/month/year for reward expiry
        /// </summary>
        /// <value>Number of days/weeks/month/year for reward expiry</value>
        [DataMember(Name="expirationValue", EmitDefaultValue=false)]
        public int? ExpirationValue { get; set; }

        /// <summary>
        /// object
        /// </summary>
        /// <value>object</value>
        [DataMember(Name="generator", EmitDefaultValue=false)]
        public Object Generator { get; set; }

        /// <summary>
        /// Unique identifier for the reward
        /// </summary>
        /// <value>Unique identifier for the reward</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Attribution / Redeem Limits for the reward
        /// </summary>
        /// <value>Attribution / Redeem Limits for the reward</value>
        [DataMember(Name="limits", EmitDefaultValue=false)]
        public List<MainLimit> Limits { get; set; }

        /// <summary>
        /// Id of the loyalty program to which the current reward belongs to
        /// </summary>
        /// <value>Id of the loyalty program to which the current reward belongs to</value>
        [DataMember(Name="loyaltyProgramId", EmitDefaultValue=false)]
        public Guid? LoyaltyProgramId { get; set; }

        /// <summary>
        /// Additional data for reward definition
        /// </summary>
        /// <value>Additional data for reward definition</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Dictionary<string, Object> Meta { get; set; }

        /// <summary>
        /// Name of the reward
        /// </summary>
        /// <value>Name of the reward</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Selected products for reward definition
        /// </summary>
        /// <value>Selected products for reward definition</value>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<MainProduct> Products { get; set; }

        /// <summary>
        /// Public description for the reward
        /// </summary>
        /// <value>Public description for the reward</value>
        [DataMember(Name="publicDescription", EmitDefaultValue=false)]
        public string PublicDescription { get; set; }

        /// <summary>
        /// Public Image for the reward
        /// </summary>
        /// <value>Public Image for the reward</value>
        [DataMember(Name="publicImage", EmitDefaultValue=false)]
        public string PublicImage { get; set; }

        /// <summary>
        /// Public name for the reward
        /// </summary>
        /// <value>Public name for the reward</value>
        [DataMember(Name="publicName", EmitDefaultValue=false)]
        public string PublicName { get; set; }

        /// <summary>
        /// Defines the redeem limit for the consumer
        /// </summary>
        /// <value>Defines the redeem limit for the consumer</value>
        [DataMember(Name="redeemPerConsumer", EmitDefaultValue=false)]
        public int? RedeemPerConsumer { get; set; }

        /// <summary>
        /// Rules defined to redeem a reward
        /// </summary>
        /// <value>Rules defined to redeem a reward</value>
        [DataMember(Name="redeemRules", EmitDefaultValue=false)]
        public List<string> RedeemRules { get; set; }

        /// <summary>
        /// object
        /// </summary>
        /// <value>object</value>
        [DataMember(Name="rewardConfigs", EmitDefaultValue=false)]
        public Object RewardConfigs { get; set; }

        /// <summary>
        /// Rule to define the reward
        /// </summary>
        /// <value>Rule to define the reward</value>
        [DataMember(Name="rule", EmitDefaultValue=false)]
        public Object Rule { get; set; }

        /// <summary>
        /// Start date of attribution of the reward
        /// </summary>
        /// <value>Start date of attribution of the reward</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Id of the selected balance while redeeming / attributing a reward
        /// </summary>
        /// <value>Id of the selected balance while redeeming / attributing a reward</value>
        [DataMember(Name="subtractBalanceDefinitionId", EmitDefaultValue=false)]
        public string SubtractBalanceDefinitionId { get; set; }

        /// <summary>
        /// Strategy of the Balance while redeeming / attributing a reward
        /// </summary>
        /// <value>Strategy of the Balance while redeeming / attributing a reward</value>
        [DataMember(Name="subtractBalanceStrategy", EmitDefaultValue=false)]
        public string SubtractBalanceStrategy { get; set; }

        /// <summary>
        /// Amount of balance to be selected while redeeming / attributing a reward
        /// </summary>
        /// <value>Amount of balance to be selected while redeeming / attributing a reward</value>
        [DataMember(Name="subtractBalanceValue", EmitDefaultValue=false)]
        public int? SubtractBalanceValue { get; set; }

        /// <summary>
        /// Value to indicate to subtract full balance or not
        /// </summary>
        /// <value>Value to indicate to subtract full balance or not</value>
        [DataMember(Name="subtractTotalBalance", EmitDefaultValue=false)]
        public bool? SubtractTotalBalance { get; set; }

        /// <summary>
        /// Defines the limit to which a consumer can attribute a reward
        /// </summary>
        /// <value>Defines the limit to which a consumer can attribute a reward</value>
        [DataMember(Name="totalAttribution", EmitDefaultValue=false)]
        public int? TotalAttribution { get; set; }

        /// <summary>
        /// Defines the limit to which a consumer can redeem a reward
        /// </summary>
        /// <value>Defines the limit to which a consumer can redeem a reward</value>
        [DataMember(Name="totalRedeem", EmitDefaultValue=false)]
        public int? TotalRedeem { get; set; }

        /// <summary>
        /// Id of the Rule to be updated for that reward
        /// </summary>
        /// <value>Id of the Rule to be updated for that reward</value>
        [DataMember(Name="triggerId", EmitDefaultValue=false)]
        public string TriggerId { get; set; }

        /// <summary>
        /// Selected unit of the balance
        /// </summary>
        /// <value>Selected unit of the balance</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Timestamp for when this reward was last updated.
        /// </summary>
        /// <value>Timestamp for when this reward was last updated.</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Value of metric in selected config for reward definition
        /// </summary>
        /// <value>Value of metric in selected config for reward definition</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal? Value { get; set; }

        /// <summary>
        /// Type of config selected for reward definition
        /// </summary>
        /// <value>Type of config selected for reward definition</value>
        [DataMember(Name="valueType", EmitDefaultValue=false)]
        public string ValueType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainReward {\n");
            sb.Append("  AttributionPerConsumer: ").Append(AttributionPerConsumer).Append("\n");
            sb.Append("  BalanceDefinitionId: ").Append(BalanceDefinitionId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CodeCount: ").Append(CodeCount).Append("\n");
            sb.Append("  CodeGeneratorId: ").Append(CodeGeneratorId).Append("\n");
            sb.Append("  CodePoolId: ").Append(CodePoolId).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DisabledAt: ").Append(DisabledAt).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExpirationModifier: ").Append(ExpirationModifier).Append("\n");
            sb.Append("  ExpirationUnit: ").Append(ExpirationUnit).Append("\n");
            sb.Append("  ExpirationValue: ").Append(ExpirationValue).Append("\n");
            sb.Append("  Generator: ").Append(Generator).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  LoyaltyProgramId: ").Append(LoyaltyProgramId).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  PublicDescription: ").Append(PublicDescription).Append("\n");
            sb.Append("  PublicImage: ").Append(PublicImage).Append("\n");
            sb.Append("  PublicName: ").Append(PublicName).Append("\n");
            sb.Append("  RedeemPerConsumer: ").Append(RedeemPerConsumer).Append("\n");
            sb.Append("  RedeemRules: ").Append(RedeemRules).Append("\n");
            sb.Append("  RewardConfigs: ").Append(RewardConfigs).Append("\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  SubtractBalanceDefinitionId: ").Append(SubtractBalanceDefinitionId).Append("\n");
            sb.Append("  SubtractBalanceStrategy: ").Append(SubtractBalanceStrategy).Append("\n");
            sb.Append("  SubtractBalanceValue: ").Append(SubtractBalanceValue).Append("\n");
            sb.Append("  SubtractTotalBalance: ").Append(SubtractTotalBalance).Append("\n");
            sb.Append("  TotalAttribution: ").Append(TotalAttribution).Append("\n");
            sb.Append("  TotalRedeem: ").Append(TotalRedeem).Append("\n");
            sb.Append("  TriggerId: ").Append(TriggerId).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueType: ").Append(ValueType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainReward);
        }

        /// <summary>
        /// Returns true if MainReward instances are equal
        /// </summary>
        /// <param name="input">Instance of MainReward to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainReward input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttributionPerConsumer == input.AttributionPerConsumer ||
                    (this.AttributionPerConsumer != null &&
                    this.AttributionPerConsumer.Equals(input.AttributionPerConsumer))
                ) && 
                (
                    this.BalanceDefinitionId == input.BalanceDefinitionId ||
                    (this.BalanceDefinitionId != null &&
                    this.BalanceDefinitionId.Equals(input.BalanceDefinitionId))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CodeCount == input.CodeCount ||
                    (this.CodeCount != null &&
                    this.CodeCount.Equals(input.CodeCount))
                ) && 
                (
                    this.CodeGeneratorId == input.CodeGeneratorId ||
                    (this.CodeGeneratorId != null &&
                    this.CodeGeneratorId.Equals(input.CodeGeneratorId))
                ) && 
                (
                    this.CodePoolId == input.CodePoolId ||
                    (this.CodePoolId != null &&
                    this.CodePoolId.Equals(input.CodePoolId))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DisabledAt == input.DisabledAt ||
                    (this.DisabledAt != null &&
                    this.DisabledAt.Equals(input.DisabledAt))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.ExpirationModifier == input.ExpirationModifier ||
                    (this.ExpirationModifier != null &&
                    this.ExpirationModifier.Equals(input.ExpirationModifier))
                ) && 
                (
                    this.ExpirationUnit == input.ExpirationUnit ||
                    (this.ExpirationUnit != null &&
                    this.ExpirationUnit.Equals(input.ExpirationUnit))
                ) && 
                (
                    this.ExpirationValue == input.ExpirationValue ||
                    (this.ExpirationValue != null &&
                    this.ExpirationValue.Equals(input.ExpirationValue))
                ) && 
                (
                    this.Generator == input.Generator ||
                    (this.Generator != null &&
                    this.Generator.Equals(input.Generator))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Limits == input.Limits ||
                    this.Limits != null &&
                    this.Limits.SequenceEqual(input.Limits)
                ) && 
                (
                    this.LoyaltyProgramId == input.LoyaltyProgramId ||
                    (this.LoyaltyProgramId != null &&
                    this.LoyaltyProgramId.Equals(input.LoyaltyProgramId))
                ) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.PublicDescription == input.PublicDescription ||
                    (this.PublicDescription != null &&
                    this.PublicDescription.Equals(input.PublicDescription))
                ) && 
                (
                    this.PublicImage == input.PublicImage ||
                    (this.PublicImage != null &&
                    this.PublicImage.Equals(input.PublicImage))
                ) && 
                (
                    this.PublicName == input.PublicName ||
                    (this.PublicName != null &&
                    this.PublicName.Equals(input.PublicName))
                ) && 
                (
                    this.RedeemPerConsumer == input.RedeemPerConsumer ||
                    (this.RedeemPerConsumer != null &&
                    this.RedeemPerConsumer.Equals(input.RedeemPerConsumer))
                ) && 
                (
                    this.RedeemRules == input.RedeemRules ||
                    this.RedeemRules != null &&
                    this.RedeemRules.SequenceEqual(input.RedeemRules)
                ) && 
                (
                    this.RewardConfigs == input.RewardConfigs ||
                    (this.RewardConfigs != null &&
                    this.RewardConfigs.Equals(input.RewardConfigs))
                ) && 
                (
                    this.Rule == input.Rule ||
                    (this.Rule != null &&
                    this.Rule.Equals(input.Rule))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.SubtractBalanceDefinitionId == input.SubtractBalanceDefinitionId ||
                    (this.SubtractBalanceDefinitionId != null &&
                    this.SubtractBalanceDefinitionId.Equals(input.SubtractBalanceDefinitionId))
                ) && 
                (
                    this.SubtractBalanceStrategy == input.SubtractBalanceStrategy ||
                    (this.SubtractBalanceStrategy != null &&
                    this.SubtractBalanceStrategy.Equals(input.SubtractBalanceStrategy))
                ) && 
                (
                    this.SubtractBalanceValue == input.SubtractBalanceValue ||
                    (this.SubtractBalanceValue != null &&
                    this.SubtractBalanceValue.Equals(input.SubtractBalanceValue))
                ) && 
                (
                    this.SubtractTotalBalance == input.SubtractTotalBalance ||
                    (this.SubtractTotalBalance != null &&
                    this.SubtractTotalBalance.Equals(input.SubtractTotalBalance))
                ) && 
                (
                    this.TotalAttribution == input.TotalAttribution ||
                    (this.TotalAttribution != null &&
                    this.TotalAttribution.Equals(input.TotalAttribution))
                ) && 
                (
                    this.TotalRedeem == input.TotalRedeem ||
                    (this.TotalRedeem != null &&
                    this.TotalRedeem.Equals(input.TotalRedeem))
                ) && 
                (
                    this.TriggerId == input.TriggerId ||
                    (this.TriggerId != null &&
                    this.TriggerId.Equals(input.TriggerId))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ValueType == input.ValueType ||
                    (this.ValueType != null &&
                    this.ValueType.Equals(input.ValueType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttributionPerConsumer != null)
                    hashCode = hashCode * 59 + this.AttributionPerConsumer.GetHashCode();
                if (this.BalanceDefinitionId != null)
                    hashCode = hashCode * 59 + this.BalanceDefinitionId.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.CodeCount != null)
                    hashCode = hashCode * 59 + this.CodeCount.GetHashCode();
                if (this.CodeGeneratorId != null)
                    hashCode = hashCode * 59 + this.CodeGeneratorId.GetHashCode();
                if (this.CodePoolId != null)
                    hashCode = hashCode * 59 + this.CodePoolId.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DisabledAt != null)
                    hashCode = hashCode * 59 + this.DisabledAt.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.ExpirationModifier != null)
                    hashCode = hashCode * 59 + this.ExpirationModifier.GetHashCode();
                if (this.ExpirationUnit != null)
                    hashCode = hashCode * 59 + this.ExpirationUnit.GetHashCode();
                if (this.ExpirationValue != null)
                    hashCode = hashCode * 59 + this.ExpirationValue.GetHashCode();
                if (this.Generator != null)
                    hashCode = hashCode * 59 + this.Generator.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Limits != null)
                    hashCode = hashCode * 59 + this.Limits.GetHashCode();
                if (this.LoyaltyProgramId != null)
                    hashCode = hashCode * 59 + this.LoyaltyProgramId.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                if (this.PublicDescription != null)
                    hashCode = hashCode * 59 + this.PublicDescription.GetHashCode();
                if (this.PublicImage != null)
                    hashCode = hashCode * 59 + this.PublicImage.GetHashCode();
                if (this.PublicName != null)
                    hashCode = hashCode * 59 + this.PublicName.GetHashCode();
                if (this.RedeemPerConsumer != null)
                    hashCode = hashCode * 59 + this.RedeemPerConsumer.GetHashCode();
                if (this.RedeemRules != null)
                    hashCode = hashCode * 59 + this.RedeemRules.GetHashCode();
                if (this.RewardConfigs != null)
                    hashCode = hashCode * 59 + this.RewardConfigs.GetHashCode();
                if (this.Rule != null)
                    hashCode = hashCode * 59 + this.Rule.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.SubtractBalanceDefinitionId != null)
                    hashCode = hashCode * 59 + this.SubtractBalanceDefinitionId.GetHashCode();
                if (this.SubtractBalanceStrategy != null)
                    hashCode = hashCode * 59 + this.SubtractBalanceStrategy.GetHashCode();
                if (this.SubtractBalanceValue != null)
                    hashCode = hashCode * 59 + this.SubtractBalanceValue.GetHashCode();
                if (this.SubtractTotalBalance != null)
                    hashCode = hashCode * 59 + this.SubtractTotalBalance.GetHashCode();
                if (this.TotalAttribution != null)
                    hashCode = hashCode * 59 + this.TotalAttribution.GetHashCode();
                if (this.TotalRedeem != null)
                    hashCode = hashCode * 59 + this.TotalRedeem.GetHashCode();
                if (this.TriggerId != null)
                    hashCode = hashCode * 59 + this.TriggerId.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ValueType != null)
                    hashCode = hashCode * 59 + this.ValueType.GetHashCode();
                return hashCode;
            }
        }
    }

}
