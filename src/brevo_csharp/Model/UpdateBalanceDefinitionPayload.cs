/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Payload for updating an existing balance definition, including expiry rules, rounding strategies, and constraints.
    /// </summary>
    [DataContract]
    public partial class UpdateBalanceDefinitionPayload :  IEquatable<UpdateBalanceDefinitionPayload>
    {
        /// <summary>
        /// Defines when the balance expires within the selected duration.
        /// </summary>
        /// <value>Defines when the balance expires within the selected duration.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BalanceAvailabilityDurationModifierEnum
        {
            
            /// <summary>
            /// Enum NoModification for value: noModification
            /// </summary>
            [EnumMember(Value = "noModification")]
            NoModification = 1,
            
            /// <summary>
            /// Enum StartOfPeriod for value: startOfPeriod
            /// </summary>
            [EnumMember(Value = "startOfPeriod")]
            StartOfPeriod = 2,
            
            /// <summary>
            /// Enum EndOfPeriod for value: endOfPeriod
            /// </summary>
            [EnumMember(Value = "endOfPeriod")]
            EndOfPeriod = 3
        }

        /// <summary>
        /// Defines when the balance expires within the selected duration.
        /// </summary>
        /// <value>Defines when the balance expires within the selected duration.</value>
        [DataMember(Name="balanceAvailabilityDurationModifier", EmitDefaultValue=false)]
        public BalanceAvailabilityDurationModifierEnum? BalanceAvailabilityDurationModifier { get; set; }
        /// <summary>
        /// Unit of time for balance validity.
        /// </summary>
        /// <value>Unit of time for balance validity.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BalanceAvailabilityDurationUnitEnum
        {
            
            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 1,
            
            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 2,
            
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 3,
            
            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 4
        }

        /// <summary>
        /// Unit of time for balance validity.
        /// </summary>
        /// <value>Unit of time for balance validity.</value>
        [DataMember(Name="balanceAvailabilityDurationUnit", EmitDefaultValue=false)]
        public BalanceAvailabilityDurationUnitEnum? BalanceAvailabilityDurationUnit { get; set; }
        /// <summary>
        /// Defines whether partial credit is allowed when reaching max balance.
        /// </summary>
        /// <value>Defines whether partial credit is allowed when reaching max balance.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BalanceOptionAmountOvertakingStrategyEnum
        {
            
            /// <summary>
            /// Enum Strict for value: strict
            /// </summary>
            [EnumMember(Value = "strict")]
            Strict = 1,
            
            /// <summary>
            /// Enum Partial for value: partial
            /// </summary>
            [EnumMember(Value = "partial")]
            Partial = 2
        }

        /// <summary>
        /// Defines whether partial credit is allowed when reaching max balance.
        /// </summary>
        /// <value>Defines whether partial credit is allowed when reaching max balance.</value>
        [DataMember(Name="balanceOptionAmountOvertakingStrategy", EmitDefaultValue=false)]
        public BalanceOptionAmountOvertakingStrategyEnum? BalanceOptionAmountOvertakingStrategy { get; set; }
        /// <summary>
        /// Rounding strategy for credit transactions.
        /// </summary>
        /// <value>Rounding strategy for credit transactions.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BalanceOptionCreditRoundingEnum
        {
            
            /// <summary>
            /// Enum Lower for value: lower
            /// </summary>
            [EnumMember(Value = "lower")]
            Lower = 1,
            
            /// <summary>
            /// Enum Upper for value: upper
            /// </summary>
            [EnumMember(Value = "upper")]
            Upper = 2,
            
            /// <summary>
            /// Enum Natural for value: natural
            /// </summary>
            [EnumMember(Value = "natural")]
            Natural = 3
        }

        /// <summary>
        /// Rounding strategy for credit transactions.
        /// </summary>
        /// <value>Rounding strategy for credit transactions.</value>
        [DataMember(Name="balanceOptionCreditRounding", EmitDefaultValue=false)]
        public BalanceOptionCreditRoundingEnum? BalanceOptionCreditRounding { get; set; }
        /// <summary>
        /// Rounding strategy for debit transactions.
        /// </summary>
        /// <value>Rounding strategy for debit transactions.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BalanceOptionDebitRoundingEnum
        {
            
            /// <summary>
            /// Enum Lower for value: lower
            /// </summary>
            [EnumMember(Value = "lower")]
            Lower = 1,
            
            /// <summary>
            /// Enum Upper for value: upper
            /// </summary>
            [EnumMember(Value = "upper")]
            Upper = 2,
            
            /// <summary>
            /// Enum Natural for value: natural
            /// </summary>
            [EnumMember(Value = "natural")]
            Natural = 3
        }

        /// <summary>
        /// Rounding strategy for debit transactions.
        /// </summary>
        /// <value>Rounding strategy for debit transactions.</value>
        [DataMember(Name="balanceOptionDebitRounding", EmitDefaultValue=false)]
        public BalanceOptionDebitRoundingEnum? BalanceOptionDebitRounding { get; set; }
        /// <summary>
        /// Unit of balance measurement.
        /// </summary>
        /// <value>Unit of balance measurement.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            
            /// <summary>
            /// Enum POINTS for value: POINTS
            /// </summary>
            [EnumMember(Value = "POINTS")]
            POINTS = 1,
            
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 2,
            
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 3,
            
            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 4,
            
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 5,
            
            /// <summary>
            /// Enum INR for value: INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INR = 6,
            
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 7,
            
            /// <summary>
            /// Enum SGD for value: SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGD = 8,
            
            /// <summary>
            /// Enum RON for value: RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RON = 9,
            
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 10,
            
            /// <summary>
            /// Enum MYR for value: MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYR = 11,
            
            /// <summary>
            /// Enum CLP for value: CLP
            /// </summary>
            [EnumMember(Value = "CLP")]
            CLP = 12,
            
            /// <summary>
            /// Enum PEN for value: PEN
            /// </summary>
            [EnumMember(Value = "PEN")]
            PEN = 13,
            
            /// <summary>
            /// Enum MAD for value: MAD
            /// </summary>
            [EnumMember(Value = "MAD")]
            MAD = 14,
            
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 15,
            
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 16,
            
            /// <summary>
            /// Enum BRL for value: BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL = 17
        }

        /// <summary>
        /// Unit of balance measurement.
        /// </summary>
        /// <value>Unit of balance measurement.</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public UnitEnum Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateBalanceDefinitionPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateBalanceDefinitionPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateBalanceDefinitionPayload" /> class.
        /// </summary>
        /// <param name="balanceAvailabilityDurationModifier">Defines when the balance expires within the selected duration..</param>
        /// <param name="balanceAvailabilityDurationUnit">Unit of time for balance validity..</param>
        /// <param name="balanceAvailabilityDurationValue">Number of time units before the balance expires..</param>
        /// <param name="balanceExpirationDate">Expiration date (&#x60;dd/mm&#x60; format) or empty if not applicable..</param>
        /// <param name="balanceOptionAmountOvertakingStrategy">Defines whether partial credit is allowed when reaching max balance..</param>
        /// <param name="balanceOptionCreditRounding">Rounding strategy for credit transactions..</param>
        /// <param name="balanceOptionDebitRounding">Rounding strategy for debit transactions..</param>
        /// <param name="description">Short description of the balance definition..</param>
        /// <param name="imageRef">URL of an optional image reference..</param>
        /// <param name="maxAmount">Maximum allowable balance amount..</param>
        /// <param name="maxCreditAmountLimit">Maximum credit allowed per operation..</param>
        /// <param name="maxDebitAmountLimit">Maximum debit allowed per operation..</param>
        /// <param name="meta">Optional metadata for the balance definition..</param>
        /// <param name="minAmount">Minimum allowable balance amount..</param>
        /// <param name="name">Name of the balance definition. (required).</param>
        /// <param name="unit">Unit of balance measurement. (required).</param>
        public UpdateBalanceDefinitionPayload(BalanceAvailabilityDurationModifierEnum? balanceAvailabilityDurationModifier = default(BalanceAvailabilityDurationModifierEnum?), BalanceAvailabilityDurationUnitEnum? balanceAvailabilityDurationUnit = default(BalanceAvailabilityDurationUnitEnum?), int? balanceAvailabilityDurationValue = default(int?), string balanceExpirationDate = default(string), BalanceOptionAmountOvertakingStrategyEnum? balanceOptionAmountOvertakingStrategy = default(BalanceOptionAmountOvertakingStrategyEnum?), BalanceOptionCreditRoundingEnum? balanceOptionCreditRounding = default(BalanceOptionCreditRoundingEnum?), BalanceOptionDebitRoundingEnum? balanceOptionDebitRounding = default(BalanceOptionDebitRoundingEnum?), string description = default(string), string imageRef = default(string), decimal? maxAmount = default(decimal?), decimal? maxCreditAmountLimit = default(decimal?), decimal? maxDebitAmountLimit = default(decimal?), Object meta = default(Object), decimal? minAmount = default(decimal?), string name = default(string), UnitEnum unit = default(UnitEnum))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for UpdateBalanceDefinitionPayload and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new InvalidDataException("unit is a required property for UpdateBalanceDefinitionPayload and cannot be null");
            }
            else
            {
                this.Unit = unit;
            }
            this.BalanceAvailabilityDurationModifier = balanceAvailabilityDurationModifier;
            this.BalanceAvailabilityDurationUnit = balanceAvailabilityDurationUnit;
            this.BalanceAvailabilityDurationValue = balanceAvailabilityDurationValue;
            this.BalanceExpirationDate = balanceExpirationDate;
            this.BalanceOptionAmountOvertakingStrategy = balanceOptionAmountOvertakingStrategy;
            this.BalanceOptionCreditRounding = balanceOptionCreditRounding;
            this.BalanceOptionDebitRounding = balanceOptionDebitRounding;
            this.Description = description;
            this.ImageRef = imageRef;
            this.MaxAmount = maxAmount;
            this.MaxCreditAmountLimit = maxCreditAmountLimit;
            this.MaxDebitAmountLimit = maxDebitAmountLimit;
            this.Meta = meta;
            this.MinAmount = minAmount;
        }
        


        /// <summary>
        /// Number of time units before the balance expires.
        /// </summary>
        /// <value>Number of time units before the balance expires.</value>
        [DataMember(Name="balanceAvailabilityDurationValue", EmitDefaultValue=false)]
        public int? BalanceAvailabilityDurationValue { get; set; }

        /// <summary>
        /// Expiration date (&#x60;dd/mm&#x60; format) or empty if not applicable.
        /// </summary>
        /// <value>Expiration date (&#x60;dd/mm&#x60; format) or empty if not applicable.</value>
        [DataMember(Name="balanceExpirationDate", EmitDefaultValue=false)]
        public string BalanceExpirationDate { get; set; }




        /// <summary>
        /// Short description of the balance definition.
        /// </summary>
        /// <value>Short description of the balance definition.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// URL of an optional image reference.
        /// </summary>
        /// <value>URL of an optional image reference.</value>
        [DataMember(Name="imageRef", EmitDefaultValue=false)]
        public string ImageRef { get; set; }

        /// <summary>
        /// Maximum allowable balance amount.
        /// </summary>
        /// <value>Maximum allowable balance amount.</value>
        [DataMember(Name="maxAmount", EmitDefaultValue=false)]
        public decimal? MaxAmount { get; set; }

        /// <summary>
        /// Maximum credit allowed per operation.
        /// </summary>
        /// <value>Maximum credit allowed per operation.</value>
        [DataMember(Name="maxCreditAmountLimit", EmitDefaultValue=false)]
        public decimal? MaxCreditAmountLimit { get; set; }

        /// <summary>
        /// Maximum debit allowed per operation.
        /// </summary>
        /// <value>Maximum debit allowed per operation.</value>
        [DataMember(Name="maxDebitAmountLimit", EmitDefaultValue=false)]
        public decimal? MaxDebitAmountLimit { get; set; }

        /// <summary>
        /// Optional metadata for the balance definition.
        /// </summary>
        /// <value>Optional metadata for the balance definition.</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Object Meta { get; set; }

        /// <summary>
        /// Minimum allowable balance amount.
        /// </summary>
        /// <value>Minimum allowable balance amount.</value>
        [DataMember(Name="minAmount", EmitDefaultValue=false)]
        public decimal? MinAmount { get; set; }

        /// <summary>
        /// Name of the balance definition.
        /// </summary>
        /// <value>Name of the balance definition.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateBalanceDefinitionPayload {\n");
            sb.Append("  BalanceAvailabilityDurationModifier: ").Append(BalanceAvailabilityDurationModifier).Append("\n");
            sb.Append("  BalanceAvailabilityDurationUnit: ").Append(BalanceAvailabilityDurationUnit).Append("\n");
            sb.Append("  BalanceAvailabilityDurationValue: ").Append(BalanceAvailabilityDurationValue).Append("\n");
            sb.Append("  BalanceExpirationDate: ").Append(BalanceExpirationDate).Append("\n");
            sb.Append("  BalanceOptionAmountOvertakingStrategy: ").Append(BalanceOptionAmountOvertakingStrategy).Append("\n");
            sb.Append("  BalanceOptionCreditRounding: ").Append(BalanceOptionCreditRounding).Append("\n");
            sb.Append("  BalanceOptionDebitRounding: ").Append(BalanceOptionDebitRounding).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ImageRef: ").Append(ImageRef).Append("\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  MaxCreditAmountLimit: ").Append(MaxCreditAmountLimit).Append("\n");
            sb.Append("  MaxDebitAmountLimit: ").Append(MaxDebitAmountLimit).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateBalanceDefinitionPayload);
        }

        /// <summary>
        /// Returns true if UpdateBalanceDefinitionPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateBalanceDefinitionPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateBalanceDefinitionPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BalanceAvailabilityDurationModifier == input.BalanceAvailabilityDurationModifier ||
                    (this.BalanceAvailabilityDurationModifier != null &&
                    this.BalanceAvailabilityDurationModifier.Equals(input.BalanceAvailabilityDurationModifier))
                ) && 
                (
                    this.BalanceAvailabilityDurationUnit == input.BalanceAvailabilityDurationUnit ||
                    (this.BalanceAvailabilityDurationUnit != null &&
                    this.BalanceAvailabilityDurationUnit.Equals(input.BalanceAvailabilityDurationUnit))
                ) && 
                (
                    this.BalanceAvailabilityDurationValue == input.BalanceAvailabilityDurationValue ||
                    (this.BalanceAvailabilityDurationValue != null &&
                    this.BalanceAvailabilityDurationValue.Equals(input.BalanceAvailabilityDurationValue))
                ) && 
                (
                    this.BalanceExpirationDate == input.BalanceExpirationDate ||
                    (this.BalanceExpirationDate != null &&
                    this.BalanceExpirationDate.Equals(input.BalanceExpirationDate))
                ) && 
                (
                    this.BalanceOptionAmountOvertakingStrategy == input.BalanceOptionAmountOvertakingStrategy ||
                    (this.BalanceOptionAmountOvertakingStrategy != null &&
                    this.BalanceOptionAmountOvertakingStrategy.Equals(input.BalanceOptionAmountOvertakingStrategy))
                ) && 
                (
                    this.BalanceOptionCreditRounding == input.BalanceOptionCreditRounding ||
                    (this.BalanceOptionCreditRounding != null &&
                    this.BalanceOptionCreditRounding.Equals(input.BalanceOptionCreditRounding))
                ) && 
                (
                    this.BalanceOptionDebitRounding == input.BalanceOptionDebitRounding ||
                    (this.BalanceOptionDebitRounding != null &&
                    this.BalanceOptionDebitRounding.Equals(input.BalanceOptionDebitRounding))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ImageRef == input.ImageRef ||
                    (this.ImageRef != null &&
                    this.ImageRef.Equals(input.ImageRef))
                ) && 
                (
                    this.MaxAmount == input.MaxAmount ||
                    (this.MaxAmount != null &&
                    this.MaxAmount.Equals(input.MaxAmount))
                ) && 
                (
                    this.MaxCreditAmountLimit == input.MaxCreditAmountLimit ||
                    (this.MaxCreditAmountLimit != null &&
                    this.MaxCreditAmountLimit.Equals(input.MaxCreditAmountLimit))
                ) && 
                (
                    this.MaxDebitAmountLimit == input.MaxDebitAmountLimit ||
                    (this.MaxDebitAmountLimit != null &&
                    this.MaxDebitAmountLimit.Equals(input.MaxDebitAmountLimit))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.MinAmount == input.MinAmount ||
                    (this.MinAmount != null &&
                    this.MinAmount.Equals(input.MinAmount))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BalanceAvailabilityDurationModifier != null)
                    hashCode = hashCode * 59 + this.BalanceAvailabilityDurationModifier.GetHashCode();
                if (this.BalanceAvailabilityDurationUnit != null)
                    hashCode = hashCode * 59 + this.BalanceAvailabilityDurationUnit.GetHashCode();
                if (this.BalanceAvailabilityDurationValue != null)
                    hashCode = hashCode * 59 + this.BalanceAvailabilityDurationValue.GetHashCode();
                if (this.BalanceExpirationDate != null)
                    hashCode = hashCode * 59 + this.BalanceExpirationDate.GetHashCode();
                if (this.BalanceOptionAmountOvertakingStrategy != null)
                    hashCode = hashCode * 59 + this.BalanceOptionAmountOvertakingStrategy.GetHashCode();
                if (this.BalanceOptionCreditRounding != null)
                    hashCode = hashCode * 59 + this.BalanceOptionCreditRounding.GetHashCode();
                if (this.BalanceOptionDebitRounding != null)
                    hashCode = hashCode * 59 + this.BalanceOptionDebitRounding.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ImageRef != null)
                    hashCode = hashCode * 59 + this.ImageRef.GetHashCode();
                if (this.MaxAmount != null)
                    hashCode = hashCode * 59 + this.MaxAmount.GetHashCode();
                if (this.MaxCreditAmountLimit != null)
                    hashCode = hashCode * 59 + this.MaxCreditAmountLimit.GetHashCode();
                if (this.MaxDebitAmountLimit != null)
                    hashCode = hashCode * 59 + this.MaxDebitAmountLimit.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.MinAmount != null)
                    hashCode = hashCode * 59 + this.MinAmount.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }
    }

}
