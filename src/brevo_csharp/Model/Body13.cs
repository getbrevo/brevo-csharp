/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Body13
    /// </summary>
    [DataContract]
    public partial class Body13 :  IEquatable<Body13>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body13" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Body13() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body13" /> class.
        /// </summary>
        /// <param name="name">Name of task (required).</param>
        /// <param name="duration">Duration of task in milliseconds [1 minute &#x3D; 60000 ms].</param>
        /// <param name="taskTypeId">Id for type of task e.g Call / Email / Meeting etc. (required).</param>
        /// <param name="date">Task due date and time (required).</param>
        /// <param name="notes">Notes added to a task.</param>
        /// <param name="done">Task marked as done.</param>
        /// <param name="assignToId">To assign a task to a user you can use either the account email or ID..</param>
        /// <param name="contactsIds">Contact ids for contacts linked to this task.</param>
        /// <param name="dealsIds">Deal ids for deals a task is linked to.</param>
        /// <param name="companiesIds">Companies ids for companies a task is linked to.</param>
        /// <param name="reminder">reminder.</param>
        public Body13(string name = default(string), long? duration = default(long?), string taskTypeId = default(string), DateTime? date = default(DateTime?), string notes = default(string), bool? done = default(bool?), string assignToId = default(string), List<int?> contactsIds = default(List<int?>), List<string> dealsIds = default(List<string>), List<string> companiesIds = default(List<string>), TaskReminder reminder = default(TaskReminder))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Body13 and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "taskTypeId" is required (not null)
            if (taskTypeId == null)
            {
                throw new InvalidDataException("taskTypeId is a required property for Body13 and cannot be null");
            }
            else
            {
                this.TaskTypeId = taskTypeId;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for Body13 and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            this.Duration = duration;
            this.Notes = notes;
            this.Done = done;
            this.AssignToId = assignToId;
            this.ContactsIds = contactsIds;
            this.DealsIds = dealsIds;
            this.CompaniesIds = companiesIds;
            this.Reminder = reminder;
        }
        
        /// <summary>
        /// Name of task
        /// </summary>
        /// <value>Name of task</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Duration of task in milliseconds [1 minute &#x3D; 60000 ms]
        /// </summary>
        /// <value>Duration of task in milliseconds [1 minute &#x3D; 60000 ms]</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public long? Duration { get; set; }

        /// <summary>
        /// Id for type of task e.g Call / Email / Meeting etc.
        /// </summary>
        /// <value>Id for type of task e.g Call / Email / Meeting etc.</value>
        [DataMember(Name="taskTypeId", EmitDefaultValue=false)]
        public string TaskTypeId { get; set; }

        /// <summary>
        /// Task due date and time
        /// </summary>
        /// <value>Task due date and time</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Notes added to a task
        /// </summary>
        /// <value>Notes added to a task</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Task marked as done
        /// </summary>
        /// <value>Task marked as done</value>
        [DataMember(Name="done", EmitDefaultValue=false)]
        public bool? Done { get; set; }

        /// <summary>
        /// To assign a task to a user you can use either the account email or ID.
        /// </summary>
        /// <value>To assign a task to a user you can use either the account email or ID.</value>
        [DataMember(Name="assignToId", EmitDefaultValue=false)]
        public string AssignToId { get; set; }

        /// <summary>
        /// Contact ids for contacts linked to this task
        /// </summary>
        /// <value>Contact ids for contacts linked to this task</value>
        [DataMember(Name="contactsIds", EmitDefaultValue=false)]
        public List<int?> ContactsIds { get; set; }

        /// <summary>
        /// Deal ids for deals a task is linked to
        /// </summary>
        /// <value>Deal ids for deals a task is linked to</value>
        [DataMember(Name="dealsIds", EmitDefaultValue=false)]
        public List<string> DealsIds { get; set; }

        /// <summary>
        /// Companies ids for companies a task is linked to
        /// </summary>
        /// <value>Companies ids for companies a task is linked to</value>
        [DataMember(Name="companiesIds", EmitDefaultValue=false)]
        public List<string> CompaniesIds { get; set; }

        /// <summary>
        /// Gets or Sets Reminder
        /// </summary>
        [DataMember(Name="reminder", EmitDefaultValue=false)]
        public TaskReminder Reminder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body13 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  TaskTypeId: ").Append(TaskTypeId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Done: ").Append(Done).Append("\n");
            sb.Append("  AssignToId: ").Append(AssignToId).Append("\n");
            sb.Append("  ContactsIds: ").Append(ContactsIds).Append("\n");
            sb.Append("  DealsIds: ").Append(DealsIds).Append("\n");
            sb.Append("  CompaniesIds: ").Append(CompaniesIds).Append("\n");
            sb.Append("  Reminder: ").Append(Reminder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body13);
        }

        /// <summary>
        /// Returns true if Body13 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body13 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body13 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.TaskTypeId == input.TaskTypeId ||
                    (this.TaskTypeId != null &&
                    this.TaskTypeId.Equals(input.TaskTypeId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Done == input.Done ||
                    (this.Done != null &&
                    this.Done.Equals(input.Done))
                ) && 
                (
                    this.AssignToId == input.AssignToId ||
                    (this.AssignToId != null &&
                    this.AssignToId.Equals(input.AssignToId))
                ) && 
                (
                    this.ContactsIds == input.ContactsIds ||
                    this.ContactsIds != null &&
                    this.ContactsIds.SequenceEqual(input.ContactsIds)
                ) && 
                (
                    this.DealsIds == input.DealsIds ||
                    this.DealsIds != null &&
                    this.DealsIds.SequenceEqual(input.DealsIds)
                ) && 
                (
                    this.CompaniesIds == input.CompaniesIds ||
                    this.CompaniesIds != null &&
                    this.CompaniesIds.SequenceEqual(input.CompaniesIds)
                ) && 
                (
                    this.Reminder == input.Reminder ||
                    (this.Reminder != null &&
                    this.Reminder.Equals(input.Reminder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.TaskTypeId != null)
                    hashCode = hashCode * 59 + this.TaskTypeId.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Done != null)
                    hashCode = hashCode * 59 + this.Done.GetHashCode();
                if (this.AssignToId != null)
                    hashCode = hashCode * 59 + this.AssignToId.GetHashCode();
                if (this.ContactsIds != null)
                    hashCode = hashCode * 59 + this.ContactsIds.GetHashCode();
                if (this.DealsIds != null)
                    hashCode = hashCode * 59 + this.DealsIds.GetHashCode();
                if (this.CompaniesIds != null)
                    hashCode = hashCode * 59 + this.CompaniesIds.GetHashCode();
                if (this.Reminder != null)
                    hashCode = hashCode * 59 + this.Reminder.GetHashCode();
                return hashCode;
            }
        }
    }

}
