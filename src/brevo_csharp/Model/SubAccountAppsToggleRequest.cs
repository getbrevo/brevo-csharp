/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// List of enable/disable applications on the sub-account
    /// </summary>
    [DataContract]
    public partial class SubAccountAppsToggleRequest :  IEquatable<SubAccountAppsToggleRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountAppsToggleRequest" /> class.
        /// </summary>
        /// <param name="inbox">Set this field to enable or disable Inbox on the sub-account / Not applicable on ENTv2.</param>
        /// <param name="whatsapp">Set this field to enable or disable Whatsapp campaigns on the sub-account.</param>
        /// <param name="automation">Set this field to enable or disable Automation on the sub-account.</param>
        /// <param name="emailCampaigns">Set this field to enable or disable Email Campaigns on the sub-account.</param>
        /// <param name="smsCampaigns">Set this field to enable or disable SMS Marketing on the sub-account.</param>
        /// <param name="landingPages">Set this field to enable or disable Landing pages on the sub-account.</param>
        /// <param name="transactionalEmails">Set this field to enable or disable Transactional Email on the sub-account.</param>
        /// <param name="transactionalSms">Set this field to enable or disable Transactional SMS on the sub-account.</param>
        /// <param name="facebookAds">Set this field to enable or disable Facebook ads on the sub-account.</param>
        /// <param name="webPush">Set this field to enable or disable Web Push on the sub-account.</param>
        /// <param name="meetings">Set this field to enable or disable Meetings on the sub-account.</param>
        /// <param name="conversations">Set this field to enable or disable Conversations on the sub-account.</param>
        /// <param name="crm">Set this field to enable or disable Sales CRM on the sub-account.</param>
        public SubAccountAppsToggleRequest(bool? inbox = default(bool?), bool? whatsapp = default(bool?), bool? automation = default(bool?), bool? emailCampaigns = default(bool?), bool? smsCampaigns = default(bool?), bool? landingPages = default(bool?), bool? transactionalEmails = default(bool?), bool? transactionalSms = default(bool?), bool? facebookAds = default(bool?), bool? webPush = default(bool?), bool? meetings = default(bool?), bool? conversations = default(bool?), bool? crm = default(bool?))
        {
            this.Inbox = inbox;
            this.Whatsapp = whatsapp;
            this.Automation = automation;
            this.EmailCampaigns = emailCampaigns;
            this.SmsCampaigns = smsCampaigns;
            this.LandingPages = landingPages;
            this.TransactionalEmails = transactionalEmails;
            this.TransactionalSms = transactionalSms;
            this.FacebookAds = facebookAds;
            this.WebPush = webPush;
            this.Meetings = meetings;
            this.Conversations = conversations;
            this.Crm = crm;
        }
        
        /// <summary>
        /// Set this field to enable or disable Inbox on the sub-account / Not applicable on ENTv2
        /// </summary>
        /// <value>Set this field to enable or disable Inbox on the sub-account / Not applicable on ENTv2</value>
        [DataMember(Name="inbox", EmitDefaultValue=false)]
        public bool? Inbox { get; set; }

        /// <summary>
        /// Set this field to enable or disable Whatsapp campaigns on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable Whatsapp campaigns on the sub-account</value>
        [DataMember(Name="whatsapp", EmitDefaultValue=false)]
        public bool? Whatsapp { get; set; }

        /// <summary>
        /// Set this field to enable or disable Automation on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable Automation on the sub-account</value>
        [DataMember(Name="automation", EmitDefaultValue=false)]
        public bool? Automation { get; set; }

        /// <summary>
        /// Set this field to enable or disable Email Campaigns on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable Email Campaigns on the sub-account</value>
        [DataMember(Name="email-campaigns", EmitDefaultValue=false)]
        public bool? EmailCampaigns { get; set; }

        /// <summary>
        /// Set this field to enable or disable SMS Marketing on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable SMS Marketing on the sub-account</value>
        [DataMember(Name="sms-campaigns", EmitDefaultValue=false)]
        public bool? SmsCampaigns { get; set; }

        /// <summary>
        /// Set this field to enable or disable Landing pages on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable Landing pages on the sub-account</value>
        [DataMember(Name="landing-pages", EmitDefaultValue=false)]
        public bool? LandingPages { get; set; }

        /// <summary>
        /// Set this field to enable or disable Transactional Email on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable Transactional Email on the sub-account</value>
        [DataMember(Name="transactional-emails", EmitDefaultValue=false)]
        public bool? TransactionalEmails { get; set; }

        /// <summary>
        /// Set this field to enable or disable Transactional SMS on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable Transactional SMS on the sub-account</value>
        [DataMember(Name="transactional-sms", EmitDefaultValue=false)]
        public bool? TransactionalSms { get; set; }

        /// <summary>
        /// Set this field to enable or disable Facebook ads on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable Facebook ads on the sub-account</value>
        [DataMember(Name="facebook-ads", EmitDefaultValue=false)]
        public bool? FacebookAds { get; set; }

        /// <summary>
        /// Set this field to enable or disable Web Push on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable Web Push on the sub-account</value>
        [DataMember(Name="web-push", EmitDefaultValue=false)]
        public bool? WebPush { get; set; }

        /// <summary>
        /// Set this field to enable or disable Meetings on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable Meetings on the sub-account</value>
        [DataMember(Name="meetings", EmitDefaultValue=false)]
        public bool? Meetings { get; set; }

        /// <summary>
        /// Set this field to enable or disable Conversations on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable Conversations on the sub-account</value>
        [DataMember(Name="conversations", EmitDefaultValue=false)]
        public bool? Conversations { get; set; }

        /// <summary>
        /// Set this field to enable or disable Sales CRM on the sub-account
        /// </summary>
        /// <value>Set this field to enable or disable Sales CRM on the sub-account</value>
        [DataMember(Name="crm", EmitDefaultValue=false)]
        public bool? Crm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubAccountAppsToggleRequest {\n");
            sb.Append("  Inbox: ").Append(Inbox).Append("\n");
            sb.Append("  Whatsapp: ").Append(Whatsapp).Append("\n");
            sb.Append("  Automation: ").Append(Automation).Append("\n");
            sb.Append("  EmailCampaigns: ").Append(EmailCampaigns).Append("\n");
            sb.Append("  SmsCampaigns: ").Append(SmsCampaigns).Append("\n");
            sb.Append("  LandingPages: ").Append(LandingPages).Append("\n");
            sb.Append("  TransactionalEmails: ").Append(TransactionalEmails).Append("\n");
            sb.Append("  TransactionalSms: ").Append(TransactionalSms).Append("\n");
            sb.Append("  FacebookAds: ").Append(FacebookAds).Append("\n");
            sb.Append("  WebPush: ").Append(WebPush).Append("\n");
            sb.Append("  Meetings: ").Append(Meetings).Append("\n");
            sb.Append("  Conversations: ").Append(Conversations).Append("\n");
            sb.Append("  Crm: ").Append(Crm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubAccountAppsToggleRequest);
        }

        /// <summary>
        /// Returns true if SubAccountAppsToggleRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubAccountAppsToggleRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccountAppsToggleRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Inbox == input.Inbox ||
                    (this.Inbox != null &&
                    this.Inbox.Equals(input.Inbox))
                ) && 
                (
                    this.Whatsapp == input.Whatsapp ||
                    (this.Whatsapp != null &&
                    this.Whatsapp.Equals(input.Whatsapp))
                ) && 
                (
                    this.Automation == input.Automation ||
                    (this.Automation != null &&
                    this.Automation.Equals(input.Automation))
                ) && 
                (
                    this.EmailCampaigns == input.EmailCampaigns ||
                    (this.EmailCampaigns != null &&
                    this.EmailCampaigns.Equals(input.EmailCampaigns))
                ) && 
                (
                    this.SmsCampaigns == input.SmsCampaigns ||
                    (this.SmsCampaigns != null &&
                    this.SmsCampaigns.Equals(input.SmsCampaigns))
                ) && 
                (
                    this.LandingPages == input.LandingPages ||
                    (this.LandingPages != null &&
                    this.LandingPages.Equals(input.LandingPages))
                ) && 
                (
                    this.TransactionalEmails == input.TransactionalEmails ||
                    (this.TransactionalEmails != null &&
                    this.TransactionalEmails.Equals(input.TransactionalEmails))
                ) && 
                (
                    this.TransactionalSms == input.TransactionalSms ||
                    (this.TransactionalSms != null &&
                    this.TransactionalSms.Equals(input.TransactionalSms))
                ) && 
                (
                    this.FacebookAds == input.FacebookAds ||
                    (this.FacebookAds != null &&
                    this.FacebookAds.Equals(input.FacebookAds))
                ) && 
                (
                    this.WebPush == input.WebPush ||
                    (this.WebPush != null &&
                    this.WebPush.Equals(input.WebPush))
                ) && 
                (
                    this.Meetings == input.Meetings ||
                    (this.Meetings != null &&
                    this.Meetings.Equals(input.Meetings))
                ) && 
                (
                    this.Conversations == input.Conversations ||
                    (this.Conversations != null &&
                    this.Conversations.Equals(input.Conversations))
                ) && 
                (
                    this.Crm == input.Crm ||
                    (this.Crm != null &&
                    this.Crm.Equals(input.Crm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inbox != null)
                    hashCode = hashCode * 59 + this.Inbox.GetHashCode();
                if (this.Whatsapp != null)
                    hashCode = hashCode * 59 + this.Whatsapp.GetHashCode();
                if (this.Automation != null)
                    hashCode = hashCode * 59 + this.Automation.GetHashCode();
                if (this.EmailCampaigns != null)
                    hashCode = hashCode * 59 + this.EmailCampaigns.GetHashCode();
                if (this.SmsCampaigns != null)
                    hashCode = hashCode * 59 + this.SmsCampaigns.GetHashCode();
                if (this.LandingPages != null)
                    hashCode = hashCode * 59 + this.LandingPages.GetHashCode();
                if (this.TransactionalEmails != null)
                    hashCode = hashCode * 59 + this.TransactionalEmails.GetHashCode();
                if (this.TransactionalSms != null)
                    hashCode = hashCode * 59 + this.TransactionalSms.GetHashCode();
                if (this.FacebookAds != null)
                    hashCode = hashCode * 59 + this.FacebookAds.GetHashCode();
                if (this.WebPush != null)
                    hashCode = hashCode * 59 + this.WebPush.GetHashCode();
                if (this.Meetings != null)
                    hashCode = hashCode * 59 + this.Meetings.GetHashCode();
                if (this.Conversations != null)
                    hashCode = hashCode * 59 + this.Conversations.GetHashCode();
                if (this.Crm != null)
                    hashCode = hashCode * 59 + this.Crm.GetHashCode();
                return hashCode;
            }
        }
    }

}
