/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// MainNodeResponse
    /// </summary>
    [DataContract]
    public partial class MainNodeResponse :  IEquatable<MainNodeResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainNodeResponse" /> class.
        /// </summary>
        /// <param name="args">array[object].</param>
        /// <param name="array">Array values for rule definition.</param>
        /// <param name="boolean">Boolean values for rule definition.</param>
        /// <param name="description">Description for rule definition.</param>
        /// <param name="_float">Float values for rule definition.</param>
        /// <param name="_int">int64.</param>
        /// <param name="op">Operator selected for rule definition.</param>
        /// <param name="_string">Boolean values for rule definition.</param>
        public MainNodeResponse(List<MainNodeResponse> args = default(List<MainNodeResponse>), List<MainNodeResponse> array = default(List<MainNodeResponse>), bool? boolean = default(bool?), string description = default(string), decimal? _float = default(decimal?), long? _int = default(long?), string op = default(string), string _string = default(string))
        {
            this.Args = args;
            this.Array = array;
            this.Boolean = boolean;
            this.Description = description;
            this.Float = _float;
            this.Int = _int;
            this.Op = op;
            this.String = _string;
        }
        
        /// <summary>
        /// array[object]
        /// </summary>
        /// <value>array[object]</value>
        [DataMember(Name="args", EmitDefaultValue=false)]
        public List<MainNodeResponse> Args { get; set; }

        /// <summary>
        /// Array values for rule definition
        /// </summary>
        /// <value>Array values for rule definition</value>
        [DataMember(Name="array", EmitDefaultValue=false)]
        public List<MainNodeResponse> Array { get; set; }

        /// <summary>
        /// Boolean values for rule definition
        /// </summary>
        /// <value>Boolean values for rule definition</value>
        [DataMember(Name="boolean", EmitDefaultValue=false)]
        public bool? Boolean { get; set; }

        /// <summary>
        /// Description for rule definition
        /// </summary>
        /// <value>Description for rule definition</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Float values for rule definition
        /// </summary>
        /// <value>Float values for rule definition</value>
        [DataMember(Name="float", EmitDefaultValue=false)]
        public decimal? Float { get; set; }

        /// <summary>
        /// int64
        /// </summary>
        /// <value>int64</value>
        [DataMember(Name="int", EmitDefaultValue=false)]
        public long? Int { get; set; }

        /// <summary>
        /// Operator selected for rule definition
        /// </summary>
        /// <value>Operator selected for rule definition</value>
        [DataMember(Name="op", EmitDefaultValue=false)]
        public string Op { get; set; }

        /// <summary>
        /// Boolean values for rule definition
        /// </summary>
        /// <value>Boolean values for rule definition</value>
        [DataMember(Name="string", EmitDefaultValue=false)]
        public string String { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainNodeResponse {\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("  Array: ").Append(Array).Append("\n");
            sb.Append("  Boolean: ").Append(Boolean).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Float: ").Append(Float).Append("\n");
            sb.Append("  Int: ").Append(Int).Append("\n");
            sb.Append("  Op: ").Append(Op).Append("\n");
            sb.Append("  String: ").Append(String).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainNodeResponse);
        }

        /// <summary>
        /// Returns true if MainNodeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MainNodeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainNodeResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Args == input.Args ||
                    this.Args != null &&
                    this.Args.SequenceEqual(input.Args)
                ) && 
                (
                    this.Array == input.Array ||
                    this.Array != null &&
                    this.Array.SequenceEqual(input.Array)
                ) && 
                (
                    this.Boolean == input.Boolean ||
                    (this.Boolean != null &&
                    this.Boolean.Equals(input.Boolean))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Float == input.Float ||
                    (this.Float != null &&
                    this.Float.Equals(input.Float))
                ) && 
                (
                    this.Int == input.Int ||
                    (this.Int != null &&
                    this.Int.Equals(input.Int))
                ) && 
                (
                    this.Op == input.Op ||
                    (this.Op != null &&
                    this.Op.Equals(input.Op))
                ) && 
                (
                    this.String == input.String ||
                    (this.String != null &&
                    this.String.Equals(input.String))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Args != null)
                    hashCode = hashCode * 59 + this.Args.GetHashCode();
                if (this.Array != null)
                    hashCode = hashCode * 59 + this.Array.GetHashCode();
                if (this.Boolean != null)
                    hashCode = hashCode * 59 + this.Boolean.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Float != null)
                    hashCode = hashCode * 59 + this.Float.GetHashCode();
                if (this.Int != null)
                    hashCode = hashCode * 59 + this.Int.GetHashCode();
                if (this.Op != null)
                    hashCode = hashCode * 59 + this.Op.GetHashCode();
                if (this.String != null)
                    hashCode = hashCode * 59 + this.String.GetHashCode();
                return hashCode;
            }
        }
    }

}
