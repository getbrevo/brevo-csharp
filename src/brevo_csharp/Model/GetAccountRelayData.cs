/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Data regarding the transactional email account
    /// </summary>
    [DataContract]
    public partial class GetAccountRelayData :  IEquatable<GetAccountRelayData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountRelayData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAccountRelayData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountRelayData" /> class.
        /// </summary>
        /// <param name="userName">Email to use as login on transactional platform (required).</param>
        /// <param name="relay">URL of the SMTP Relay (required).</param>
        /// <param name="port">Port used for SMTP Relay (required).</param>
        public GetAccountRelayData(string userName = default(string), string relay = default(string), int? port = default(int?))
        {
            // to ensure "userName" is required (not null)
            if (userName == null)
            {
                throw new InvalidDataException("userName is a required property for GetAccountRelayData and cannot be null");
            }
            else
            {
                this.UserName = userName;
            }
            // to ensure "relay" is required (not null)
            if (relay == null)
            {
                throw new InvalidDataException("relay is a required property for GetAccountRelayData and cannot be null");
            }
            else
            {
                this.Relay = relay;
            }
            // to ensure "port" is required (not null)
            if (port == null)
            {
                throw new InvalidDataException("port is a required property for GetAccountRelayData and cannot be null");
            }
            else
            {
                this.Port = port;
            }
        }
        
        /// <summary>
        /// Email to use as login on transactional platform
        /// </summary>
        /// <value>Email to use as login on transactional platform</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// URL of the SMTP Relay
        /// </summary>
        /// <value>URL of the SMTP Relay</value>
        [DataMember(Name="relay", EmitDefaultValue=false)]
        public string Relay { get; set; }

        /// <summary>
        /// Port used for SMTP Relay
        /// </summary>
        /// <value>Port used for SMTP Relay</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAccountRelayData {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Relay: ").Append(Relay).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAccountRelayData);
        }

        /// <summary>
        /// Returns true if GetAccountRelayData instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAccountRelayData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAccountRelayData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Relay == input.Relay ||
                    (this.Relay != null &&
                    this.Relay.Equals(input.Relay))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Relay != null)
                    hashCode = hashCode * 59 + this.Relay.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                return hashCode;
            }
        }
    }

}
