/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Credit details to update
    /// </summary>
    [DataContract]
    public partial class SubAccountsUpdatePlanRequestCredits :  IEquatable<SubAccountsUpdatePlanRequestCredits>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountsUpdatePlanRequestCredits" /> class.
        /// </summary>
        /// <param name="email">Number of email credits | Pass the value -1 for unlimited emails in ENTv2 only.</param>
        /// <param name="sms">Number of SMS credits | Pass the value -1 for unlimited SMS in ENTv2 only.</param>
        /// <param name="wpSubscribers">Number of Push credits, possible value is 0 and -1 | available in ENTv2 only.</param>
        /// <param name="externalFeeds">Number of externalFeeds credits, possible values are 0 or 1 |available in ENTv2 only.</param>
        /// <param name="whatsapp">Number of whatsapp credits | Pass the value -1 for unlimited whatsapp in ENTv2 only.</param>
        public SubAccountsUpdatePlanRequestCredits(long? email = default(long?), float? sms = default(float?), long? wpSubscribers = default(long?), decimal? externalFeeds = default(decimal?), float? whatsapp = default(float?))
        {
            this.Email = email;
            this.Sms = sms;
            this.WpSubscribers = wpSubscribers;
            this.ExternalFeeds = externalFeeds;
            this.Whatsapp = whatsapp;
        }
        
        /// <summary>
        /// Number of email credits | Pass the value -1 for unlimited emails in ENTv2 only
        /// </summary>
        /// <value>Number of email credits | Pass the value -1 for unlimited emails in ENTv2 only</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public long? Email { get; set; }

        /// <summary>
        /// Number of SMS credits | Pass the value -1 for unlimited SMS in ENTv2 only
        /// </summary>
        /// <value>Number of SMS credits | Pass the value -1 for unlimited SMS in ENTv2 only</value>
        [DataMember(Name="sms", EmitDefaultValue=false)]
        public float? Sms { get; set; }

        /// <summary>
        /// Number of Push credits, possible value is 0 and -1 | available in ENTv2 only
        /// </summary>
        /// <value>Number of Push credits, possible value is 0 and -1 | available in ENTv2 only</value>
        [DataMember(Name="wpSubscribers", EmitDefaultValue=false)]
        public long? WpSubscribers { get; set; }

        /// <summary>
        /// Number of externalFeeds credits, possible values are 0 or 1 |available in ENTv2 only
        /// </summary>
        /// <value>Number of externalFeeds credits, possible values are 0 or 1 |available in ENTv2 only</value>
        [DataMember(Name="externalFeeds", EmitDefaultValue=false)]
        public decimal? ExternalFeeds { get; set; }

        /// <summary>
        /// Number of whatsapp credits | Pass the value -1 for unlimited whatsapp in ENTv2 only
        /// </summary>
        /// <value>Number of whatsapp credits | Pass the value -1 for unlimited whatsapp in ENTv2 only</value>
        [DataMember(Name="whatsapp", EmitDefaultValue=false)]
        public float? Whatsapp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubAccountsUpdatePlanRequestCredits {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Sms: ").Append(Sms).Append("\n");
            sb.Append("  WpSubscribers: ").Append(WpSubscribers).Append("\n");
            sb.Append("  ExternalFeeds: ").Append(ExternalFeeds).Append("\n");
            sb.Append("  Whatsapp: ").Append(Whatsapp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubAccountsUpdatePlanRequestCredits);
        }

        /// <summary>
        /// Returns true if SubAccountsUpdatePlanRequestCredits instances are equal
        /// </summary>
        /// <param name="input">Instance of SubAccountsUpdatePlanRequestCredits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccountsUpdatePlanRequestCredits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Sms == input.Sms ||
                    (this.Sms != null &&
                    this.Sms.Equals(input.Sms))
                ) && 
                (
                    this.WpSubscribers == input.WpSubscribers ||
                    (this.WpSubscribers != null &&
                    this.WpSubscribers.Equals(input.WpSubscribers))
                ) && 
                (
                    this.ExternalFeeds == input.ExternalFeeds ||
                    (this.ExternalFeeds != null &&
                    this.ExternalFeeds.Equals(input.ExternalFeeds))
                ) && 
                (
                    this.Whatsapp == input.Whatsapp ||
                    (this.Whatsapp != null &&
                    this.Whatsapp.Equals(input.Whatsapp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Sms != null)
                    hashCode = hashCode * 59 + this.Sms.GetHashCode();
                if (this.WpSubscribers != null)
                    hashCode = hashCode * 59 + this.WpSubscribers.GetHashCode();
                if (this.ExternalFeeds != null)
                    hashCode = hashCode * 59 + this.ExternalFeeds.GetHashCode();
                if (this.Whatsapp != null)
                    hashCode = hashCode * 59 + this.Whatsapp.GetHashCode();
                return hashCode;
            }
        }
    }

}
