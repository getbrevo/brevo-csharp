/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// UpdateEmailCampaign
    /// </summary>
    [DataContract]
    public partial class UpdateEmailCampaign :  IEquatable<UpdateEmailCampaign>
    {
        /// <summary>
        /// Choose the metrics that will determinate the winning version. Considered if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerCriteria&#39; is ignored if passed or alreday exist in record
        /// </summary>
        /// <value>Choose the metrics that will determinate the winning version. Considered if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerCriteria&#39; is ignored if passed or alreday exist in record</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WinnerCriteriaEnum
        {
            
            /// <summary>
            /// Enum Open for value: open
            /// </summary>
            [EnumMember(Value = "open")]
            Open = 1,
            
            /// <summary>
            /// Enum Click for value: click
            /// </summary>
            [EnumMember(Value = "click")]
            Click = 2
        }

        /// <summary>
        /// Choose the metrics that will determinate the winning version. Considered if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerCriteria&#39; is ignored if passed or alreday exist in record
        /// </summary>
        /// <value>Choose the metrics that will determinate the winning version. Considered if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerCriteria&#39; is ignored if passed or alreday exist in record</value>
        [DataMember(Name="winnerCriteria", EmitDefaultValue=false)]
        public WinnerCriteriaEnum? WinnerCriteria { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateEmailCampaign" /> class.
        /// </summary>
        /// <param name="tag">Tag of the campaign.</param>
        /// <param name="sender">sender.</param>
        /// <param name="name">Name of the campaign.</param>
        /// <param name="htmlContent">Body of the message (HTML version). If the campaign is designed using Drag &amp; Drop editor via HTML content, then the design page will not have Drag &amp; Drop editor access for that campaign. REQUIRED if htmlUrl is empty.</param>
        /// <param name="htmlUrl">Url which contents the body of the email message. REQUIRED if htmlContent is empty.</param>
        /// <param name="scheduledAt">UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part)..</param>
        /// <param name="subject">Subject of the campaign.</param>
        /// <param name="previewText">Preview text or preheader of the email campaign.</param>
        /// <param name="replyTo">Email on which campaign recipients will be able to reply to.</param>
        /// <param name="toField">To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization.</param>
        /// <param name="recipients">recipients.</param>
        /// <param name="attachmentUrl">Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps.</param>
        /// <param name="inlineImageActivation">Status of inline image. inlineImageActivation &#x3D; false means image can’t be embedded, &amp; inlineImageActivation &#x3D; true means image can be embedded, in the email. You cannot send a campaign of more than 4MB with images embedded in the email. Campaigns with the images embedded in the email must be sent to less than 5000 contacts. (default to false).</param>
        /// <param name="mirrorActive">Status of mirror links in campaign. mirrorActive &#x3D; false means mirror links are deactivated, &amp; mirrorActive &#x3D; true means mirror links are activated, in the campaign.</param>
        /// <param name="recurring">FOR TRIGGER ONLY ! Type of trigger campaign.recurring &#x3D; false means contact can receive the same Trigger campaign only once, &amp; recurring &#x3D; true means contact can receive the same Trigger campaign several times (default to false).</param>
        /// <param name="footer">Footer of the email campaign.</param>
        /// <param name="header">Header of the email campaign.</param>
        /// <param name="utmCampaign">Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed.</param>
        /// <param name="_params">Pass the set of attributes to customize the type &#39;classic&#39; campaign. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}. The &#39;params&#39; field will get updated, only if the campaign is in New Template Language, else ignored. The New Template Language is dependent on the values of &#39;subject&#39;, &#39;htmlContent/htmlUrl&#39;, &#39;sender.name&#39; &amp; &#39;toField&#39;.</param>
        /// <param name="sendAtBestTime">Set this to true if you want to send your campaign at best time. Note:- if true, warmup ip will be disabled..</param>
        /// <param name="abTesting">Status of A/B Test. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled. &#39;subjectA&#39;, &#39;subjectB&#39;, &#39;splitRule&#39;, &#39;winnerCriteria&#39; &amp; &#39;winnerDelay&#39; will be considered if abTesting is set to true. &#39;subject&#39; if passed is ignored.  Can be set to true only if &#39;sendAtBestTime&#39; is &#39;false&#39;. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B (default to false).</param>
        /// <param name="subjectA">Subject A of the campaign. Considered if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value.</param>
        /// <param name="subjectB">Subject B of the campaign. Considered if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value.</param>
        /// <param name="splitRule">Add the size of your test groups. Considered if abTesting &#x3D; true. We&#39;ll send version A and B to a random sample of recipients, and then the winning version to everyone else.</param>
        /// <param name="winnerCriteria">Choose the metrics that will determinate the winning version. Considered if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerCriteria&#39; is ignored if passed or alreday exist in record.</param>
        /// <param name="winnerDelay">Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 &#x3D; 168 hours. The winning version will be sent at the end of the test. Considered if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerDelay&#39; is ignored if passed or alreday exist in record.</param>
        /// <param name="ipWarmupEnable">Available for dedicated ip clients. Set this to true if you wish to warm up your ip. (default to false).</param>
        /// <param name="initialQuota">Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000..</param>
        /// <param name="increaseRate">Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%..</param>
        /// <param name="unsubscriptionPageId">Enter an unsubscription page id. The page id is a 24 digit alphanumeric id that can be found in the URL when editing the page..</param>
        /// <param name="updateFormId">Mandatory if templateId is used containing the {{ update_profile }} tag. Enter an update profile form id. The form id is a 24 digit alphanumeric id that can be found in the URL when editing the form..</param>
        /// <param name="emailExpirationDate">emailExpirationDate.</param>
        public UpdateEmailCampaign(string tag = default(string), UpdateEmailCampaignSender sender = default(UpdateEmailCampaignSender), string name = default(string), string htmlContent = default(string), string htmlUrl = default(string), string scheduledAt = default(string), string subject = default(string), string previewText = default(string), string replyTo = default(string), string toField = default(string), UpdateEmailCampaignRecipients recipients = default(UpdateEmailCampaignRecipients), string attachmentUrl = default(string), bool? inlineImageActivation = false, bool? mirrorActive = default(bool?), bool? recurring = false, string footer = default(string), string header = default(string), string utmCampaign = default(string), Object _params = default(Object), bool? sendAtBestTime = default(bool?), bool? abTesting = false, string subjectA = default(string), string subjectB = default(string), long? splitRule = default(long?), WinnerCriteriaEnum? winnerCriteria = default(WinnerCriteriaEnum?), long? winnerDelay = default(long?), bool? ipWarmupEnable = false, long? initialQuota = default(long?), long? increaseRate = default(long?), string unsubscriptionPageId = default(string), string updateFormId = default(string), UpdateEmailCampaignEmailExpirationDate emailExpirationDate = default(UpdateEmailCampaignEmailExpirationDate))
        {
            this.Tag = tag;
            this.Sender = sender;
            this.Name = name;
            this.HtmlContent = htmlContent;
            this.HtmlUrl = htmlUrl;
            this.ScheduledAt = scheduledAt;
            this.Subject = subject;
            this.PreviewText = previewText;
            this.ReplyTo = replyTo;
            this.ToField = toField;
            this.Recipients = recipients;
            this.AttachmentUrl = attachmentUrl;
            // use default value if no "inlineImageActivation" provided
            if (inlineImageActivation == null)
            {
                this.InlineImageActivation = false;
            }
            else
            {
                this.InlineImageActivation = inlineImageActivation;
            }
            this.MirrorActive = mirrorActive;
            // use default value if no "recurring" provided
            if (recurring == null)
            {
                this.Recurring = false;
            }
            else
            {
                this.Recurring = recurring;
            }
            this.Footer = footer;
            this.Header = header;
            this.UtmCampaign = utmCampaign;
            this.Params = _params;
            this.SendAtBestTime = sendAtBestTime;
            // use default value if no "abTesting" provided
            if (abTesting == null)
            {
                this.AbTesting = false;
            }
            else
            {
                this.AbTesting = abTesting;
            }
            this.SubjectA = subjectA;
            this.SubjectB = subjectB;
            this.SplitRule = splitRule;
            this.WinnerCriteria = winnerCriteria;
            this.WinnerDelay = winnerDelay;
            // use default value if no "ipWarmupEnable" provided
            if (ipWarmupEnable == null)
            {
                this.IpWarmupEnable = false;
            }
            else
            {
                this.IpWarmupEnable = ipWarmupEnable;
            }
            this.InitialQuota = initialQuota;
            this.IncreaseRate = increaseRate;
            this.UnsubscriptionPageId = unsubscriptionPageId;
            this.UpdateFormId = updateFormId;
            this.EmailExpirationDate = emailExpirationDate;
        }
        
        /// <summary>
        /// Tag of the campaign
        /// </summary>
        /// <value>Tag of the campaign</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public UpdateEmailCampaignSender Sender { get; set; }

        /// <summary>
        /// Name of the campaign
        /// </summary>
        /// <value>Name of the campaign</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Body of the message (HTML version). If the campaign is designed using Drag &amp; Drop editor via HTML content, then the design page will not have Drag &amp; Drop editor access for that campaign. REQUIRED if htmlUrl is empty
        /// </summary>
        /// <value>Body of the message (HTML version). If the campaign is designed using Drag &amp; Drop editor via HTML content, then the design page will not have Drag &amp; Drop editor access for that campaign. REQUIRED if htmlUrl is empty</value>
        [DataMember(Name="htmlContent", EmitDefaultValue=false)]
        public string HtmlContent { get; set; }

        /// <summary>
        /// Url which contents the body of the email message. REQUIRED if htmlContent is empty
        /// </summary>
        /// <value>Url which contents the body of the email message. REQUIRED if htmlContent is empty</value>
        [DataMember(Name="htmlUrl", EmitDefaultValue=false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).
        /// </summary>
        /// <value>UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).</value>
        [DataMember(Name="scheduledAt", EmitDefaultValue=false)]
        public string ScheduledAt { get; set; }

        /// <summary>
        /// Subject of the campaign
        /// </summary>
        /// <value>Subject of the campaign</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Preview text or preheader of the email campaign
        /// </summary>
        /// <value>Preview text or preheader of the email campaign</value>
        [DataMember(Name="previewText", EmitDefaultValue=false)]
        public string PreviewText { get; set; }

        /// <summary>
        /// Email on which campaign recipients will be able to reply to
        /// </summary>
        /// <value>Email on which campaign recipients will be able to reply to</value>
        [DataMember(Name="replyTo", EmitDefaultValue=false)]
        public string ReplyTo { get; set; }

        /// <summary>
        /// To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
        /// </summary>
        /// <value>To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization</value>
        [DataMember(Name="toField", EmitDefaultValue=false)]
        public string ToField { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public UpdateEmailCampaignRecipients Recipients { get; set; }

        /// <summary>
        /// Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
        /// </summary>
        /// <value>Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps</value>
        [DataMember(Name="attachmentUrl", EmitDefaultValue=false)]
        public string AttachmentUrl { get; set; }

        /// <summary>
        /// Status of inline image. inlineImageActivation &#x3D; false means image can’t be embedded, &amp; inlineImageActivation &#x3D; true means image can be embedded, in the email. You cannot send a campaign of more than 4MB with images embedded in the email. Campaigns with the images embedded in the email must be sent to less than 5000 contacts.
        /// </summary>
        /// <value>Status of inline image. inlineImageActivation &#x3D; false means image can’t be embedded, &amp; inlineImageActivation &#x3D; true means image can be embedded, in the email. You cannot send a campaign of more than 4MB with images embedded in the email. Campaigns with the images embedded in the email must be sent to less than 5000 contacts.</value>
        [DataMember(Name="inlineImageActivation", EmitDefaultValue=false)]
        public bool? InlineImageActivation { get; set; }

        /// <summary>
        /// Status of mirror links in campaign. mirrorActive &#x3D; false means mirror links are deactivated, &amp; mirrorActive &#x3D; true means mirror links are activated, in the campaign
        /// </summary>
        /// <value>Status of mirror links in campaign. mirrorActive &#x3D; false means mirror links are deactivated, &amp; mirrorActive &#x3D; true means mirror links are activated, in the campaign</value>
        [DataMember(Name="mirrorActive", EmitDefaultValue=false)]
        public bool? MirrorActive { get; set; }

        /// <summary>
        /// FOR TRIGGER ONLY ! Type of trigger campaign.recurring &#x3D; false means contact can receive the same Trigger campaign only once, &amp; recurring &#x3D; true means contact can receive the same Trigger campaign several times
        /// </summary>
        /// <value>FOR TRIGGER ONLY ! Type of trigger campaign.recurring &#x3D; false means contact can receive the same Trigger campaign only once, &amp; recurring &#x3D; true means contact can receive the same Trigger campaign several times</value>
        [DataMember(Name="recurring", EmitDefaultValue=false)]
        public bool? Recurring { get; set; }

        /// <summary>
        /// Footer of the email campaign
        /// </summary>
        /// <value>Footer of the email campaign</value>
        [DataMember(Name="footer", EmitDefaultValue=false)]
        public string Footer { get; set; }

        /// <summary>
        /// Header of the email campaign
        /// </summary>
        /// <value>Header of the email campaign</value>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public string Header { get; set; }

        /// <summary>
        /// Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed
        /// </summary>
        /// <value>Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed</value>
        [DataMember(Name="utmCampaign", EmitDefaultValue=false)]
        public string UtmCampaign { get; set; }

        /// <summary>
        /// Pass the set of attributes to customize the type &#39;classic&#39; campaign. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}. The &#39;params&#39; field will get updated, only if the campaign is in New Template Language, else ignored. The New Template Language is dependent on the values of &#39;subject&#39;, &#39;htmlContent/htmlUrl&#39;, &#39;sender.name&#39; &amp; &#39;toField&#39;
        /// </summary>
        /// <value>Pass the set of attributes to customize the type &#39;classic&#39; campaign. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}. The &#39;params&#39; field will get updated, only if the campaign is in New Template Language, else ignored. The New Template Language is dependent on the values of &#39;subject&#39;, &#39;htmlContent/htmlUrl&#39;, &#39;sender.name&#39; &amp; &#39;toField&#39;</value>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public Object Params { get; set; }

        /// <summary>
        /// Set this to true if you want to send your campaign at best time. Note:- if true, warmup ip will be disabled.
        /// </summary>
        /// <value>Set this to true if you want to send your campaign at best time. Note:- if true, warmup ip will be disabled.</value>
        [DataMember(Name="sendAtBestTime", EmitDefaultValue=false)]
        public bool? SendAtBestTime { get; set; }

        /// <summary>
        /// Status of A/B Test. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled. &#39;subjectA&#39;, &#39;subjectB&#39;, &#39;splitRule&#39;, &#39;winnerCriteria&#39; &amp; &#39;winnerDelay&#39; will be considered if abTesting is set to true. &#39;subject&#39; if passed is ignored.  Can be set to true only if &#39;sendAtBestTime&#39; is &#39;false&#39;. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
        /// </summary>
        /// <value>Status of A/B Test. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled. &#39;subjectA&#39;, &#39;subjectB&#39;, &#39;splitRule&#39;, &#39;winnerCriteria&#39; &amp; &#39;winnerDelay&#39; will be considered if abTesting is set to true. &#39;subject&#39; if passed is ignored.  Can be set to true only if &#39;sendAtBestTime&#39; is &#39;false&#39;. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B</value>
        [DataMember(Name="abTesting", EmitDefaultValue=false)]
        public bool? AbTesting { get; set; }

        /// <summary>
        /// Subject A of the campaign. Considered if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value
        /// </summary>
        /// <value>Subject A of the campaign. Considered if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value</value>
        [DataMember(Name="subjectA", EmitDefaultValue=false)]
        public string SubjectA { get; set; }

        /// <summary>
        /// Subject B of the campaign. Considered if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value
        /// </summary>
        /// <value>Subject B of the campaign. Considered if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value</value>
        [DataMember(Name="subjectB", EmitDefaultValue=false)]
        public string SubjectB { get; set; }

        /// <summary>
        /// Add the size of your test groups. Considered if abTesting &#x3D; true. We&#39;ll send version A and B to a random sample of recipients, and then the winning version to everyone else
        /// </summary>
        /// <value>Add the size of your test groups. Considered if abTesting &#x3D; true. We&#39;ll send version A and B to a random sample of recipients, and then the winning version to everyone else</value>
        [DataMember(Name="splitRule", EmitDefaultValue=false)]
        public long? SplitRule { get; set; }


        /// <summary>
        /// Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 &#x3D; 168 hours. The winning version will be sent at the end of the test. Considered if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerDelay&#39; is ignored if passed or alreday exist in record
        /// </summary>
        /// <value>Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 &#x3D; 168 hours. The winning version will be sent at the end of the test. Considered if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerDelay&#39; is ignored if passed or alreday exist in record</value>
        [DataMember(Name="winnerDelay", EmitDefaultValue=false)]
        public long? WinnerDelay { get; set; }

        /// <summary>
        /// Available for dedicated ip clients. Set this to true if you wish to warm up your ip.
        /// </summary>
        /// <value>Available for dedicated ip clients. Set this to true if you wish to warm up your ip.</value>
        [DataMember(Name="ipWarmupEnable", EmitDefaultValue=false)]
        public bool? IpWarmupEnable { get; set; }

        /// <summary>
        /// Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
        /// </summary>
        /// <value>Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.</value>
        [DataMember(Name="initialQuota", EmitDefaultValue=false)]
        public long? InitialQuota { get; set; }

        /// <summary>
        /// Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
        /// </summary>
        /// <value>Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.</value>
        [DataMember(Name="increaseRate", EmitDefaultValue=false)]
        public long? IncreaseRate { get; set; }

        /// <summary>
        /// Enter an unsubscription page id. The page id is a 24 digit alphanumeric id that can be found in the URL when editing the page.
        /// </summary>
        /// <value>Enter an unsubscription page id. The page id is a 24 digit alphanumeric id that can be found in the URL when editing the page.</value>
        [DataMember(Name="unsubscriptionPageId", EmitDefaultValue=false)]
        public string UnsubscriptionPageId { get; set; }

        /// <summary>
        /// Mandatory if templateId is used containing the {{ update_profile }} tag. Enter an update profile form id. The form id is a 24 digit alphanumeric id that can be found in the URL when editing the form.
        /// </summary>
        /// <value>Mandatory if templateId is used containing the {{ update_profile }} tag. Enter an update profile form id. The form id is a 24 digit alphanumeric id that can be found in the URL when editing the form.</value>
        [DataMember(Name="updateFormId", EmitDefaultValue=false)]
        public string UpdateFormId { get; set; }

        /// <summary>
        /// Gets or Sets EmailExpirationDate
        /// </summary>
        [DataMember(Name="emailExpirationDate", EmitDefaultValue=false)]
        public UpdateEmailCampaignEmailExpirationDate EmailExpirationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateEmailCampaign {\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  ScheduledAt: ").Append(ScheduledAt).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  PreviewText: ").Append(PreviewText).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  ToField: ").Append(ToField).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  InlineImageActivation: ").Append(InlineImageActivation).Append("\n");
            sb.Append("  MirrorActive: ").Append(MirrorActive).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  UtmCampaign: ").Append(UtmCampaign).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  SendAtBestTime: ").Append(SendAtBestTime).Append("\n");
            sb.Append("  AbTesting: ").Append(AbTesting).Append("\n");
            sb.Append("  SubjectA: ").Append(SubjectA).Append("\n");
            sb.Append("  SubjectB: ").Append(SubjectB).Append("\n");
            sb.Append("  SplitRule: ").Append(SplitRule).Append("\n");
            sb.Append("  WinnerCriteria: ").Append(WinnerCriteria).Append("\n");
            sb.Append("  WinnerDelay: ").Append(WinnerDelay).Append("\n");
            sb.Append("  IpWarmupEnable: ").Append(IpWarmupEnable).Append("\n");
            sb.Append("  InitialQuota: ").Append(InitialQuota).Append("\n");
            sb.Append("  IncreaseRate: ").Append(IncreaseRate).Append("\n");
            sb.Append("  UnsubscriptionPageId: ").Append(UnsubscriptionPageId).Append("\n");
            sb.Append("  UpdateFormId: ").Append(UpdateFormId).Append("\n");
            sb.Append("  EmailExpirationDate: ").Append(EmailExpirationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateEmailCampaign);
        }

        /// <summary>
        /// Returns true if UpdateEmailCampaign instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateEmailCampaign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateEmailCampaign input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HtmlContent == input.HtmlContent ||
                    (this.HtmlContent != null &&
                    this.HtmlContent.Equals(input.HtmlContent))
                ) && 
                (
                    this.HtmlUrl == input.HtmlUrl ||
                    (this.HtmlUrl != null &&
                    this.HtmlUrl.Equals(input.HtmlUrl))
                ) && 
                (
                    this.ScheduledAt == input.ScheduledAt ||
                    (this.ScheduledAt != null &&
                    this.ScheduledAt.Equals(input.ScheduledAt))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.PreviewText == input.PreviewText ||
                    (this.PreviewText != null &&
                    this.PreviewText.Equals(input.PreviewText))
                ) && 
                (
                    this.ReplyTo == input.ReplyTo ||
                    (this.ReplyTo != null &&
                    this.ReplyTo.Equals(input.ReplyTo))
                ) && 
                (
                    this.ToField == input.ToField ||
                    (this.ToField != null &&
                    this.ToField.Equals(input.ToField))
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    (this.Recipients != null &&
                    this.Recipients.Equals(input.Recipients))
                ) && 
                (
                    this.AttachmentUrl == input.AttachmentUrl ||
                    (this.AttachmentUrl != null &&
                    this.AttachmentUrl.Equals(input.AttachmentUrl))
                ) && 
                (
                    this.InlineImageActivation == input.InlineImageActivation ||
                    (this.InlineImageActivation != null &&
                    this.InlineImageActivation.Equals(input.InlineImageActivation))
                ) && 
                (
                    this.MirrorActive == input.MirrorActive ||
                    (this.MirrorActive != null &&
                    this.MirrorActive.Equals(input.MirrorActive))
                ) && 
                (
                    this.Recurring == input.Recurring ||
                    (this.Recurring != null &&
                    this.Recurring.Equals(input.Recurring))
                ) && 
                (
                    this.Footer == input.Footer ||
                    (this.Footer != null &&
                    this.Footer.Equals(input.Footer))
                ) && 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.UtmCampaign == input.UtmCampaign ||
                    (this.UtmCampaign != null &&
                    this.UtmCampaign.Equals(input.UtmCampaign))
                ) && 
                (
                    this.Params == input.Params ||
                    (this.Params != null &&
                    this.Params.Equals(input.Params))
                ) && 
                (
                    this.SendAtBestTime == input.SendAtBestTime ||
                    (this.SendAtBestTime != null &&
                    this.SendAtBestTime.Equals(input.SendAtBestTime))
                ) && 
                (
                    this.AbTesting == input.AbTesting ||
                    (this.AbTesting != null &&
                    this.AbTesting.Equals(input.AbTesting))
                ) && 
                (
                    this.SubjectA == input.SubjectA ||
                    (this.SubjectA != null &&
                    this.SubjectA.Equals(input.SubjectA))
                ) && 
                (
                    this.SubjectB == input.SubjectB ||
                    (this.SubjectB != null &&
                    this.SubjectB.Equals(input.SubjectB))
                ) && 
                (
                    this.SplitRule == input.SplitRule ||
                    (this.SplitRule != null &&
                    this.SplitRule.Equals(input.SplitRule))
                ) && 
                (
                    this.WinnerCriteria == input.WinnerCriteria ||
                    (this.WinnerCriteria != null &&
                    this.WinnerCriteria.Equals(input.WinnerCriteria))
                ) && 
                (
                    this.WinnerDelay == input.WinnerDelay ||
                    (this.WinnerDelay != null &&
                    this.WinnerDelay.Equals(input.WinnerDelay))
                ) && 
                (
                    this.IpWarmupEnable == input.IpWarmupEnable ||
                    (this.IpWarmupEnable != null &&
                    this.IpWarmupEnable.Equals(input.IpWarmupEnable))
                ) && 
                (
                    this.InitialQuota == input.InitialQuota ||
                    (this.InitialQuota != null &&
                    this.InitialQuota.Equals(input.InitialQuota))
                ) && 
                (
                    this.IncreaseRate == input.IncreaseRate ||
                    (this.IncreaseRate != null &&
                    this.IncreaseRate.Equals(input.IncreaseRate))
                ) && 
                (
                    this.UnsubscriptionPageId == input.UnsubscriptionPageId ||
                    (this.UnsubscriptionPageId != null &&
                    this.UnsubscriptionPageId.Equals(input.UnsubscriptionPageId))
                ) && 
                (
                    this.UpdateFormId == input.UpdateFormId ||
                    (this.UpdateFormId != null &&
                    this.UpdateFormId.Equals(input.UpdateFormId))
                ) && 
                (
                    this.EmailExpirationDate == input.EmailExpirationDate ||
                    (this.EmailExpirationDate != null &&
                    this.EmailExpirationDate.Equals(input.EmailExpirationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HtmlContent != null)
                    hashCode = hashCode * 59 + this.HtmlContent.GetHashCode();
                if (this.HtmlUrl != null)
                    hashCode = hashCode * 59 + this.HtmlUrl.GetHashCode();
                if (this.ScheduledAt != null)
                    hashCode = hashCode * 59 + this.ScheduledAt.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.PreviewText != null)
                    hashCode = hashCode * 59 + this.PreviewText.GetHashCode();
                if (this.ReplyTo != null)
                    hashCode = hashCode * 59 + this.ReplyTo.GetHashCode();
                if (this.ToField != null)
                    hashCode = hashCode * 59 + this.ToField.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.AttachmentUrl != null)
                    hashCode = hashCode * 59 + this.AttachmentUrl.GetHashCode();
                if (this.InlineImageActivation != null)
                    hashCode = hashCode * 59 + this.InlineImageActivation.GetHashCode();
                if (this.MirrorActive != null)
                    hashCode = hashCode * 59 + this.MirrorActive.GetHashCode();
                if (this.Recurring != null)
                    hashCode = hashCode * 59 + this.Recurring.GetHashCode();
                if (this.Footer != null)
                    hashCode = hashCode * 59 + this.Footer.GetHashCode();
                if (this.Header != null)
                    hashCode = hashCode * 59 + this.Header.GetHashCode();
                if (this.UtmCampaign != null)
                    hashCode = hashCode * 59 + this.UtmCampaign.GetHashCode();
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                if (this.SendAtBestTime != null)
                    hashCode = hashCode * 59 + this.SendAtBestTime.GetHashCode();
                if (this.AbTesting != null)
                    hashCode = hashCode * 59 + this.AbTesting.GetHashCode();
                if (this.SubjectA != null)
                    hashCode = hashCode * 59 + this.SubjectA.GetHashCode();
                if (this.SubjectB != null)
                    hashCode = hashCode * 59 + this.SubjectB.GetHashCode();
                if (this.SplitRule != null)
                    hashCode = hashCode * 59 + this.SplitRule.GetHashCode();
                if (this.WinnerCriteria != null)
                    hashCode = hashCode * 59 + this.WinnerCriteria.GetHashCode();
                if (this.WinnerDelay != null)
                    hashCode = hashCode * 59 + this.WinnerDelay.GetHashCode();
                if (this.IpWarmupEnable != null)
                    hashCode = hashCode * 59 + this.IpWarmupEnable.GetHashCode();
                if (this.InitialQuota != null)
                    hashCode = hashCode * 59 + this.InitialQuota.GetHashCode();
                if (this.IncreaseRate != null)
                    hashCode = hashCode * 59 + this.IncreaseRate.GetHashCode();
                if (this.UnsubscriptionPageId != null)
                    hashCode = hashCode * 59 + this.UnsubscriptionPageId.GetHashCode();
                if (this.UpdateFormId != null)
                    hashCode = hashCode * 59 + this.UpdateFormId.GetHashCode();
                if (this.EmailExpirationDate != null)
                    hashCode = hashCode * 59 + this.EmailExpirationDate.GetHashCode();
                return hashCode;
            }
        }
    }

}
