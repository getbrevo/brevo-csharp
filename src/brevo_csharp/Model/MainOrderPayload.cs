/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// MainOrderPayload
    /// </summary>
    [DataContract]
    public partial class MainOrderPayload :  IEquatable<MainOrderPayload>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainOrderPayload" /> class.
        /// </summary>
        /// <param name="amount">Total amount of the order.</param>
        /// <param name="billing">Billing information for the order.</param>
        /// <param name="contactId">Unique identifier for the contact.</param>
        /// <param name="coupons">List of coupon codes applied to the order.</param>
        /// <param name="createdAt">Timestamp when the order was created.</param>
        /// <param name="email">Email address associated with the order.</param>
        /// <param name="id">Unique identifier for the order.</param>
        /// <param name="identifiers">Additional identifiers for the order.</param>
        /// <param name="products">List of products in the order.</param>
        /// <param name="status">Current status of the order.</param>
        /// <param name="storeId">Identifier for the store where the order was placed.</param>
        /// <param name="updatedAt">Timestamp when the order was last updated.</param>
        public MainOrderPayload(decimal? amount = default(decimal?), Object billing = default(Object), long? contactId = default(long?), List<string> coupons = default(List<string>), DateTime? createdAt = default(DateTime?), string email = default(string), string id = default(string), Object identifiers = default(Object), List<MainProductPayload> products = default(List<MainProductPayload>), string status = default(string), string storeId = default(string), DateTime? updatedAt = default(DateTime?))
        {
            this.Amount = amount;
            this.Billing = billing;
            this.ContactId = contactId;
            this.Coupons = coupons;
            this.CreatedAt = createdAt;
            this.Email = email;
            this.Id = id;
            this.Identifiers = identifiers;
            this.Products = products;
            this.Status = status;
            this.StoreId = storeId;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Total amount of the order
        /// </summary>
        /// <value>Total amount of the order</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Billing information for the order
        /// </summary>
        /// <value>Billing information for the order</value>
        [DataMember(Name="billing", EmitDefaultValue=false)]
        public Object Billing { get; set; }

        /// <summary>
        /// Unique identifier for the contact
        /// </summary>
        /// <value>Unique identifier for the contact</value>
        [DataMember(Name="contact_id", EmitDefaultValue=false)]
        public long? ContactId { get; set; }

        /// <summary>
        /// List of coupon codes applied to the order
        /// </summary>
        /// <value>List of coupon codes applied to the order</value>
        [DataMember(Name="coupons", EmitDefaultValue=false)]
        public List<string> Coupons { get; set; }

        /// <summary>
        /// Timestamp when the order was created
        /// </summary>
        /// <value>Timestamp when the order was created</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Email address associated with the order
        /// </summary>
        /// <value>Email address associated with the order</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Unique identifier for the order
        /// </summary>
        /// <value>Unique identifier for the order</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifiers for the order
        /// </summary>
        /// <value>Additional identifiers for the order</value>
        [DataMember(Name="identifiers", EmitDefaultValue=false)]
        public Object Identifiers { get; set; }

        /// <summary>
        /// List of products in the order
        /// </summary>
        /// <value>List of products in the order</value>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<MainProductPayload> Products { get; set; }

        /// <summary>
        /// Current status of the order
        /// </summary>
        /// <value>Current status of the order</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Identifier for the store where the order was placed
        /// </summary>
        /// <value>Identifier for the store where the order was placed</value>
        [DataMember(Name="storeId", EmitDefaultValue=false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Timestamp when the order was last updated
        /// </summary>
        /// <value>Timestamp when the order was last updated</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainOrderPayload {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  Coupons: ").Append(Coupons).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainOrderPayload);
        }

        /// <summary>
        /// Returns true if MainOrderPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of MainOrderPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainOrderPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Billing == input.Billing ||
                    (this.Billing != null &&
                    this.Billing.Equals(input.Billing))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.Coupons == input.Coupons ||
                    this.Coupons != null &&
                    this.Coupons.SequenceEqual(input.Coupons)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    (this.Identifiers != null &&
                    this.Identifiers.Equals(input.Identifiers))
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Billing != null)
                    hashCode = hashCode * 59 + this.Billing.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.Coupons != null)
                    hashCode = hashCode * 59 + this.Coupons.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Identifiers != null)
                    hashCode = hashCode * 59 + this.Identifiers.GetHashCode();
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
