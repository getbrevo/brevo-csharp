/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetAccountActivityLogs
    /// </summary>
    [DataContract]
    public partial class GetAccountActivityLogs :  IEquatable<GetAccountActivityLogs>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountActivityLogs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAccountActivityLogs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountActivityLogs" /> class.
        /// </summary>
        /// <param name="action">Type of activity in the account. (required).</param>
        /// <param name="date">Time of the activity. (required).</param>
        /// <param name="userEmail">Email address of the user who performed activity in the account. (required).</param>
        /// <param name="userIp">IP address of the user who performed activity in the account. (required).</param>
        /// <param name="userAgent">Browser details of the user who performed the activity. (required).</param>
        public GetAccountActivityLogs(string action = default(string), string date = default(string), string userEmail = default(string), string userIp = default(string), string userAgent = default(string))
        {
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new InvalidDataException("action is a required property for GetAccountActivityLogs and cannot be null");
            }
            else
            {
                this.Action = action;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for GetAccountActivityLogs and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "userEmail" is required (not null)
            if (userEmail == null)
            {
                throw new InvalidDataException("userEmail is a required property for GetAccountActivityLogs and cannot be null");
            }
            else
            {
                this.UserEmail = userEmail;
            }
            // to ensure "userIp" is required (not null)
            if (userIp == null)
            {
                throw new InvalidDataException("userIp is a required property for GetAccountActivityLogs and cannot be null");
            }
            else
            {
                this.UserIp = userIp;
            }
            // to ensure "userAgent" is required (not null)
            if (userAgent == null)
            {
                throw new InvalidDataException("userAgent is a required property for GetAccountActivityLogs and cannot be null");
            }
            else
            {
                this.UserAgent = userAgent;
            }
        }
        
        /// <summary>
        /// Type of activity in the account.
        /// </summary>
        /// <value>Type of activity in the account.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Time of the activity.
        /// </summary>
        /// <value>Time of the activity.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Email address of the user who performed activity in the account.
        /// </summary>
        /// <value>Email address of the user who performed activity in the account.</value>
        [DataMember(Name="user_email", EmitDefaultValue=false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// IP address of the user who performed activity in the account.
        /// </summary>
        /// <value>IP address of the user who performed activity in the account.</value>
        [DataMember(Name="user_ip", EmitDefaultValue=false)]
        public string UserIp { get; set; }

        /// <summary>
        /// Browser details of the user who performed the activity.
        /// </summary>
        /// <value>Browser details of the user who performed the activity.</value>
        [DataMember(Name="user_agent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAccountActivityLogs {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  UserIp: ").Append(UserIp).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAccountActivityLogs);
        }

        /// <summary>
        /// Returns true if GetAccountActivityLogs instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAccountActivityLogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAccountActivityLogs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                ) && 
                (
                    this.UserIp == input.UserIp ||
                    (this.UserIp != null &&
                    this.UserIp.Equals(input.UserIp))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.UserEmail != null)
                    hashCode = hashCode * 59 + this.UserEmail.GetHashCode();
                if (this.UserIp != null)
                    hashCode = hashCode * 59 + this.UserIp.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                return hashCode;
            }
        }
    }

}
