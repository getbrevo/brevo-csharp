/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetExtendedCampaignStats
    /// </summary>
    [DataContract]
    public partial class GetExtendedCampaignStats :  IEquatable<GetExtendedCampaignStats>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExtendedCampaignStats" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetExtendedCampaignStats() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExtendedCampaignStats" /> class.
        /// </summary>
        /// <param name="globalStats">Overall statistics of the campaign (required).</param>
        /// <param name="campaignStats">List-wise statistics of the campaign. (required).</param>
        /// <param name="mirrorClick">Number of clicks on mirror link (required).</param>
        /// <param name="remaining">Number of remaning emails to send (required).</param>
        /// <param name="linksStats">Statistics about the number of clicks for the links (required).</param>
        /// <param name="statsByDomain">statsByDomain (required).</param>
        /// <param name="statsByDevice">Statistics about the campaign on the basis of various devices (required).</param>
        /// <param name="statsByBrowser">Statistics about the campaign on the basis of various browsers (required).</param>
        public GetExtendedCampaignStats(Object globalStats = default(Object), List<Object> campaignStats = default(List<Object>), long? mirrorClick = default(long?), long? remaining = default(long?), Object linksStats = default(Object), GetStatsByDomain statsByDomain = default(GetStatsByDomain), GetStatsByDevice statsByDevice = default(GetStatsByDevice), GetStatsByBrowser statsByBrowser = default(GetStatsByBrowser))
        {
            // to ensure "globalStats" is required (not null)
            if (globalStats == null)
            {
                throw new InvalidDataException("globalStats is a required property for GetExtendedCampaignStats and cannot be null");
            }
            else
            {
                this.GlobalStats = globalStats;
            }
            // to ensure "campaignStats" is required (not null)
            if (campaignStats == null)
            {
                throw new InvalidDataException("campaignStats is a required property for GetExtendedCampaignStats and cannot be null");
            }
            else
            {
                this.CampaignStats = campaignStats;
            }
            // to ensure "mirrorClick" is required (not null)
            if (mirrorClick == null)
            {
                throw new InvalidDataException("mirrorClick is a required property for GetExtendedCampaignStats and cannot be null");
            }
            else
            {
                this.MirrorClick = mirrorClick;
            }
            // to ensure "remaining" is required (not null)
            if (remaining == null)
            {
                throw new InvalidDataException("remaining is a required property for GetExtendedCampaignStats and cannot be null");
            }
            else
            {
                this.Remaining = remaining;
            }
            // to ensure "linksStats" is required (not null)
            if (linksStats == null)
            {
                throw new InvalidDataException("linksStats is a required property for GetExtendedCampaignStats and cannot be null");
            }
            else
            {
                this.LinksStats = linksStats;
            }
            // to ensure "statsByDomain" is required (not null)
            if (statsByDomain == null)
            {
                throw new InvalidDataException("statsByDomain is a required property for GetExtendedCampaignStats and cannot be null");
            }
            else
            {
                this.StatsByDomain = statsByDomain;
            }
            // to ensure "statsByDevice" is required (not null)
            if (statsByDevice == null)
            {
                throw new InvalidDataException("statsByDevice is a required property for GetExtendedCampaignStats and cannot be null");
            }
            else
            {
                this.StatsByDevice = statsByDevice;
            }
            // to ensure "statsByBrowser" is required (not null)
            if (statsByBrowser == null)
            {
                throw new InvalidDataException("statsByBrowser is a required property for GetExtendedCampaignStats and cannot be null");
            }
            else
            {
                this.StatsByBrowser = statsByBrowser;
            }
        }
        
        /// <summary>
        /// Overall statistics of the campaign
        /// </summary>
        /// <value>Overall statistics of the campaign</value>
        [DataMember(Name="globalStats", EmitDefaultValue=false)]
        public Object GlobalStats { get; set; }

        /// <summary>
        /// List-wise statistics of the campaign.
        /// </summary>
        /// <value>List-wise statistics of the campaign.</value>
        [DataMember(Name="campaignStats", EmitDefaultValue=false)]
        public List<Object> CampaignStats { get; set; }

        /// <summary>
        /// Number of clicks on mirror link
        /// </summary>
        /// <value>Number of clicks on mirror link</value>
        [DataMember(Name="mirrorClick", EmitDefaultValue=false)]
        public long? MirrorClick { get; set; }

        /// <summary>
        /// Number of remaning emails to send
        /// </summary>
        /// <value>Number of remaning emails to send</value>
        [DataMember(Name="remaining", EmitDefaultValue=false)]
        public long? Remaining { get; set; }

        /// <summary>
        /// Statistics about the number of clicks for the links
        /// </summary>
        /// <value>Statistics about the number of clicks for the links</value>
        [DataMember(Name="linksStats", EmitDefaultValue=false)]
        public Object LinksStats { get; set; }

        /// <summary>
        /// Gets or Sets StatsByDomain
        /// </summary>
        [DataMember(Name="statsByDomain", EmitDefaultValue=false)]
        public GetStatsByDomain StatsByDomain { get; set; }

        /// <summary>
        /// Statistics about the campaign on the basis of various devices
        /// </summary>
        /// <value>Statistics about the campaign on the basis of various devices</value>
        [DataMember(Name="statsByDevice", EmitDefaultValue=false)]
        public GetStatsByDevice StatsByDevice { get; set; }

        /// <summary>
        /// Statistics about the campaign on the basis of various browsers
        /// </summary>
        /// <value>Statistics about the campaign on the basis of various browsers</value>
        [DataMember(Name="statsByBrowser", EmitDefaultValue=false)]
        public GetStatsByBrowser StatsByBrowser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetExtendedCampaignStats {\n");
            sb.Append("  GlobalStats: ").Append(GlobalStats).Append("\n");
            sb.Append("  CampaignStats: ").Append(CampaignStats).Append("\n");
            sb.Append("  MirrorClick: ").Append(MirrorClick).Append("\n");
            sb.Append("  Remaining: ").Append(Remaining).Append("\n");
            sb.Append("  LinksStats: ").Append(LinksStats).Append("\n");
            sb.Append("  StatsByDomain: ").Append(StatsByDomain).Append("\n");
            sb.Append("  StatsByDevice: ").Append(StatsByDevice).Append("\n");
            sb.Append("  StatsByBrowser: ").Append(StatsByBrowser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetExtendedCampaignStats);
        }

        /// <summary>
        /// Returns true if GetExtendedCampaignStats instances are equal
        /// </summary>
        /// <param name="input">Instance of GetExtendedCampaignStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetExtendedCampaignStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GlobalStats == input.GlobalStats ||
                    (this.GlobalStats != null &&
                    this.GlobalStats.Equals(input.GlobalStats))
                ) && 
                (
                    this.CampaignStats == input.CampaignStats ||
                    this.CampaignStats != null &&
                    this.CampaignStats.SequenceEqual(input.CampaignStats)
                ) && 
                (
                    this.MirrorClick == input.MirrorClick ||
                    (this.MirrorClick != null &&
                    this.MirrorClick.Equals(input.MirrorClick))
                ) && 
                (
                    this.Remaining == input.Remaining ||
                    (this.Remaining != null &&
                    this.Remaining.Equals(input.Remaining))
                ) && 
                (
                    this.LinksStats == input.LinksStats ||
                    (this.LinksStats != null &&
                    this.LinksStats.Equals(input.LinksStats))
                ) && 
                (
                    this.StatsByDomain == input.StatsByDomain ||
                    (this.StatsByDomain != null &&
                    this.StatsByDomain.Equals(input.StatsByDomain))
                ) && 
                (
                    this.StatsByDevice == input.StatsByDevice ||
                    (this.StatsByDevice != null &&
                    this.StatsByDevice.Equals(input.StatsByDevice))
                ) && 
                (
                    this.StatsByBrowser == input.StatsByBrowser ||
                    (this.StatsByBrowser != null &&
                    this.StatsByBrowser.Equals(input.StatsByBrowser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GlobalStats != null)
                    hashCode = hashCode * 59 + this.GlobalStats.GetHashCode();
                if (this.CampaignStats != null)
                    hashCode = hashCode * 59 + this.CampaignStats.GetHashCode();
                if (this.MirrorClick != null)
                    hashCode = hashCode * 59 + this.MirrorClick.GetHashCode();
                if (this.Remaining != null)
                    hashCode = hashCode * 59 + this.Remaining.GetHashCode();
                if (this.LinksStats != null)
                    hashCode = hashCode * 59 + this.LinksStats.GetHashCode();
                if (this.StatsByDomain != null)
                    hashCode = hashCode * 59 + this.StatsByDomain.GetHashCode();
                if (this.StatsByDevice != null)
                    hashCode = hashCode * 59 + this.StatsByDevice.GetHashCode();
                if (this.StatsByBrowser != null)
                    hashCode = hashCode * 59 + this.StatsByBrowser.GetHashCode();
                return hashCode;
            }
        }
    }

}
