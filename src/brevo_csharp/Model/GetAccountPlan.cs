/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetAccountPlan
    /// </summary>
    [DataContract]
    public partial class GetAccountPlan :  IEquatable<GetAccountPlan>
    {
        /// <summary>
        /// Displays the plan type of the user
        /// </summary>
        /// <value>Displays the plan type of the user</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum PayAsYouGo for value: payAsYouGo
            /// </summary>
            [EnumMember(Value = "payAsYouGo")]
            PayAsYouGo = 1,
            
            /// <summary>
            /// Enum Free for value: free
            /// </summary>
            [EnumMember(Value = "free")]
            Free = 2,
            
            /// <summary>
            /// Enum Subscription for value: subscription
            /// </summary>
            [EnumMember(Value = "subscription")]
            Subscription = 3,
            
            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            [EnumMember(Value = "sms")]
            Sms = 4
        }

        /// <summary>
        /// Displays the plan type of the user
        /// </summary>
        /// <value>Displays the plan type of the user</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// This is the type of the credit, \&quot;Send Limit\&quot; is one of the possible types of credit of a user. \&quot;Send Limit\&quot; implies the total number of emails you can send to the subscribers in your account.
        /// </summary>
        /// <value>This is the type of the credit, \&quot;Send Limit\&quot; is one of the possible types of credit of a user. \&quot;Send Limit\&quot; implies the total number of emails you can send to the subscribers in your account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CreditsTypeEnum
        {
            
            /// <summary>
            /// Enum SendLimit for value: sendLimit
            /// </summary>
            [EnumMember(Value = "sendLimit")]
            SendLimit = 1
        }

        /// <summary>
        /// This is the type of the credit, \&quot;Send Limit\&quot; is one of the possible types of credit of a user. \&quot;Send Limit\&quot; implies the total number of emails you can send to the subscribers in your account.
        /// </summary>
        /// <value>This is the type of the credit, \&quot;Send Limit\&quot; is one of the possible types of credit of a user. \&quot;Send Limit\&quot; implies the total number of emails you can send to the subscribers in your account.</value>
        [DataMember(Name="creditsType", EmitDefaultValue=false)]
        public CreditsTypeEnum CreditsType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAccountPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountPlan" /> class.
        /// </summary>
        /// <param name="type">Displays the plan type of the user (required).</param>
        /// <param name="creditsType">This is the type of the credit, \&quot;Send Limit\&quot; is one of the possible types of credit of a user. \&quot;Send Limit\&quot; implies the total number of emails you can send to the subscribers in your account. (required).</param>
        /// <param name="credits">Remaining credits of the user (required).</param>
        /// <param name="startDate">Date of the period from which the plan will start (only available for \&quot;subscription\&quot; plan type).</param>
        /// <param name="endDate">Date of the period from which the plan will end (only available for \&quot;subscription\&quot; plan type).</param>
        public GetAccountPlan(TypeEnum type = default(TypeEnum), CreditsTypeEnum creditsType = default(CreditsTypeEnum), float? credits = default(float?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for GetAccountPlan and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "creditsType" is required (not null)
            if (creditsType == null)
            {
                throw new InvalidDataException("creditsType is a required property for GetAccountPlan and cannot be null");
            }
            else
            {
                this.CreditsType = creditsType;
            }
            // to ensure "credits" is required (not null)
            if (credits == null)
            {
                throw new InvalidDataException("credits is a required property for GetAccountPlan and cannot be null");
            }
            else
            {
                this.Credits = credits;
            }
            this.StartDate = startDate;
            this.EndDate = endDate;
        }
        


        /// <summary>
        /// Remaining credits of the user
        /// </summary>
        /// <value>Remaining credits of the user</value>
        [DataMember(Name="credits", EmitDefaultValue=false)]
        public float? Credits { get; set; }

        /// <summary>
        /// Date of the period from which the plan will start (only available for \&quot;subscription\&quot; plan type)
        /// </summary>
        /// <value>Date of the period from which the plan will start (only available for \&quot;subscription\&quot; plan type)</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Date of the period from which the plan will end (only available for \&quot;subscription\&quot; plan type)
        /// </summary>
        /// <value>Date of the period from which the plan will end (only available for \&quot;subscription\&quot; plan type)</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAccountPlan {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreditsType: ").Append(CreditsType).Append("\n");
            sb.Append("  Credits: ").Append(Credits).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAccountPlan);
        }

        /// <summary>
        /// Returns true if GetAccountPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAccountPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAccountPlan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CreditsType == input.CreditsType ||
                    (this.CreditsType != null &&
                    this.CreditsType.Equals(input.CreditsType))
                ) && 
                (
                    this.Credits == input.Credits ||
                    (this.Credits != null &&
                    this.Credits.Equals(input.Credits))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CreditsType != null)
                    hashCode = hashCode * 59 + this.CreditsType.GetHashCode();
                if (this.Credits != null)
                    hashCode = hashCode * 59 + this.Credits.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                return hashCode;
            }
        }
    }

}
