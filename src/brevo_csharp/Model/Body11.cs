/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Body11
    /// </summary>
    [DataContract]
    public partial class Body11 :  IEquatable<Body11>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body11" /> class.
        /// </summary>
        /// <param name="name">Name of deal.</param>
        /// <param name="attributes">Attributes for deal update  To assign owner of a Deal you can send attributes.deal_owner and utilize the account email or ID.  If you wish to update the pipeline of a deal you need to provide the &#x60;pipeline&#x60; and the &#x60;deal_stage&#x60;.  Pipeline and deal_stage are ids you can fetch using this endpoint &#x60;/crm/pipeline/details/{pipelineID}&#x60; .</param>
        /// <param name="linkedContactsIds">Warning - Using PATCH on linkedContactIds replaces the list of linked contacts. Omitted IDs will be removed..</param>
        /// <param name="linkedCompaniesIds">Warning - Using PATCH on linkedCompaniesIds replaces the list of linked contacts. Omitted IDs will be removed..</param>
        public Body11(string name = default(string), Object attributes = default(Object), List<long?> linkedContactsIds = default(List<long?>), List<string> linkedCompaniesIds = default(List<string>))
        {
            this.Name = name;
            this.Attributes = attributes;
            this.LinkedContactsIds = linkedContactsIds;
            this.LinkedCompaniesIds = linkedCompaniesIds;
        }
        
        /// <summary>
        /// Name of deal
        /// </summary>
        /// <value>Name of deal</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Attributes for deal update  To assign owner of a Deal you can send attributes.deal_owner and utilize the account email or ID.  If you wish to update the pipeline of a deal you need to provide the &#x60;pipeline&#x60; and the &#x60;deal_stage&#x60;.  Pipeline and deal_stage are ids you can fetch using this endpoint &#x60;/crm/pipeline/details/{pipelineID}&#x60; 
        /// </summary>
        /// <value>Attributes for deal update  To assign owner of a Deal you can send attributes.deal_owner and utilize the account email or ID.  If you wish to update the pipeline of a deal you need to provide the &#x60;pipeline&#x60; and the &#x60;deal_stage&#x60;.  Pipeline and deal_stage are ids you can fetch using this endpoint &#x60;/crm/pipeline/details/{pipelineID}&#x60; </value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Object Attributes { get; set; }

        /// <summary>
        /// Warning - Using PATCH on linkedContactIds replaces the list of linked contacts. Omitted IDs will be removed.
        /// </summary>
        /// <value>Warning - Using PATCH on linkedContactIds replaces the list of linked contacts. Omitted IDs will be removed.</value>
        [DataMember(Name="linkedContactsIds", EmitDefaultValue=false)]
        public List<long?> LinkedContactsIds { get; set; }

        /// <summary>
        /// Warning - Using PATCH on linkedCompaniesIds replaces the list of linked contacts. Omitted IDs will be removed.
        /// </summary>
        /// <value>Warning - Using PATCH on linkedCompaniesIds replaces the list of linked contacts. Omitted IDs will be removed.</value>
        [DataMember(Name="linkedCompaniesIds", EmitDefaultValue=false)]
        public List<string> LinkedCompaniesIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body11 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  LinkedContactsIds: ").Append(LinkedContactsIds).Append("\n");
            sb.Append("  LinkedCompaniesIds: ").Append(LinkedCompaniesIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body11);
        }

        /// <summary>
        /// Returns true if Body11 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body11 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body11 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.LinkedContactsIds == input.LinkedContactsIds ||
                    this.LinkedContactsIds != null &&
                    this.LinkedContactsIds.SequenceEqual(input.LinkedContactsIds)
                ) && 
                (
                    this.LinkedCompaniesIds == input.LinkedCompaniesIds ||
                    this.LinkedCompaniesIds != null &&
                    this.LinkedCompaniesIds.SequenceEqual(input.LinkedCompaniesIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.LinkedContactsIds != null)
                    hashCode = hashCode * 59 + this.LinkedContactsIds.GetHashCode();
                if (this.LinkedCompaniesIds != null)
                    hashCode = hashCode * 59 + this.LinkedCompaniesIds.GetHashCode();
                return hashCode;
            }
        }
    }

}
