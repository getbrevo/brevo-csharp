/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// UpdateTierGroupRequest
    /// </summary>
    [DataContract]
    public partial class UpdateTierGroupRequest :  IEquatable<UpdateTierGroupRequest>
    {
        /// <summary>
        /// Select real_time to upgrade tier on real time balance updates. Select membership_anniversary to upgrade tier on subscription anniversary. Select tier_anniversary to upgrade tier on tier anniversary.
        /// </summary>
        /// <value>Select real_time to upgrade tier on real time balance updates. Select membership_anniversary to upgrade tier on subscription anniversary. Select tier_anniversary to upgrade tier on tier anniversary.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UpgradeStrategyEnum
        {
            
            /// <summary>
            /// Enum Realtime for value: real_time
            /// </summary>
            [EnumMember(Value = "real_time")]
            Realtime = 1,
            
            /// <summary>
            /// Enum Membershipanniversary for value: membership_anniversary
            /// </summary>
            [EnumMember(Value = "membership_anniversary")]
            Membershipanniversary = 2,
            
            /// <summary>
            /// Enum Tieranniversary for value: tier_anniversary
            /// </summary>
            [EnumMember(Value = "tier_anniversary")]
            Tieranniversary = 3
        }

        /// <summary>
        /// Select real_time to upgrade tier on real time balance updates. Select membership_anniversary to upgrade tier on subscription anniversary. Select tier_anniversary to upgrade tier on tier anniversary.
        /// </summary>
        /// <value>Select real_time to upgrade tier on real time balance updates. Select membership_anniversary to upgrade tier on subscription anniversary. Select tier_anniversary to upgrade tier on tier anniversary.</value>
        [DataMember(Name="upgradeStrategy", EmitDefaultValue=false)]
        public UpgradeStrategyEnum UpgradeStrategy { get; set; }
        /// <summary>
        /// Select real_time to downgrade tier on real time balance updates. Select membership_anniversary to downgrade tier on subscription anniversary. Select tier_anniversary to downgrade tier on tier anniversary.
        /// </summary>
        /// <value>Select real_time to downgrade tier on real time balance updates. Select membership_anniversary to downgrade tier on subscription anniversary. Select tier_anniversary to downgrade tier on tier anniversary.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DowngradeStrategyEnum
        {
            
            /// <summary>
            /// Enum Realtime for value: real_time
            /// </summary>
            [EnumMember(Value = "real_time")]
            Realtime = 1,
            
            /// <summary>
            /// Enum Membershipanniversary for value: membership_anniversary
            /// </summary>
            [EnumMember(Value = "membership_anniversary")]
            Membershipanniversary = 2,
            
            /// <summary>
            /// Enum Tieranniversary for value: tier_anniversary
            /// </summary>
            [EnumMember(Value = "tier_anniversary")]
            Tieranniversary = 3
        }

        /// <summary>
        /// Select real_time to downgrade tier on real time balance updates. Select membership_anniversary to downgrade tier on subscription anniversary. Select tier_anniversary to downgrade tier on tier anniversary.
        /// </summary>
        /// <value>Select real_time to downgrade tier on real time balance updates. Select membership_anniversary to downgrade tier on subscription anniversary. Select tier_anniversary to downgrade tier on tier anniversary.</value>
        [DataMember(Name="downgradeStrategy", EmitDefaultValue=false)]
        public DowngradeStrategyEnum DowngradeStrategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateTierGroupRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateTierGroupRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateTierGroupRequest" /> class.
        /// </summary>
        /// <param name="name">Name of the tier group (required).</param>
        /// <param name="tierOrder">Order of the tiers in the group in ascending order (required).</param>
        /// <param name="upgradeStrategy">Select real_time to upgrade tier on real time balance updates. Select membership_anniversary to upgrade tier on subscription anniversary. Select tier_anniversary to upgrade tier on tier anniversary. (required) (default to UpgradeStrategyEnum.Realtime).</param>
        /// <param name="downgradeStrategy">Select real_time to downgrade tier on real time balance updates. Select membership_anniversary to downgrade tier on subscription anniversary. Select tier_anniversary to downgrade tier on tier anniversary. (required) (default to DowngradeStrategyEnum.Realtime).</param>
        public UpdateTierGroupRequest(string name = default(string), List<Guid?> tierOrder = default(List<Guid?>), UpgradeStrategyEnum upgradeStrategy = UpgradeStrategyEnum.Realtime, DowngradeStrategyEnum downgradeStrategy = DowngradeStrategyEnum.Realtime)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for UpdateTierGroupRequest and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "tierOrder" is required (not null)
            if (tierOrder == null)
            {
                throw new InvalidDataException("tierOrder is a required property for UpdateTierGroupRequest and cannot be null");
            }
            else
            {
                this.TierOrder = tierOrder;
            }
            // to ensure "upgradeStrategy" is required (not null)
            if (upgradeStrategy == null)
            {
                throw new InvalidDataException("upgradeStrategy is a required property for UpdateTierGroupRequest and cannot be null");
            }
            else
            {
                this.UpgradeStrategy = upgradeStrategy;
            }
            // to ensure "downgradeStrategy" is required (not null)
            if (downgradeStrategy == null)
            {
                throw new InvalidDataException("downgradeStrategy is a required property for UpdateTierGroupRequest and cannot be null");
            }
            else
            {
                this.DowngradeStrategy = downgradeStrategy;
            }
        }
        
        /// <summary>
        /// Name of the tier group
        /// </summary>
        /// <value>Name of the tier group</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Order of the tiers in the group in ascending order
        /// </summary>
        /// <value>Order of the tiers in the group in ascending order</value>
        [DataMember(Name="tierOrder", EmitDefaultValue=false)]
        public List<Guid?> TierOrder { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateTierGroupRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TierOrder: ").Append(TierOrder).Append("\n");
            sb.Append("  UpgradeStrategy: ").Append(UpgradeStrategy).Append("\n");
            sb.Append("  DowngradeStrategy: ").Append(DowngradeStrategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateTierGroupRequest);
        }

        /// <summary>
        /// Returns true if UpdateTierGroupRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateTierGroupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateTierGroupRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TierOrder == input.TierOrder ||
                    this.TierOrder != null &&
                    this.TierOrder.SequenceEqual(input.TierOrder)
                ) && 
                (
                    this.UpgradeStrategy == input.UpgradeStrategy ||
                    (this.UpgradeStrategy != null &&
                    this.UpgradeStrategy.Equals(input.UpgradeStrategy))
                ) && 
                (
                    this.DowngradeStrategy == input.DowngradeStrategy ||
                    (this.DowngradeStrategy != null &&
                    this.DowngradeStrategy.Equals(input.DowngradeStrategy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TierOrder != null)
                    hashCode = hashCode * 59 + this.TierOrder.GetHashCode();
                if (this.UpgradeStrategy != null)
                    hashCode = hashCode * 59 + this.UpgradeStrategy.GetHashCode();
                if (this.DowngradeStrategy != null)
                    hashCode = hashCode * 59 + this.DowngradeStrategy.GetHashCode();
                return hashCode;
            }
        }
    }

}
