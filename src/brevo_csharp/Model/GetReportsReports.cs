/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetReportsReports
    /// </summary>
    [DataContract]
    public partial class GetReportsReports :  IEquatable<GetReportsReports>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetReportsReports" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetReportsReports() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetReportsReports" /> class.
        /// </summary>
        /// <param name="date">Date of the statistics (required).</param>
        /// <param name="requests">Number of requests for the date (required).</param>
        /// <param name="delivered">Number of delivered emails for the date (required).</param>
        /// <param name="hardBounces">Number of hardbounces for the date (required).</param>
        /// <param name="softBounces">Number of softbounces for the date (required).</param>
        /// <param name="clicks">Number of clicks for the date (required).</param>
        /// <param name="uniqueClicks">Number of unique clicks for the date (required).</param>
        /// <param name="opens">Number of openings for the date (required).</param>
        /// <param name="uniqueOpens">Number of unique openings for the date (required).</param>
        /// <param name="spamReports">Number of complaints (spam reports) for the date (required).</param>
        /// <param name="blocked">Number of blocked emails for the date (required).</param>
        /// <param name="invalid">Number of invalid emails for the date (required).</param>
        /// <param name="unsubscribed">Number of unsubscribed emails for the date (required).</param>
        public GetReportsReports(DateTime? date = default(DateTime?), long? requests = default(long?), long? delivered = default(long?), long? hardBounces = default(long?), long? softBounces = default(long?), long? clicks = default(long?), long? uniqueClicks = default(long?), long? opens = default(long?), long? uniqueOpens = default(long?), long? spamReports = default(long?), long? blocked = default(long?), long? invalid = default(long?), long? unsubscribed = default(long?))
        {
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "requests" is required (not null)
            if (requests == null)
            {
                throw new InvalidDataException("requests is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.Requests = requests;
            }
            // to ensure "delivered" is required (not null)
            if (delivered == null)
            {
                throw new InvalidDataException("delivered is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.Delivered = delivered;
            }
            // to ensure "hardBounces" is required (not null)
            if (hardBounces == null)
            {
                throw new InvalidDataException("hardBounces is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.HardBounces = hardBounces;
            }
            // to ensure "softBounces" is required (not null)
            if (softBounces == null)
            {
                throw new InvalidDataException("softBounces is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.SoftBounces = softBounces;
            }
            // to ensure "clicks" is required (not null)
            if (clicks == null)
            {
                throw new InvalidDataException("clicks is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.Clicks = clicks;
            }
            // to ensure "uniqueClicks" is required (not null)
            if (uniqueClicks == null)
            {
                throw new InvalidDataException("uniqueClicks is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.UniqueClicks = uniqueClicks;
            }
            // to ensure "opens" is required (not null)
            if (opens == null)
            {
                throw new InvalidDataException("opens is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.Opens = opens;
            }
            // to ensure "uniqueOpens" is required (not null)
            if (uniqueOpens == null)
            {
                throw new InvalidDataException("uniqueOpens is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.UniqueOpens = uniqueOpens;
            }
            // to ensure "spamReports" is required (not null)
            if (spamReports == null)
            {
                throw new InvalidDataException("spamReports is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.SpamReports = spamReports;
            }
            // to ensure "blocked" is required (not null)
            if (blocked == null)
            {
                throw new InvalidDataException("blocked is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.Blocked = blocked;
            }
            // to ensure "invalid" is required (not null)
            if (invalid == null)
            {
                throw new InvalidDataException("invalid is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.Invalid = invalid;
            }
            // to ensure "unsubscribed" is required (not null)
            if (unsubscribed == null)
            {
                throw new InvalidDataException("unsubscribed is a required property for GetReportsReports and cannot be null");
            }
            else
            {
                this.Unsubscribed = unsubscribed;
            }
        }
        
        /// <summary>
        /// Date of the statistics
        /// </summary>
        /// <value>Date of the statistics</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Number of requests for the date
        /// </summary>
        /// <value>Number of requests for the date</value>
        [DataMember(Name="requests", EmitDefaultValue=false)]
        public long? Requests { get; set; }

        /// <summary>
        /// Number of delivered emails for the date
        /// </summary>
        /// <value>Number of delivered emails for the date</value>
        [DataMember(Name="delivered", EmitDefaultValue=false)]
        public long? Delivered { get; set; }

        /// <summary>
        /// Number of hardbounces for the date
        /// </summary>
        /// <value>Number of hardbounces for the date</value>
        [DataMember(Name="hardBounces", EmitDefaultValue=false)]
        public long? HardBounces { get; set; }

        /// <summary>
        /// Number of softbounces for the date
        /// </summary>
        /// <value>Number of softbounces for the date</value>
        [DataMember(Name="softBounces", EmitDefaultValue=false)]
        public long? SoftBounces { get; set; }

        /// <summary>
        /// Number of clicks for the date
        /// </summary>
        /// <value>Number of clicks for the date</value>
        [DataMember(Name="clicks", EmitDefaultValue=false)]
        public long? Clicks { get; set; }

        /// <summary>
        /// Number of unique clicks for the date
        /// </summary>
        /// <value>Number of unique clicks for the date</value>
        [DataMember(Name="uniqueClicks", EmitDefaultValue=false)]
        public long? UniqueClicks { get; set; }

        /// <summary>
        /// Number of openings for the date
        /// </summary>
        /// <value>Number of openings for the date</value>
        [DataMember(Name="opens", EmitDefaultValue=false)]
        public long? Opens { get; set; }

        /// <summary>
        /// Number of unique openings for the date
        /// </summary>
        /// <value>Number of unique openings for the date</value>
        [DataMember(Name="uniqueOpens", EmitDefaultValue=false)]
        public long? UniqueOpens { get; set; }

        /// <summary>
        /// Number of complaints (spam reports) for the date
        /// </summary>
        /// <value>Number of complaints (spam reports) for the date</value>
        [DataMember(Name="spamReports", EmitDefaultValue=false)]
        public long? SpamReports { get; set; }

        /// <summary>
        /// Number of blocked emails for the date
        /// </summary>
        /// <value>Number of blocked emails for the date</value>
        [DataMember(Name="blocked", EmitDefaultValue=false)]
        public long? Blocked { get; set; }

        /// <summary>
        /// Number of invalid emails for the date
        /// </summary>
        /// <value>Number of invalid emails for the date</value>
        [DataMember(Name="invalid", EmitDefaultValue=false)]
        public long? Invalid { get; set; }

        /// <summary>
        /// Number of unsubscribed emails for the date
        /// </summary>
        /// <value>Number of unsubscribed emails for the date</value>
        [DataMember(Name="unsubscribed", EmitDefaultValue=false)]
        public long? Unsubscribed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetReportsReports {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Requests: ").Append(Requests).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  HardBounces: ").Append(HardBounces).Append("\n");
            sb.Append("  SoftBounces: ").Append(SoftBounces).Append("\n");
            sb.Append("  Clicks: ").Append(Clicks).Append("\n");
            sb.Append("  UniqueClicks: ").Append(UniqueClicks).Append("\n");
            sb.Append("  Opens: ").Append(Opens).Append("\n");
            sb.Append("  UniqueOpens: ").Append(UniqueOpens).Append("\n");
            sb.Append("  SpamReports: ").Append(SpamReports).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Invalid: ").Append(Invalid).Append("\n");
            sb.Append("  Unsubscribed: ").Append(Unsubscribed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetReportsReports);
        }

        /// <summary>
        /// Returns true if GetReportsReports instances are equal
        /// </summary>
        /// <param name="input">Instance of GetReportsReports to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetReportsReports input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Requests == input.Requests ||
                    (this.Requests != null &&
                    this.Requests.Equals(input.Requests))
                ) && 
                (
                    this.Delivered == input.Delivered ||
                    (this.Delivered != null &&
                    this.Delivered.Equals(input.Delivered))
                ) && 
                (
                    this.HardBounces == input.HardBounces ||
                    (this.HardBounces != null &&
                    this.HardBounces.Equals(input.HardBounces))
                ) && 
                (
                    this.SoftBounces == input.SoftBounces ||
                    (this.SoftBounces != null &&
                    this.SoftBounces.Equals(input.SoftBounces))
                ) && 
                (
                    this.Clicks == input.Clicks ||
                    (this.Clicks != null &&
                    this.Clicks.Equals(input.Clicks))
                ) && 
                (
                    this.UniqueClicks == input.UniqueClicks ||
                    (this.UniqueClicks != null &&
                    this.UniqueClicks.Equals(input.UniqueClicks))
                ) && 
                (
                    this.Opens == input.Opens ||
                    (this.Opens != null &&
                    this.Opens.Equals(input.Opens))
                ) && 
                (
                    this.UniqueOpens == input.UniqueOpens ||
                    (this.UniqueOpens != null &&
                    this.UniqueOpens.Equals(input.UniqueOpens))
                ) && 
                (
                    this.SpamReports == input.SpamReports ||
                    (this.SpamReports != null &&
                    this.SpamReports.Equals(input.SpamReports))
                ) && 
                (
                    this.Blocked == input.Blocked ||
                    (this.Blocked != null &&
                    this.Blocked.Equals(input.Blocked))
                ) && 
                (
                    this.Invalid == input.Invalid ||
                    (this.Invalid != null &&
                    this.Invalid.Equals(input.Invalid))
                ) && 
                (
                    this.Unsubscribed == input.Unsubscribed ||
                    (this.Unsubscribed != null &&
                    this.Unsubscribed.Equals(input.Unsubscribed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Requests != null)
                    hashCode = hashCode * 59 + this.Requests.GetHashCode();
                if (this.Delivered != null)
                    hashCode = hashCode * 59 + this.Delivered.GetHashCode();
                if (this.HardBounces != null)
                    hashCode = hashCode * 59 + this.HardBounces.GetHashCode();
                if (this.SoftBounces != null)
                    hashCode = hashCode * 59 + this.SoftBounces.GetHashCode();
                if (this.Clicks != null)
                    hashCode = hashCode * 59 + this.Clicks.GetHashCode();
                if (this.UniqueClicks != null)
                    hashCode = hashCode * 59 + this.UniqueClicks.GetHashCode();
                if (this.Opens != null)
                    hashCode = hashCode * 59 + this.Opens.GetHashCode();
                if (this.UniqueOpens != null)
                    hashCode = hashCode * 59 + this.UniqueOpens.GetHashCode();
                if (this.SpamReports != null)
                    hashCode = hashCode * 59 + this.SpamReports.GetHashCode();
                if (this.Blocked != null)
                    hashCode = hashCode * 59 + this.Blocked.GetHashCode();
                if (this.Invalid != null)
                    hashCode = hashCode * 59 + this.Invalid.GetHashCode();
                if (this.Unsubscribed != null)
                    hashCode = hashCode * 59 + this.Unsubscribed.GetHashCode();
                return hashCode;
            }
        }
    }

}
