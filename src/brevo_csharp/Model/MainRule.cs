/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// MainRule
    /// </summary>
    [DataContract]
    public partial class MainRule :  IEquatable<MainRule>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainRule" /> class.
        /// </summary>
        /// <param name="condition">Selected rule condition.</param>
        /// <param name="createdAt">Timestamp when the rule was created.</param>
        /// <param name="description">Description of the rule.</param>
        /// <param name="_event">Selected event in the rule.</param>
        /// <param name="isInternal">Metric to identify if its an internal rule or not.</param>
        /// <param name="loyaltyProgramId">Loyalty Program id of which current rule is associated.</param>
        /// <param name="loyaltyVersionId">Loyalty Version id to which current rule is associated.</param>
        /// <param name="meta">Additional data to define the rule.</param>
        /// <param name="name">Rule name.</param>
        /// <param name="results">Results fo the rule definition.</param>
        /// <param name="ruleId">Unique identifier for the rule.</param>
        /// <param name="ruleType">Type of the rule.</param>
        /// <param name="updatedAt">Timestamp when the rule was updated.</param>
        public MainRule(Object condition = default(Object), string createdAt = default(string), string description = default(string), Object _event = default(Object), bool? isInternal = default(bool?), string loyaltyProgramId = default(string), int? loyaltyVersionId = default(int?), Object meta = default(Object), string name = default(string), List<MainRuleResultResponse> results = default(List<MainRuleResultResponse>), string ruleId = default(string), string ruleType = default(string), string updatedAt = default(string))
        {
            this.Condition = condition;
            this.CreatedAt = createdAt;
            this.Description = description;
            this.Event = _event;
            this.IsInternal = isInternal;
            this.LoyaltyProgramId = loyaltyProgramId;
            this.LoyaltyVersionId = loyaltyVersionId;
            this.Meta = meta;
            this.Name = name;
            this.Results = results;
            this.RuleId = ruleId;
            this.RuleType = ruleType;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Selected rule condition
        /// </summary>
        /// <value>Selected rule condition</value>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public Object Condition { get; set; }

        /// <summary>
        /// Timestamp when the rule was created
        /// </summary>
        /// <value>Timestamp when the rule was created</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Description of the rule
        /// </summary>
        /// <value>Description of the rule</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Selected event in the rule
        /// </summary>
        /// <value>Selected event in the rule</value>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public Object Event { get; set; }

        /// <summary>
        /// Metric to identify if its an internal rule or not
        /// </summary>
        /// <value>Metric to identify if its an internal rule or not</value>
        [DataMember(Name="isInternal", EmitDefaultValue=false)]
        public bool? IsInternal { get; set; }

        /// <summary>
        /// Loyalty Program id of which current rule is associated
        /// </summary>
        /// <value>Loyalty Program id of which current rule is associated</value>
        [DataMember(Name="loyaltyProgramId", EmitDefaultValue=false)]
        public string LoyaltyProgramId { get; set; }

        /// <summary>
        /// Loyalty Version id to which current rule is associated
        /// </summary>
        /// <value>Loyalty Version id to which current rule is associated</value>
        [DataMember(Name="loyaltyVersionId", EmitDefaultValue=false)]
        public int? LoyaltyVersionId { get; set; }

        /// <summary>
        /// Additional data to define the rule
        /// </summary>
        /// <value>Additional data to define the rule</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Object Meta { get; set; }

        /// <summary>
        /// Rule name
        /// </summary>
        /// <value>Rule name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Results fo the rule definition
        /// </summary>
        /// <value>Results fo the rule definition</value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<MainRuleResultResponse> Results { get; set; }

        /// <summary>
        /// Unique identifier for the rule
        /// </summary>
        /// <value>Unique identifier for the rule</value>
        [DataMember(Name="ruleId", EmitDefaultValue=false)]
        public string RuleId { get; set; }

        /// <summary>
        /// Type of the rule
        /// </summary>
        /// <value>Type of the rule</value>
        [DataMember(Name="ruleType", EmitDefaultValue=false)]
        public string RuleType { get; set; }

        /// <summary>
        /// Timestamp when the rule was updated
        /// </summary>
        /// <value>Timestamp when the rule was updated</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainRule {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  IsInternal: ").Append(IsInternal).Append("\n");
            sb.Append("  LoyaltyProgramId: ").Append(LoyaltyProgramId).Append("\n");
            sb.Append("  LoyaltyVersionId: ").Append(LoyaltyVersionId).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainRule);
        }

        /// <summary>
        /// Returns true if MainRule instances are equal
        /// </summary>
        /// <param name="input">Instance of MainRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.IsInternal == input.IsInternal ||
                    (this.IsInternal != null &&
                    this.IsInternal.Equals(input.IsInternal))
                ) && 
                (
                    this.LoyaltyProgramId == input.LoyaltyProgramId ||
                    (this.LoyaltyProgramId != null &&
                    this.LoyaltyProgramId.Equals(input.LoyaltyProgramId))
                ) && 
                (
                    this.LoyaltyVersionId == input.LoyaltyVersionId ||
                    (this.LoyaltyVersionId != null &&
                    this.LoyaltyVersionId.Equals(input.LoyaltyVersionId))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.RuleType == input.RuleType ||
                    (this.RuleType != null &&
                    this.RuleType.Equals(input.RuleType))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.IsInternal != null)
                    hashCode = hashCode * 59 + this.IsInternal.GetHashCode();
                if (this.LoyaltyProgramId != null)
                    hashCode = hashCode * 59 + this.LoyaltyProgramId.GetHashCode();
                if (this.LoyaltyVersionId != null)
                    hashCode = hashCode * 59 + this.LoyaltyVersionId.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                if (this.RuleId != null)
                    hashCode = hashCode * 59 + this.RuleId.GetHashCode();
                if (this.RuleType != null)
                    hashCode = hashCode * 59 + this.RuleType.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
