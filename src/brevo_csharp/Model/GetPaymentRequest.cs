/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetPaymentRequest
    /// </summary>
    [DataContract]
    public partial class GetPaymentRequest :  IEquatable<GetPaymentRequest>
    {
        /// <summary>
        /// Status of the payment request.
        /// </summary>
        /// <value>Status of the payment request.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Created for value: created
            /// </summary>
            [EnumMember(Value = "created")]
            Created = 1,
            
            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            [EnumMember(Value = "sent")]
            Sent = 2,
            
            /// <summary>
            /// Enum ReminderSentpaid for value: reminderSent - paid
            /// </summary>
            [EnumMember(Value = "reminderSent - paid")]
            ReminderSentpaid = 3
        }

        /// <summary>
        /// Status of the payment request.
        /// </summary>
        /// <value>Status of the payment request.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetPaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPaymentRequest" /> class.
        /// </summary>
        /// <param name="reference">Reference of the payment request, it will appear on the payment page.  (required).</param>
        /// <param name="status">Status of the payment request. (required).</param>
        /// <param name="configuration">configuration.</param>
        /// <param name="contactId">Brevo ID of the contact requested to pay. .</param>
        /// <param name="numberOfRemindersSent">number of reminders sent. .</param>
        /// <param name="cart">cart (required).</param>
        /// <param name="notification">notification (required).</param>
        public GetPaymentRequest(string reference = default(string), StatusEnum status = default(StatusEnum), Configuration configuration = default(Configuration), long? contactId = default(long?), long? numberOfRemindersSent = default(long?), Cart cart = default(Cart), Notification notification = default(Notification))
        {
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new InvalidDataException("reference is a required property for GetPaymentRequest and cannot be null");
            }
            else
            {
                this.Reference = reference;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for GetPaymentRequest and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "cart" is required (not null)
            if (cart == null)
            {
                throw new InvalidDataException("cart is a required property for GetPaymentRequest and cannot be null");
            }
            else
            {
                this.Cart = cart;
            }
            // to ensure "notification" is required (not null)
            if (notification == null)
            {
                throw new InvalidDataException("notification is a required property for GetPaymentRequest and cannot be null");
            }
            else
            {
                this.Notification = notification;
            }
            this.Configuration = configuration;
            this.ContactId = contactId;
            this.NumberOfRemindersSent = numberOfRemindersSent;
        }
        
        /// <summary>
        /// Reference of the payment request, it will appear on the payment page. 
        /// </summary>
        /// <value>Reference of the payment request, it will appear on the payment page. </value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }


        /// <summary>
        /// Gets or Sets Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Brevo ID of the contact requested to pay. 
        /// </summary>
        /// <value>Brevo ID of the contact requested to pay. </value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public long? ContactId { get; set; }

        /// <summary>
        /// number of reminders sent. 
        /// </summary>
        /// <value>number of reminders sent. </value>
        [DataMember(Name="numberOfRemindersSent", EmitDefaultValue=false)]
        public long? NumberOfRemindersSent { get; set; }

        /// <summary>
        /// Gets or Sets Cart
        /// </summary>
        [DataMember(Name="cart", EmitDefaultValue=false)]
        public Cart Cart { get; set; }

        /// <summary>
        /// Gets or Sets Notification
        /// </summary>
        [DataMember(Name="notification", EmitDefaultValue=false)]
        public Notification Notification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetPaymentRequest {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  NumberOfRemindersSent: ").Append(NumberOfRemindersSent).Append("\n");
            sb.Append("  Cart: ").Append(Cart).Append("\n");
            sb.Append("  Notification: ").Append(Notification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetPaymentRequest);
        }

        /// <summary>
        /// Returns true if GetPaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetPaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetPaymentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Configuration == input.Configuration ||
                    (this.Configuration != null &&
                    this.Configuration.Equals(input.Configuration))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.NumberOfRemindersSent == input.NumberOfRemindersSent ||
                    (this.NumberOfRemindersSent != null &&
                    this.NumberOfRemindersSent.Equals(input.NumberOfRemindersSent))
                ) && 
                (
                    this.Cart == input.Cart ||
                    (this.Cart != null &&
                    this.Cart.Equals(input.Cart))
                ) && 
                (
                    this.Notification == input.Notification ||
                    (this.Notification != null &&
                    this.Notification.Equals(input.Notification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Configuration != null)
                    hashCode = hashCode * 59 + this.Configuration.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.NumberOfRemindersSent != null)
                    hashCode = hashCode * 59 + this.NumberOfRemindersSent.GetHashCode();
                if (this.Cart != null)
                    hashCode = hashCode * 59 + this.Cart.GetHashCode();
                if (this.Notification != null)
                    hashCode = hashCode * 59 + this.Notification.GetHashCode();
                return hashCode;
            }
        }
    }

}
