/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// UpdateWhatsAppCampaign
    /// </summary>
    [DataContract]
    public partial class UpdateWhatsAppCampaign :  IEquatable<UpdateWhatsAppCampaign>
    {
        /// <summary>
        /// Status of the campaign
        /// </summary>
        /// <value>Status of the campaign</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CampaignStatusEnum
        {
            
            /// <summary>
            /// Enum Scheduled for value: scheduled
            /// </summary>
            [EnumMember(Value = "scheduled")]
            Scheduled = 1,
            
            /// <summary>
            /// Enum Suspended for value: suspended
            /// </summary>
            [EnumMember(Value = "suspended")]
            Suspended = 2
        }

        /// <summary>
        /// Status of the campaign
        /// </summary>
        /// <value>Status of the campaign</value>
        [DataMember(Name="campaignStatus", EmitDefaultValue=false)]
        public CampaignStatusEnum? CampaignStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateWhatsAppCampaign" /> class.
        /// </summary>
        /// <param name="campaignName">Name of the campaign.</param>
        /// <param name="campaignStatus">Status of the campaign (default to CampaignStatusEnum.Scheduled).</param>
        /// <param name="rescheduleFor">Reschedule the sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of campaign. **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00** Use this field to update the scheduledAt of any existing draft or scheduled WhatsApp campaign. .</param>
        /// <param name="recipients">recipients.</param>
        public UpdateWhatsAppCampaign(string campaignName = default(string), CampaignStatusEnum? campaignStatus = CampaignStatusEnum.Scheduled, string rescheduleFor = default(string), CreateWhatsAppCampaignRecipients recipients = default(CreateWhatsAppCampaignRecipients))
        {
            this.CampaignName = campaignName;
            // use default value if no "campaignStatus" provided
            if (campaignStatus == null)
            {
                this.CampaignStatus = CampaignStatusEnum.Scheduled;
            }
            else
            {
                this.CampaignStatus = campaignStatus;
            }
            this.RescheduleFor = rescheduleFor;
            this.Recipients = recipients;
        }
        
        /// <summary>
        /// Name of the campaign
        /// </summary>
        /// <value>Name of the campaign</value>
        [DataMember(Name="campaignName", EmitDefaultValue=false)]
        public string CampaignName { get; set; }


        /// <summary>
        /// Reschedule the sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of campaign. **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00** Use this field to update the scheduledAt of any existing draft or scheduled WhatsApp campaign. 
        /// </summary>
        /// <value>Reschedule the sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of campaign. **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00** Use this field to update the scheduledAt of any existing draft or scheduled WhatsApp campaign. </value>
        [DataMember(Name="rescheduleFor", EmitDefaultValue=false)]
        public string RescheduleFor { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public CreateWhatsAppCampaignRecipients Recipients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateWhatsAppCampaign {\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("  CampaignStatus: ").Append(CampaignStatus).Append("\n");
            sb.Append("  RescheduleFor: ").Append(RescheduleFor).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateWhatsAppCampaign);
        }

        /// <summary>
        /// Returns true if UpdateWhatsAppCampaign instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateWhatsAppCampaign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateWhatsAppCampaign input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CampaignName == input.CampaignName ||
                    (this.CampaignName != null &&
                    this.CampaignName.Equals(input.CampaignName))
                ) && 
                (
                    this.CampaignStatus == input.CampaignStatus ||
                    (this.CampaignStatus != null &&
                    this.CampaignStatus.Equals(input.CampaignStatus))
                ) && 
                (
                    this.RescheduleFor == input.RescheduleFor ||
                    (this.RescheduleFor != null &&
                    this.RescheduleFor.Equals(input.RescheduleFor))
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    (this.Recipients != null &&
                    this.Recipients.Equals(input.Recipients))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CampaignName != null)
                    hashCode = hashCode * 59 + this.CampaignName.GetHashCode();
                if (this.CampaignStatus != null)
                    hashCode = hashCode * 59 + this.CampaignStatus.GetHashCode();
                if (this.RescheduleFor != null)
                    hashCode = hashCode * 59 + this.RescheduleFor.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                return hashCode;
            }
        }
    }

}
