/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// TierGroup
    /// </summary>
    [DataContract]
    public partial class TierGroup :  IEquatable<TierGroup>
    {
        /// <summary>
        /// Select real_time to upgrade tier on real time balance updates. Select membership_anniversary to upgrade tier on subscription anniversary. Select tier_anniversary to upgrade tier on tier anniversary.
        /// </summary>
        /// <value>Select real_time to upgrade tier on real time balance updates. Select membership_anniversary to upgrade tier on subscription anniversary. Select tier_anniversary to upgrade tier on tier anniversary.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UpgradeStrategyEnum
        {
            
            /// <summary>
            /// Enum Realtime for value: real_time
            /// </summary>
            [EnumMember(Value = "real_time")]
            Realtime = 1,
            
            /// <summary>
            /// Enum Membershipanniversary for value: membership_anniversary
            /// </summary>
            [EnumMember(Value = "membership_anniversary")]
            Membershipanniversary = 2,
            
            /// <summary>
            /// Enum Tieranniversary for value: tier_anniversary
            /// </summary>
            [EnumMember(Value = "tier_anniversary")]
            Tieranniversary = 3
        }

        /// <summary>
        /// Select real_time to upgrade tier on real time balance updates. Select membership_anniversary to upgrade tier on subscription anniversary. Select tier_anniversary to upgrade tier on tier anniversary.
        /// </summary>
        /// <value>Select real_time to upgrade tier on real time balance updates. Select membership_anniversary to upgrade tier on subscription anniversary. Select tier_anniversary to upgrade tier on tier anniversary.</value>
        [DataMember(Name="upgradeStrategy", EmitDefaultValue=false)]
        public UpgradeStrategyEnum? UpgradeStrategy { get; set; }
        /// <summary>
        /// Select real_time to downgrade tier on real time balance updates. Select membership_anniversary to downgrade tier on subscription anniversary. Select tier_anniversary to downgrade tier on tier anniversary.
        /// </summary>
        /// <value>Select real_time to downgrade tier on real time balance updates. Select membership_anniversary to downgrade tier on subscription anniversary. Select tier_anniversary to downgrade tier on tier anniversary.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DowngradeStrategyEnum
        {
            
            /// <summary>
            /// Enum Realtime for value: real_time
            /// </summary>
            [EnumMember(Value = "real_time")]
            Realtime = 1,
            
            /// <summary>
            /// Enum Membershipanniversary for value: membership_anniversary
            /// </summary>
            [EnumMember(Value = "membership_anniversary")]
            Membershipanniversary = 2,
            
            /// <summary>
            /// Enum Tieranniversary for value: tier_anniversary
            /// </summary>
            [EnumMember(Value = "tier_anniversary")]
            Tieranniversary = 3
        }

        /// <summary>
        /// Select real_time to downgrade tier on real time balance updates. Select membership_anniversary to downgrade tier on subscription anniversary. Select tier_anniversary to downgrade tier on tier anniversary.
        /// </summary>
        /// <value>Select real_time to downgrade tier on real time balance updates. Select membership_anniversary to downgrade tier on subscription anniversary. Select tier_anniversary to downgrade tier on tier anniversary.</value>
        [DataMember(Name="downgradeStrategy", EmitDefaultValue=false)]
        public DowngradeStrategyEnum? DowngradeStrategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TierGroup" /> class.
        /// </summary>
        /// <param name="id">Tier group unique identifier.</param>
        /// <param name="name">Tier group name.</param>
        /// <param name="tierOrder">Order of the tiers in the group in ascending order.</param>
        /// <param name="loyaltyProgramId">Associated loyalty program Id.</param>
        /// <param name="upgradeStrategy">Select real_time to upgrade tier on real time balance updates. Select membership_anniversary to upgrade tier on subscription anniversary. Select tier_anniversary to upgrade tier on tier anniversary. (default to UpgradeStrategyEnum.Realtime).</param>
        /// <param name="downgradeStrategy">Select real_time to downgrade tier on real time balance updates. Select membership_anniversary to downgrade tier on subscription anniversary. Select tier_anniversary to downgrade tier on tier anniversary. (default to DowngradeStrategyEnum.Realtime).</param>
        /// <param name="createdAt">Timestamp when the tier group was created.</param>
        /// <param name="updatedAt">Timestamp when the tier group was last updated.</param>
        public TierGroup(Guid? id = default(Guid?), string name = default(string), List<Guid?> tierOrder = default(List<Guid?>), Guid? loyaltyProgramId = default(Guid?), UpgradeStrategyEnum? upgradeStrategy = UpgradeStrategyEnum.Realtime, DowngradeStrategyEnum? downgradeStrategy = DowngradeStrategyEnum.Realtime, DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?))
        {
            this.Id = id;
            this.Name = name;
            this.TierOrder = tierOrder;
            this.LoyaltyProgramId = loyaltyProgramId;
            // use default value if no "upgradeStrategy" provided
            if (upgradeStrategy == null)
            {
                this.UpgradeStrategy = UpgradeStrategyEnum.Realtime;
            }
            else
            {
                this.UpgradeStrategy = upgradeStrategy;
            }
            // use default value if no "downgradeStrategy" provided
            if (downgradeStrategy == null)
            {
                this.DowngradeStrategy = DowngradeStrategyEnum.Realtime;
            }
            else
            {
                this.DowngradeStrategy = downgradeStrategy;
            }
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Tier group unique identifier
        /// </summary>
        /// <value>Tier group unique identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Tier group name
        /// </summary>
        /// <value>Tier group name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Order of the tiers in the group in ascending order
        /// </summary>
        /// <value>Order of the tiers in the group in ascending order</value>
        [DataMember(Name="tierOrder", EmitDefaultValue=false)]
        public List<Guid?> TierOrder { get; set; }

        /// <summary>
        /// Associated loyalty program Id
        /// </summary>
        /// <value>Associated loyalty program Id</value>
        [DataMember(Name="loyaltyProgramId", EmitDefaultValue=false)]
        public Guid? LoyaltyProgramId { get; set; }



        /// <summary>
        /// Timestamp when the tier group was created
        /// </summary>
        /// <value>Timestamp when the tier group was created</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Timestamp when the tier group was last updated
        /// </summary>
        /// <value>Timestamp when the tier group was last updated</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TierGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TierOrder: ").Append(TierOrder).Append("\n");
            sb.Append("  LoyaltyProgramId: ").Append(LoyaltyProgramId).Append("\n");
            sb.Append("  UpgradeStrategy: ").Append(UpgradeStrategy).Append("\n");
            sb.Append("  DowngradeStrategy: ").Append(DowngradeStrategy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TierGroup);
        }

        /// <summary>
        /// Returns true if TierGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of TierGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TierGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TierOrder == input.TierOrder ||
                    this.TierOrder != null &&
                    this.TierOrder.SequenceEqual(input.TierOrder)
                ) && 
                (
                    this.LoyaltyProgramId == input.LoyaltyProgramId ||
                    (this.LoyaltyProgramId != null &&
                    this.LoyaltyProgramId.Equals(input.LoyaltyProgramId))
                ) && 
                (
                    this.UpgradeStrategy == input.UpgradeStrategy ||
                    (this.UpgradeStrategy != null &&
                    this.UpgradeStrategy.Equals(input.UpgradeStrategy))
                ) && 
                (
                    this.DowngradeStrategy == input.DowngradeStrategy ||
                    (this.DowngradeStrategy != null &&
                    this.DowngradeStrategy.Equals(input.DowngradeStrategy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TierOrder != null)
                    hashCode = hashCode * 59 + this.TierOrder.GetHashCode();
                if (this.LoyaltyProgramId != null)
                    hashCode = hashCode * 59 + this.LoyaltyProgramId.GetHashCode();
                if (this.UpgradeStrategy != null)
                    hashCode = hashCode * 59 + this.UpgradeStrategy.GetHashCode();
                if (this.DowngradeStrategy != null)
                    hashCode = hashCode * 59 + this.DowngradeStrategy.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
