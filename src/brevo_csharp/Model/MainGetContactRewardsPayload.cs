/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// MainGetContactRewardsPayload
    /// </summary>
    [DataContract]
    public partial class MainGetContactRewardsPayload :  IEquatable<MainGetContactRewardsPayload>
    {
        /// <summary>
        /// Sort the documents in the ascending or descending order
        /// </summary>
        /// <value>Sort the documents in the ascending or descending order</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortEnum
        {
            
            /// <summary>
            /// Enum Asc for value: asc
            /// </summary>
            [EnumMember(Value = "asc")]
            Asc = 1,
            
            /// <summary>
            /// Enum Desc for value: desc
            /// </summary>
            [EnumMember(Value = "desc")]
            Desc = 2
        }

        /// <summary>
        /// Sort the documents in the ascending or descending order
        /// </summary>
        /// <value>Sort the documents in the ascending or descending order</value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public SortEnum? Sort { get; set; }
        /// <summary>
        /// Sort documents by field
        /// </summary>
        /// <value>Sort documents by field</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortFieldEnum
        {
            
            /// <summary>
            /// Enum UpdatedAt for value: updatedAt
            /// </summary>
            [EnumMember(Value = "updatedAt")]
            UpdatedAt = 1,
            
            /// <summary>
            /// Enum CreatedAt for value: createdAt
            /// </summary>
            [EnumMember(Value = "createdAt")]
            CreatedAt = 2
        }

        /// <summary>
        /// Sort documents by field
        /// </summary>
        /// <value>Sort documents by field</value>
        [DataMember(Name="sortField", EmitDefaultValue=false)]
        public SortFieldEnum? SortField { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MainGetContactRewardsPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MainGetContactRewardsPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MainGetContactRewardsPayload" /> class.
        /// </summary>
        /// <param name="contactId">Contact to attribute the reward (required).</param>
        /// <param name="limit">Number of documents per page.</param>
        /// <param name="metadata">Data to define the reward for that particular contact.</param>
        /// <param name="offset">Index of the first document in the page.</param>
        /// <param name="rewardId">Unique identifier of the associated reward.</param>
        /// <param name="sort">Sort the documents in the ascending or descending order.</param>
        /// <param name="sortField">Sort documents by field.</param>
        public MainGetContactRewardsPayload(int? contactId = default(int?), int? limit = default(int?), List<MainFilter> metadata = default(List<MainFilter>), int? offset = default(int?), string rewardId = default(string), SortEnum? sort = default(SortEnum?), SortFieldEnum? sortField = default(SortFieldEnum?))
        {
            // to ensure "contactId" is required (not null)
            if (contactId == null)
            {
                throw new InvalidDataException("contactId is a required property for MainGetContactRewardsPayload and cannot be null");
            }
            else
            {
                this.ContactId = contactId;
            }
            this.Limit = limit;
            this.Metadata = metadata;
            this.Offset = offset;
            this.RewardId = rewardId;
            this.Sort = sort;
            this.SortField = sortField;
        }
        
        /// <summary>
        /// Contact to attribute the reward
        /// </summary>
        /// <value>Contact to attribute the reward</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public int? ContactId { get; set; }

        /// <summary>
        /// Number of documents per page
        /// </summary>
        /// <value>Number of documents per page</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? Limit { get; set; }

        /// <summary>
        /// Data to define the reward for that particular contact
        /// </summary>
        /// <value>Data to define the reward for that particular contact</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public List<MainFilter> Metadata { get; set; }

        /// <summary>
        /// Index of the first document in the page
        /// </summary>
        /// <value>Index of the first document in the page</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public int? Offset { get; set; }

        /// <summary>
        /// Unique identifier of the associated reward
        /// </summary>
        /// <value>Unique identifier of the associated reward</value>
        [DataMember(Name="rewardId", EmitDefaultValue=false)]
        public string RewardId { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainGetContactRewardsPayload {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  RewardId: ").Append(RewardId).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  SortField: ").Append(SortField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainGetContactRewardsPayload);
        }

        /// <summary>
        /// Returns true if MainGetContactRewardsPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of MainGetContactRewardsPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainGetContactRewardsPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this.RewardId == input.RewardId ||
                    (this.RewardId != null &&
                    this.RewardId.Equals(input.RewardId))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.SortField == input.SortField ||
                    (this.SortField != null &&
                    this.SortField.Equals(input.SortField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.RewardId != null)
                    hashCode = hashCode * 59 + this.RewardId.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.SortField != null)
                    hashCode = hashCode * 59 + this.SortField.GetHashCode();
                return hashCode;
            }
        }
    }

}
