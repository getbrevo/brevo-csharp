/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// ExportWebhooksHistory
    /// </summary>
    [DataContract]
    public partial class ExportWebhooksHistory :  IEquatable<ExportWebhooksHistory>
    {
        /// <summary>
        /// Filter the history based on webhook type
        /// </summary>
        /// <value>Filter the history based on webhook type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Transactional for value: transactional
            /// </summary>
            [EnumMember(Value = "transactional")]
            Transactional = 1,
            
            /// <summary>
            /// Enum Marketing for value: marketing
            /// </summary>
            [EnumMember(Value = "marketing")]
            Marketing = 2
        }

        /// <summary>
        /// Filter the history based on webhook type
        /// </summary>
        /// <value>Filter the history based on webhook type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Filter the history for a specific event type
        /// </summary>
        /// <value>Filter the history for a specific event type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventEnum
        {
            
            /// <summary>
            /// Enum Invalidparameter for value: invalid_parameter
            /// </summary>
            [EnumMember(Value = "invalid_parameter")]
            Invalidparameter = 1,
            
            /// <summary>
            /// Enum Missingparameter for value: missing_parameter
            /// </summary>
            [EnumMember(Value = "missing_parameter")]
            Missingparameter = 2,
            
            /// <summary>
            /// Enum HardBounce for value: hardBounce
            /// </summary>
            [EnumMember(Value = "hardBounce")]
            HardBounce = 3,
            
            /// <summary>
            /// Enum SoftBounce for value: softBounce
            /// </summary>
            [EnumMember(Value = "softBounce")]
            SoftBounce = 4,
            
            /// <summary>
            /// Enum Delivered for value: delivered
            /// </summary>
            [EnumMember(Value = "delivered")]
            Delivered = 5,
            
            /// <summary>
            /// Enum Spam for value: spam
            /// </summary>
            [EnumMember(Value = "spam")]
            Spam = 6,
            
            /// <summary>
            /// Enum Request for value: request
            /// </summary>
            [EnumMember(Value = "request")]
            Request = 7,
            
            /// <summary>
            /// Enum Opened for value: opened
            /// </summary>
            [EnumMember(Value = "opened")]
            Opened = 8,
            
            /// <summary>
            /// Enum Click for value: click
            /// </summary>
            [EnumMember(Value = "click")]
            Click = 9,
            
            /// <summary>
            /// Enum Invalid for value: invalid
            /// </summary>
            [EnumMember(Value = "invalid")]
            Invalid = 10,
            
            /// <summary>
            /// Enum Deferred for value: deferred
            /// </summary>
            [EnumMember(Value = "deferred")]
            Deferred = 11,
            
            /// <summary>
            /// Enum Blocked for value: blocked
            /// </summary>
            [EnumMember(Value = "blocked")]
            Blocked = 12,
            
            /// <summary>
            /// Enum Unsubscribed for value: unsubscribed
            /// </summary>
            [EnumMember(Value = "unsubscribed")]
            Unsubscribed = 13,
            
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 14,
            
            /// <summary>
            /// Enum UniqueOpened for value: uniqueOpened
            /// </summary>
            [EnumMember(Value = "uniqueOpened")]
            UniqueOpened = 15,
            
            /// <summary>
            /// Enum LoadedByProxy for value: loadedByProxy
            /// </summary>
            [EnumMember(Value = "loadedByProxy")]
            LoadedByProxy = 16,
            
            /// <summary>
            /// Enum AllEvents for value: allEvents
            /// </summary>
            [EnumMember(Value = "allEvents")]
            AllEvents = 17
        }

        /// <summary>
        /// Filter the history for a specific event type
        /// </summary>
        /// <value>Filter the history for a specific event type</value>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public EventEnum Event { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportWebhooksHistory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExportWebhooksHistory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportWebhooksHistory" /> class.
        /// </summary>
        /// <param name="days">Number of days in the past including today (positive integer). _Not compatible with &#39;startDate&#39; and &#39;endDate&#39;_.</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date of the history (YYYY-MM-DD). Must be lower than equal to endDate.</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate.</param>
        /// <param name="sort">Sorting order of records (asc or desc).</param>
        /// <param name="type">Filter the history based on webhook type (required).</param>
        /// <param name="_event">Filter the history for a specific event type (required).</param>
        /// <param name="notifyURL">Webhook URL to receive CSV file link (required).</param>
        /// <param name="webhookId">Filter the history for a specific webhook id.</param>
        /// <param name="email">Filter the history for a specific email.</param>
        /// <param name="messageId">Filter the history for a specific message id. Applicable only for transactional webhooks..</param>
        public ExportWebhooksHistory(int? days = default(int?), string startDate = default(string), string endDate = default(string), string sort = default(string), TypeEnum type = default(TypeEnum), EventEnum _event = default(EventEnum), string notifyURL = default(string), int? webhookId = default(int?), string email = default(string), int? messageId = default(int?))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ExportWebhooksHistory and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "_event" is required (not null)
            if (_event == null)
            {
                throw new InvalidDataException("_event is a required property for ExportWebhooksHistory and cannot be null");
            }
            else
            {
                this.Event = _event;
            }
            // to ensure "notifyURL" is required (not null)
            if (notifyURL == null)
            {
                throw new InvalidDataException("notifyURL is a required property for ExportWebhooksHistory and cannot be null");
            }
            else
            {
                this.NotifyURL = notifyURL;
            }
            this.Days = days;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Sort = sort;
            this.WebhookId = webhookId;
            this.Email = email;
            this.MessageId = messageId;
        }
        
        /// <summary>
        /// Number of days in the past including today (positive integer). _Not compatible with &#39;startDate&#39; and &#39;endDate&#39;_
        /// </summary>
        /// <value>Number of days in the past including today (positive integer). _Not compatible with &#39;startDate&#39; and &#39;endDate&#39;_</value>
        [DataMember(Name="days", EmitDefaultValue=false)]
        public int? Days { get; set; }

        /// <summary>
        /// Mandatory if endDate is used. Starting date of the history (YYYY-MM-DD). Must be lower than equal to endDate
        /// </summary>
        /// <value>Mandatory if endDate is used. Starting date of the history (YYYY-MM-DD). Must be lower than equal to endDate</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
        /// </summary>
        /// <value>Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Sorting order of records (asc or desc)
        /// </summary>
        /// <value>Sorting order of records (asc or desc)</value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public string Sort { get; set; }



        /// <summary>
        /// Webhook URL to receive CSV file link
        /// </summary>
        /// <value>Webhook URL to receive CSV file link</value>
        [DataMember(Name="notifyURL", EmitDefaultValue=false)]
        public string NotifyURL { get; set; }

        /// <summary>
        /// Filter the history for a specific webhook id
        /// </summary>
        /// <value>Filter the history for a specific webhook id</value>
        [DataMember(Name="webhookId", EmitDefaultValue=false)]
        public int? WebhookId { get; set; }

        /// <summary>
        /// Filter the history for a specific email
        /// </summary>
        /// <value>Filter the history for a specific email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Filter the history for a specific message id. Applicable only for transactional webhooks.
        /// </summary>
        /// <value>Filter the history for a specific message id. Applicable only for transactional webhooks.</value>
        [DataMember(Name="messageId", EmitDefaultValue=false)]
        public int? MessageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportWebhooksHistory {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  NotifyURL: ").Append(NotifyURL).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportWebhooksHistory);
        }

        /// <summary>
        /// Returns true if ExportWebhooksHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportWebhooksHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportWebhooksHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Days == input.Days ||
                    (this.Days != null &&
                    this.Days.Equals(input.Days))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.NotifyURL == input.NotifyURL ||
                    (this.NotifyURL != null &&
                    this.NotifyURL.Equals(input.NotifyURL))
                ) && 
                (
                    this.WebhookId == input.WebhookId ||
                    (this.WebhookId != null &&
                    this.WebhookId.Equals(input.WebhookId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Days != null)
                    hashCode = hashCode * 59 + this.Days.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.NotifyURL != null)
                    hashCode = hashCode * 59 + this.NotifyURL.GetHashCode();
                if (this.WebhookId != null)
                    hashCode = hashCode * 59 + this.WebhookId.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.MessageId != null)
                    hashCode = hashCode * 59 + this.MessageId.GetHashCode();
                return hashCode;
            }
        }
    }

}
