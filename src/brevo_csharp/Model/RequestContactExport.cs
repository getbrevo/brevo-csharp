/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// RequestContactExport
    /// </summary>
    [DataContract]
    public partial class RequestContactExport :  IEquatable<RequestContactExport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestContactExport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequestContactExport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestContactExport" /> class.
        /// </summary>
        /// <param name="exportAttributes">List of all the attributes that you want to export. These attributes must be present in your contact database. It is required if exportMandatoryAttributes is set false. For example, [&#39;fname&#39;, &#39;lname&#39;, &#39;email&#39;]..</param>
        /// <param name="customContactFilter">customContactFilter (required).</param>
        /// <param name="notifyUrl">Webhook that will be called once the export process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479.</param>
        /// <param name="disableNotification">To avoid generating the email notification upon contact export, pass **true** (default to false).</param>
        /// <param name="exportMandatoryAttributes">To export mandatory attributes like EMAIL, ADDED_TIME, MODIFIED_TIME (default to true).</param>
        /// <param name="exportSubscriptionStatus">Export subscription status of contacts for email &amp; sms marketting. Pass email_marketing to obtain the marketing email subscription status &amp; sms_marketing to retrieve the marketing SMS status of the contact..</param>
        /// <param name="exportMetadata">Export metadata of contacts such as _listIds, ADDED_TIME, MODIFIED_TIME..</param>
        public RequestContactExport(List<string> exportAttributes = default(List<string>), RequestContactExportCustomContactFilter customContactFilter = default(RequestContactExportCustomContactFilter), string notifyUrl = default(string), bool? disableNotification = false, bool? exportMandatoryAttributes = true, List<string> exportSubscriptionStatus = default(List<string>), List<string> exportMetadata = default(List<string>))
        {
            // to ensure "customContactFilter" is required (not null)
            if (customContactFilter == null)
            {
                throw new InvalidDataException("customContactFilter is a required property for RequestContactExport and cannot be null");
            }
            else
            {
                this.CustomContactFilter = customContactFilter;
            }
            this.ExportAttributes = exportAttributes;
            this.NotifyUrl = notifyUrl;
            // use default value if no "disableNotification" provided
            if (disableNotification == null)
            {
                this.DisableNotification = false;
            }
            else
            {
                this.DisableNotification = disableNotification;
            }
            // use default value if no "exportMandatoryAttributes" provided
            if (exportMandatoryAttributes == null)
            {
                this.ExportMandatoryAttributes = true;
            }
            else
            {
                this.ExportMandatoryAttributes = exportMandatoryAttributes;
            }
            this.ExportSubscriptionStatus = exportSubscriptionStatus;
            this.ExportMetadata = exportMetadata;
        }
        
        /// <summary>
        /// List of all the attributes that you want to export. These attributes must be present in your contact database. It is required if exportMandatoryAttributes is set false. For example, [&#39;fname&#39;, &#39;lname&#39;, &#39;email&#39;].
        /// </summary>
        /// <value>List of all the attributes that you want to export. These attributes must be present in your contact database. It is required if exportMandatoryAttributes is set false. For example, [&#39;fname&#39;, &#39;lname&#39;, &#39;email&#39;].</value>
        [DataMember(Name="exportAttributes", EmitDefaultValue=false)]
        public List<string> ExportAttributes { get; set; }

        /// <summary>
        /// Gets or Sets CustomContactFilter
        /// </summary>
        [DataMember(Name="customContactFilter", EmitDefaultValue=false)]
        public RequestContactExportCustomContactFilter CustomContactFilter { get; set; }

        /// <summary>
        /// Webhook that will be called once the export process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479
        /// </summary>
        /// <value>Webhook that will be called once the export process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479</value>
        [DataMember(Name="notifyUrl", EmitDefaultValue=false)]
        public string NotifyUrl { get; set; }

        /// <summary>
        /// To avoid generating the email notification upon contact export, pass **true**
        /// </summary>
        /// <value>To avoid generating the email notification upon contact export, pass **true**</value>
        [DataMember(Name="disableNotification", EmitDefaultValue=false)]
        public bool? DisableNotification { get; set; }

        /// <summary>
        /// To export mandatory attributes like EMAIL, ADDED_TIME, MODIFIED_TIME
        /// </summary>
        /// <value>To export mandatory attributes like EMAIL, ADDED_TIME, MODIFIED_TIME</value>
        [DataMember(Name="exportMandatoryAttributes", EmitDefaultValue=false)]
        public bool? ExportMandatoryAttributes { get; set; }

        /// <summary>
        /// Export subscription status of contacts for email &amp; sms marketting. Pass email_marketing to obtain the marketing email subscription status &amp; sms_marketing to retrieve the marketing SMS status of the contact.
        /// </summary>
        /// <value>Export subscription status of contacts for email &amp; sms marketting. Pass email_marketing to obtain the marketing email subscription status &amp; sms_marketing to retrieve the marketing SMS status of the contact.</value>
        [DataMember(Name="exportSubscriptionStatus", EmitDefaultValue=false)]
        public List<string> ExportSubscriptionStatus { get; set; }

        /// <summary>
        /// Export metadata of contacts such as _listIds, ADDED_TIME, MODIFIED_TIME.
        /// </summary>
        /// <value>Export metadata of contacts such as _listIds, ADDED_TIME, MODIFIED_TIME.</value>
        [DataMember(Name="exportMetadata", EmitDefaultValue=false)]
        public List<string> ExportMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestContactExport {\n");
            sb.Append("  ExportAttributes: ").Append(ExportAttributes).Append("\n");
            sb.Append("  CustomContactFilter: ").Append(CustomContactFilter).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  DisableNotification: ").Append(DisableNotification).Append("\n");
            sb.Append("  ExportMandatoryAttributes: ").Append(ExportMandatoryAttributes).Append("\n");
            sb.Append("  ExportSubscriptionStatus: ").Append(ExportSubscriptionStatus).Append("\n");
            sb.Append("  ExportMetadata: ").Append(ExportMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestContactExport);
        }

        /// <summary>
        /// Returns true if RequestContactExport instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestContactExport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestContactExport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExportAttributes == input.ExportAttributes ||
                    this.ExportAttributes != null &&
                    this.ExportAttributes.SequenceEqual(input.ExportAttributes)
                ) && 
                (
                    this.CustomContactFilter == input.CustomContactFilter ||
                    (this.CustomContactFilter != null &&
                    this.CustomContactFilter.Equals(input.CustomContactFilter))
                ) && 
                (
                    this.NotifyUrl == input.NotifyUrl ||
                    (this.NotifyUrl != null &&
                    this.NotifyUrl.Equals(input.NotifyUrl))
                ) && 
                (
                    this.DisableNotification == input.DisableNotification ||
                    (this.DisableNotification != null &&
                    this.DisableNotification.Equals(input.DisableNotification))
                ) && 
                (
                    this.ExportMandatoryAttributes == input.ExportMandatoryAttributes ||
                    (this.ExportMandatoryAttributes != null &&
                    this.ExportMandatoryAttributes.Equals(input.ExportMandatoryAttributes))
                ) && 
                (
                    this.ExportSubscriptionStatus == input.ExportSubscriptionStatus ||
                    this.ExportSubscriptionStatus != null &&
                    this.ExportSubscriptionStatus.SequenceEqual(input.ExportSubscriptionStatus)
                ) && 
                (
                    this.ExportMetadata == input.ExportMetadata ||
                    this.ExportMetadata != null &&
                    this.ExportMetadata.SequenceEqual(input.ExportMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExportAttributes != null)
                    hashCode = hashCode * 59 + this.ExportAttributes.GetHashCode();
                if (this.CustomContactFilter != null)
                    hashCode = hashCode * 59 + this.CustomContactFilter.GetHashCode();
                if (this.NotifyUrl != null)
                    hashCode = hashCode * 59 + this.NotifyUrl.GetHashCode();
                if (this.DisableNotification != null)
                    hashCode = hashCode * 59 + this.DisableNotification.GetHashCode();
                if (this.ExportMandatoryAttributes != null)
                    hashCode = hashCode * 59 + this.ExportMandatoryAttributes.GetHashCode();
                if (this.ExportSubscriptionStatus != null)
                    hashCode = hashCode * 59 + this.ExportSubscriptionStatus.GetHashCode();
                if (this.ExportMetadata != null)
                    hashCode = hashCode * 59 + this.ExportMetadata.GetHashCode();
                return hashCode;
            }
        }
    }

}
