/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// ConversationsMessageFile
    /// </summary>
    [DataContract]
    public partial class ConversationsMessageFile :  IEquatable<ConversationsMessageFile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationsMessageFile" /> class.
        /// </summary>
        /// <param name="filename">Name of the file.</param>
        /// <param name="size">Size in bytes.</param>
        /// <param name="isImage">Whether the file is an image.</param>
        /// <param name="url">URL of the file.</param>
        /// <param name="imageInfo">imageInfo.</param>
        public ConversationsMessageFile(string filename = default(string), long? size = default(long?), bool? isImage = default(bool?), string url = default(string), ConversationsMessageFileImageInfo imageInfo = default(ConversationsMessageFileImageInfo))
        {
            this.Filename = filename;
            this.Size = size;
            this.IsImage = isImage;
            this.Url = url;
            this.ImageInfo = imageInfo;
        }
        
        /// <summary>
        /// Name of the file
        /// </summary>
        /// <value>Name of the file</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Size in bytes
        /// </summary>
        /// <value>Size in bytes</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long? Size { get; set; }

        /// <summary>
        /// Whether the file is an image
        /// </summary>
        /// <value>Whether the file is an image</value>
        [DataMember(Name="isImage", EmitDefaultValue=false)]
        public bool? IsImage { get; set; }

        /// <summary>
        /// URL of the file
        /// </summary>
        /// <value>URL of the file</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets ImageInfo
        /// </summary>
        [DataMember(Name="imageInfo", EmitDefaultValue=false)]
        public ConversationsMessageFileImageInfo ImageInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationsMessageFile {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  IsImage: ").Append(IsImage).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ImageInfo: ").Append(ImageInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationsMessageFile);
        }

        /// <summary>
        /// Returns true if ConversationsMessageFile instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationsMessageFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationsMessageFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.IsImage == input.IsImage ||
                    (this.IsImage != null &&
                    this.IsImage.Equals(input.IsImage))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ImageInfo == input.ImageInfo ||
                    (this.ImageInfo != null &&
                    this.ImageInfo.Equals(input.ImageInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.IsImage != null)
                    hashCode = hashCode * 59 + this.IsImage.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.ImageInfo != null)
                    hashCode = hashCode * 59 + this.ImageInfo.GetHashCode();
                return hashCode;
            }
        }
    }

}
