/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Payload for creating an order linked to a balance definition.
    /// </summary>
    [DataContract]
    public partial class CreateOrderPayload :  IEquatable<CreateOrderPayload>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateOrderPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderPayload" /> class.
        /// </summary>
        /// <param name="amount">Order amount (must be non-zero). (required).</param>
        /// <param name="balanceDefinitionId">Unique identifier (UUID) of the associated balance definition. (required).</param>
        /// <param name="contactId">Unique identifier of the contact placing the order (must be ≥ 1). (required).</param>
        /// <param name="dueAt">RFC3339 timestamp specifying when the order is due. (required).</param>
        /// <param name="expiresAt">Optional RFC3339 timestamp defining order expiration..</param>
        /// <param name="meta">Optional metadata associated with the order..</param>
        /// <param name="source">Specifies the origin of the order (&#x60;engine&#x60; or &#x60;user&#x60;). (required).</param>
        public CreateOrderPayload(decimal? amount = default(decimal?), string balanceDefinitionId = default(string), int? contactId = default(int?), string dueAt = default(string), string expiresAt = default(string), Object meta = default(Object), string source = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for CreateOrderPayload and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "balanceDefinitionId" is required (not null)
            if (balanceDefinitionId == null)
            {
                throw new InvalidDataException("balanceDefinitionId is a required property for CreateOrderPayload and cannot be null");
            }
            else
            {
                this.BalanceDefinitionId = balanceDefinitionId;
            }
            // to ensure "contactId" is required (not null)
            if (contactId == null)
            {
                throw new InvalidDataException("contactId is a required property for CreateOrderPayload and cannot be null");
            }
            else
            {
                this.ContactId = contactId;
            }
            // to ensure "dueAt" is required (not null)
            if (dueAt == null)
            {
                throw new InvalidDataException("dueAt is a required property for CreateOrderPayload and cannot be null");
            }
            else
            {
                this.DueAt = dueAt;
            }
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new InvalidDataException("source is a required property for CreateOrderPayload and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            this.ExpiresAt = expiresAt;
            this.Meta = meta;
        }
        
        /// <summary>
        /// Order amount (must be non-zero).
        /// </summary>
        /// <value>Order amount (must be non-zero).</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Unique identifier (UUID) of the associated balance definition.
        /// </summary>
        /// <value>Unique identifier (UUID) of the associated balance definition.</value>
        [DataMember(Name="balanceDefinitionId", EmitDefaultValue=false)]
        public string BalanceDefinitionId { get; set; }

        /// <summary>
        /// Unique identifier of the contact placing the order (must be ≥ 1).
        /// </summary>
        /// <value>Unique identifier of the contact placing the order (must be ≥ 1).</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public int? ContactId { get; set; }

        /// <summary>
        /// RFC3339 timestamp specifying when the order is due.
        /// </summary>
        /// <value>RFC3339 timestamp specifying when the order is due.</value>
        [DataMember(Name="dueAt", EmitDefaultValue=false)]
        public string DueAt { get; set; }

        /// <summary>
        /// Optional RFC3339 timestamp defining order expiration.
        /// </summary>
        /// <value>Optional RFC3339 timestamp defining order expiration.</value>
        [DataMember(Name="expiresAt", EmitDefaultValue=false)]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Optional metadata associated with the order.
        /// </summary>
        /// <value>Optional metadata associated with the order.</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Object Meta { get; set; }

        /// <summary>
        /// Specifies the origin of the order (&#x60;engine&#x60; or &#x60;user&#x60;).
        /// </summary>
        /// <value>Specifies the origin of the order (&#x60;engine&#x60; or &#x60;user&#x60;).</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrderPayload {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BalanceDefinitionId: ").Append(BalanceDefinitionId).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  DueAt: ").Append(DueAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOrderPayload);
        }

        /// <summary>
        /// Returns true if CreateOrderPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateOrderPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrderPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BalanceDefinitionId == input.BalanceDefinitionId ||
                    (this.BalanceDefinitionId != null &&
                    this.BalanceDefinitionId.Equals(input.BalanceDefinitionId))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.DueAt == input.DueAt ||
                    (this.DueAt != null &&
                    this.DueAt.Equals(input.DueAt))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BalanceDefinitionId != null)
                    hashCode = hashCode * 59 + this.BalanceDefinitionId.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.DueAt != null)
                    hashCode = hashCode * 59 + this.DueAt.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }
    }

}
