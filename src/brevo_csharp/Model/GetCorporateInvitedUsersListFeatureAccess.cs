/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Feature accessiblity given to the user. (Required only if status is active)
    /// </summary>
    [DataContract]
    public partial class GetCorporateInvitedUsersListFeatureAccess :  IEquatable<GetCorporateInvitedUsersListFeatureAccess>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporateInvitedUsersListFeatureAccess" /> class.
        /// </summary>
        /// <param name="userManagement">User management accessiblity..</param>
        /// <param name="apiKeys">Api keys accessiblity..</param>
        /// <param name="myPlan">My plan accessiblity..</param>
        /// <param name="appsManagement">Apps management accessiblity | Not available in ENTv2.</param>
        /// <param name="subOrganizationGroups">Group creation, modification or deletion accessibility.</param>
        /// <param name="createSubOrganizations">Authorization to create sub-organization in the admin account. If the user creating the sub-organization, belongs to a group, the user must choose a group at the sub-organization creation..</param>
        /// <param name="manageSubOrganizations">Authorization to manage and access sub-organizations in the admin account..</param>
        /// <param name="analytics">Analytics dashboard accessibility.</param>
        /// <param name="security">Security page accessibility.</param>
        public GetCorporateInvitedUsersListFeatureAccess(List<string> userManagement = default(List<string>), List<string> apiKeys = default(List<string>), List<string> myPlan = default(List<string>), List<string> appsManagement = default(List<string>), List<string> subOrganizationGroups = default(List<string>), List<string> createSubOrganizations = default(List<string>), List<string> manageSubOrganizations = default(List<string>), List<string> analytics = default(List<string>), List<string> security = default(List<string>))
        {
            this.UserManagement = userManagement;
            this.ApiKeys = apiKeys;
            this.MyPlan = myPlan;
            this.AppsManagement = appsManagement;
            this.SubOrganizationGroups = subOrganizationGroups;
            this.CreateSubOrganizations = createSubOrganizations;
            this.ManageSubOrganizations = manageSubOrganizations;
            this.Analytics = analytics;
            this.Security = security;
        }
        
        /// <summary>
        /// User management accessiblity.
        /// </summary>
        /// <value>User management accessiblity.</value>
        [DataMember(Name="user_management", EmitDefaultValue=false)]
        public List<string> UserManagement { get; set; }

        /// <summary>
        /// Api keys accessiblity.
        /// </summary>
        /// <value>Api keys accessiblity.</value>
        [DataMember(Name="api_keys", EmitDefaultValue=false)]
        public List<string> ApiKeys { get; set; }

        /// <summary>
        /// My plan accessiblity.
        /// </summary>
        /// <value>My plan accessiblity.</value>
        [DataMember(Name="my_plan", EmitDefaultValue=false)]
        public List<string> MyPlan { get; set; }

        /// <summary>
        /// Apps management accessiblity | Not available in ENTv2
        /// </summary>
        /// <value>Apps management accessiblity | Not available in ENTv2</value>
        [DataMember(Name="apps_management", EmitDefaultValue=false)]
        public List<string> AppsManagement { get; set; }

        /// <summary>
        /// Group creation, modification or deletion accessibility
        /// </summary>
        /// <value>Group creation, modification or deletion accessibility</value>
        [DataMember(Name="sub_organization_groups", EmitDefaultValue=false)]
        public List<string> SubOrganizationGroups { get; set; }

        /// <summary>
        /// Authorization to create sub-organization in the admin account. If the user creating the sub-organization, belongs to a group, the user must choose a group at the sub-organization creation.
        /// </summary>
        /// <value>Authorization to create sub-organization in the admin account. If the user creating the sub-organization, belongs to a group, the user must choose a group at the sub-organization creation.</value>
        [DataMember(Name="create_sub_organizations", EmitDefaultValue=false)]
        public List<string> CreateSubOrganizations { get; set; }

        /// <summary>
        /// Authorization to manage and access sub-organizations in the admin account.
        /// </summary>
        /// <value>Authorization to manage and access sub-organizations in the admin account.</value>
        [DataMember(Name="manage_sub_organizations", EmitDefaultValue=false)]
        public List<string> ManageSubOrganizations { get; set; }

        /// <summary>
        /// Analytics dashboard accessibility
        /// </summary>
        /// <value>Analytics dashboard accessibility</value>
        [DataMember(Name="analytics", EmitDefaultValue=false)]
        public List<string> Analytics { get; set; }

        /// <summary>
        /// Security page accessibility
        /// </summary>
        /// <value>Security page accessibility</value>
        [DataMember(Name="security", EmitDefaultValue=false)]
        public List<string> Security { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporateInvitedUsersListFeatureAccess {\n");
            sb.Append("  UserManagement: ").Append(UserManagement).Append("\n");
            sb.Append("  ApiKeys: ").Append(ApiKeys).Append("\n");
            sb.Append("  MyPlan: ").Append(MyPlan).Append("\n");
            sb.Append("  AppsManagement: ").Append(AppsManagement).Append("\n");
            sb.Append("  SubOrganizationGroups: ").Append(SubOrganizationGroups).Append("\n");
            sb.Append("  CreateSubOrganizations: ").Append(CreateSubOrganizations).Append("\n");
            sb.Append("  ManageSubOrganizations: ").Append(ManageSubOrganizations).Append("\n");
            sb.Append("  Analytics: ").Append(Analytics).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporateInvitedUsersListFeatureAccess);
        }

        /// <summary>
        /// Returns true if GetCorporateInvitedUsersListFeatureAccess instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporateInvitedUsersListFeatureAccess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporateInvitedUsersListFeatureAccess input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserManagement == input.UserManagement ||
                    this.UserManagement != null &&
                    this.UserManagement.SequenceEqual(input.UserManagement)
                ) && 
                (
                    this.ApiKeys == input.ApiKeys ||
                    this.ApiKeys != null &&
                    this.ApiKeys.SequenceEqual(input.ApiKeys)
                ) && 
                (
                    this.MyPlan == input.MyPlan ||
                    this.MyPlan != null &&
                    this.MyPlan.SequenceEqual(input.MyPlan)
                ) && 
                (
                    this.AppsManagement == input.AppsManagement ||
                    this.AppsManagement != null &&
                    this.AppsManagement.SequenceEqual(input.AppsManagement)
                ) && 
                (
                    this.SubOrganizationGroups == input.SubOrganizationGroups ||
                    this.SubOrganizationGroups != null &&
                    this.SubOrganizationGroups.SequenceEqual(input.SubOrganizationGroups)
                ) && 
                (
                    this.CreateSubOrganizations == input.CreateSubOrganizations ||
                    this.CreateSubOrganizations != null &&
                    this.CreateSubOrganizations.SequenceEqual(input.CreateSubOrganizations)
                ) && 
                (
                    this.ManageSubOrganizations == input.ManageSubOrganizations ||
                    this.ManageSubOrganizations != null &&
                    this.ManageSubOrganizations.SequenceEqual(input.ManageSubOrganizations)
                ) && 
                (
                    this.Analytics == input.Analytics ||
                    this.Analytics != null &&
                    this.Analytics.SequenceEqual(input.Analytics)
                ) && 
                (
                    this.Security == input.Security ||
                    this.Security != null &&
                    this.Security.SequenceEqual(input.Security)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserManagement != null)
                    hashCode = hashCode * 59 + this.UserManagement.GetHashCode();
                if (this.ApiKeys != null)
                    hashCode = hashCode * 59 + this.ApiKeys.GetHashCode();
                if (this.MyPlan != null)
                    hashCode = hashCode * 59 + this.MyPlan.GetHashCode();
                if (this.AppsManagement != null)
                    hashCode = hashCode * 59 + this.AppsManagement.GetHashCode();
                if (this.SubOrganizationGroups != null)
                    hashCode = hashCode * 59 + this.SubOrganizationGroups.GetHashCode();
                if (this.CreateSubOrganizations != null)
                    hashCode = hashCode * 59 + this.CreateSubOrganizations.GetHashCode();
                if (this.ManageSubOrganizations != null)
                    hashCode = hashCode * 59 + this.ManageSubOrganizations.GetHashCode();
                if (this.Analytics != null)
                    hashCode = hashCode * 59 + this.Analytics.GetHashCode();
                if (this.Security != null)
                    hashCode = hashCode * 59 + this.Security.GetHashCode();
                return hashCode;
            }
        }
    }

}
