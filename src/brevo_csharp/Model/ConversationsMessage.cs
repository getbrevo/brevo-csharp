/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// a Conversations message
    /// </summary>
    [DataContract]
    public partial class ConversationsMessage :  IEquatable<ConversationsMessage>
    {
        /// <summary>
        /// &#x60;\&quot;agent\&quot;&#x60; for agents’ messages, &#x60;\&quot;visitor\&quot;&#x60; for visitors’ messages.
        /// </summary>
        /// <value>&#x60;\&quot;agent\&quot;&#x60; for agents’ messages, &#x60;\&quot;visitor\&quot;&#x60; for visitors’ messages.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Agent for value: agent
            /// </summary>
            [EnumMember(Value = "agent")]
            Agent = 1,
            
            /// <summary>
            /// Enum Visitor for value: visitor
            /// </summary>
            [EnumMember(Value = "visitor")]
            Visitor = 2
        }

        /// <summary>
        /// &#x60;\&quot;agent\&quot;&#x60; for agents’ messages, &#x60;\&quot;visitor\&quot;&#x60; for visitors’ messages.
        /// </summary>
        /// <value>&#x60;\&quot;agent\&quot;&#x60; for agents’ messages, &#x60;\&quot;visitor\&quot;&#x60; for visitors’ messages.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationsMessage" /> class.
        /// </summary>
        /// <param name="id">Message ID. It can be used for further manipulations with the message..</param>
        /// <param name="type">&#x60;\&quot;agent\&quot;&#x60; for agents’ messages, &#x60;\&quot;visitor\&quot;&#x60; for visitors’ messages..</param>
        /// <param name="text">Message text or name of the attached file.</param>
        /// <param name="subject">The subject line of the email message (only for messages sent to email threads)..</param>
        /// <param name="html">The HTML content of the message..</param>
        /// <param name="rawUnsafeHtml">Unescaped HTML content of the message (may include unsafe HTML)..</param>
        /// <param name="visitorId">visitor’s ID.</param>
        /// <param name="agentId">ID of the agent on whose behalf the message was sent (only in messages sent by an agent)..</param>
        /// <param name="agentName">Agent’s name as displayed to the visitor. Only in the messages sent by an agent..</param>
        /// <param name="createdAt">Timestamp in milliseconds..</param>
        /// <param name="isPushed">&#x60;true&#x60; for pushed messages.</param>
        /// <param name="isTrigger">&#x60;true&#x60; for automatic messages from “Targeted chats &amp; triggers” and API (https://developers.brevo.com/docs/javascript-api-reference#sendautomessage).</param>
        /// <param name="isMissed">&#x60;true&#x60; for missed and offline messages..</param>
        /// <param name="isMissedByVisitor">&#x60;true&#x60; for unread agent’s messages in finished chats..</param>
        /// <param name="agentUserpic">Only set if the agent has uploaded a profile picture..</param>
        /// <param name="receivedFrom">In two-way integrations, messages sent via REST API can be marked with receivedFrom property and then filtered out when received in a webhook to avoid infinite loop..</param>
        /// <param name="file">file.</param>
        /// <param name="from">from.</param>
        /// <param name="to">An array containing details of the recipients (applicable only to messages in email threads)..</param>
        /// <param name="replyTo">replyTo.</param>
        /// <param name="cc">An array containing details of the carbon copy (CC) recipients (applicable only to messages in email threads)..</param>
        /// <param name="bcc">An array containing details of the blind carbon copy (BCC) recipients (applicable only to messages in email threads)..</param>
        /// <param name="sourceMessageId">The ID of the message assigned by the integration source..</param>
        /// <param name="forwardedToSourceStatus">forwardedToSourceStatus.</param>
        /// <param name="integrations">Integration details..</param>
        /// <param name="isBot">&#x60;true&#x60; for automated messages generated by an AI bot..</param>
        /// <param name="attachments">An array of file attachments..</param>
        public ConversationsMessage(string id = default(string), TypeEnum? type = default(TypeEnum?), string text = default(string), string subject = default(string), string html = default(string), string rawUnsafeHtml = default(string), string visitorId = default(string), string agentId = default(string), string agentName = default(string), long? createdAt = default(long?), bool? isPushed = default(bool?), bool? isTrigger = default(bool?), bool? isMissed = default(bool?), bool? isMissedByVisitor = default(bool?), string agentUserpic = default(string), string receivedFrom = default(string), ConversationsMessageFile file = default(ConversationsMessageFile), ConversationsMessageFrom from = default(ConversationsMessageFrom), List<ConversationsMessageTo> to = default(List<ConversationsMessageTo>), ConversationsMessageReplyTo replyTo = default(ConversationsMessageReplyTo), List<ConversationsMessageTo> cc = default(List<ConversationsMessageTo>), List<ConversationsMessageTo> bcc = default(List<ConversationsMessageTo>), string sourceMessageId = default(string), ConversationsMessageForwardedToSourceStatus forwardedToSourceStatus = default(ConversationsMessageForwardedToSourceStatus), Object integrations = default(Object), bool? isBot = default(bool?), List<ConversationsMessageAttachments> attachments = default(List<ConversationsMessageAttachments>))
        {
            this.Id = id;
            this.Type = type;
            this.Text = text;
            this.Subject = subject;
            this.Html = html;
            this.RawUnsafeHtml = rawUnsafeHtml;
            this.VisitorId = visitorId;
            this.AgentId = agentId;
            this.AgentName = agentName;
            this.CreatedAt = createdAt;
            this.IsPushed = isPushed;
            this.IsTrigger = isTrigger;
            this.IsMissed = isMissed;
            this.IsMissedByVisitor = isMissedByVisitor;
            this.AgentUserpic = agentUserpic;
            this.ReceivedFrom = receivedFrom;
            this.File = file;
            this.From = from;
            this.To = to;
            this.ReplyTo = replyTo;
            this.Cc = cc;
            this.Bcc = bcc;
            this.SourceMessageId = sourceMessageId;
            this.ForwardedToSourceStatus = forwardedToSourceStatus;
            this.Integrations = integrations;
            this.IsBot = isBot;
            this.Attachments = attachments;
        }
        
        /// <summary>
        /// Message ID. It can be used for further manipulations with the message.
        /// </summary>
        /// <value>Message ID. It can be used for further manipulations with the message.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Message text or name of the attached file
        /// </summary>
        /// <value>Message text or name of the attached file</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The subject line of the email message (only for messages sent to email threads).
        /// </summary>
        /// <value>The subject line of the email message (only for messages sent to email threads).</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// The HTML content of the message.
        /// </summary>
        /// <value>The HTML content of the message.</value>
        [DataMember(Name="html", EmitDefaultValue=false)]
        public string Html { get; set; }

        /// <summary>
        /// Unescaped HTML content of the message (may include unsafe HTML).
        /// </summary>
        /// <value>Unescaped HTML content of the message (may include unsafe HTML).</value>
        [DataMember(Name="rawUnsafeHtml", EmitDefaultValue=false)]
        public string RawUnsafeHtml { get; set; }

        /// <summary>
        /// visitor’s ID
        /// </summary>
        /// <value>visitor’s ID</value>
        [DataMember(Name="visitorId", EmitDefaultValue=false)]
        public string VisitorId { get; set; }

        /// <summary>
        /// ID of the agent on whose behalf the message was sent (only in messages sent by an agent).
        /// </summary>
        /// <value>ID of the agent on whose behalf the message was sent (only in messages sent by an agent).</value>
        [DataMember(Name="agentId", EmitDefaultValue=false)]
        public string AgentId { get; set; }

        /// <summary>
        /// Agent’s name as displayed to the visitor. Only in the messages sent by an agent.
        /// </summary>
        /// <value>Agent’s name as displayed to the visitor. Only in the messages sent by an agent.</value>
        [DataMember(Name="agentName", EmitDefaultValue=false)]
        public string AgentName { get; set; }

        /// <summary>
        /// Timestamp in milliseconds.
        /// </summary>
        /// <value>Timestamp in milliseconds.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// &#x60;true&#x60; for pushed messages
        /// </summary>
        /// <value>&#x60;true&#x60; for pushed messages</value>
        [DataMember(Name="isPushed", EmitDefaultValue=false)]
        public bool? IsPushed { get; set; }

        /// <summary>
        /// &#x60;true&#x60; for automatic messages from “Targeted chats &amp; triggers” and API (https://developers.brevo.com/docs/javascript-api-reference#sendautomessage)
        /// </summary>
        /// <value>&#x60;true&#x60; for automatic messages from “Targeted chats &amp; triggers” and API (https://developers.brevo.com/docs/javascript-api-reference#sendautomessage)</value>
        [DataMember(Name="isTrigger", EmitDefaultValue=false)]
        public bool? IsTrigger { get; set; }

        /// <summary>
        /// &#x60;true&#x60; for missed and offline messages.
        /// </summary>
        /// <value>&#x60;true&#x60; for missed and offline messages.</value>
        [DataMember(Name="isMissed", EmitDefaultValue=false)]
        public bool? IsMissed { get; set; }

        /// <summary>
        /// &#x60;true&#x60; for unread agent’s messages in finished chats.
        /// </summary>
        /// <value>&#x60;true&#x60; for unread agent’s messages in finished chats.</value>
        [DataMember(Name="isMissedByVisitor", EmitDefaultValue=false)]
        public bool? IsMissedByVisitor { get; set; }

        /// <summary>
        /// Only set if the agent has uploaded a profile picture.
        /// </summary>
        /// <value>Only set if the agent has uploaded a profile picture.</value>
        [DataMember(Name="agentUserpic", EmitDefaultValue=false)]
        public string AgentUserpic { get; set; }

        /// <summary>
        /// In two-way integrations, messages sent via REST API can be marked with receivedFrom property and then filtered out when received in a webhook to avoid infinite loop.
        /// </summary>
        /// <value>In two-way integrations, messages sent via REST API can be marked with receivedFrom property and then filtered out when received in a webhook to avoid infinite loop.</value>
        [DataMember(Name="receivedFrom", EmitDefaultValue=false)]
        public string ReceivedFrom { get; set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public ConversationsMessageFile File { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public ConversationsMessageFrom From { get; set; }

        /// <summary>
        /// An array containing details of the recipients (applicable only to messages in email threads).
        /// </summary>
        /// <value>An array containing details of the recipients (applicable only to messages in email threads).</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<ConversationsMessageTo> To { get; set; }

        /// <summary>
        /// Gets or Sets ReplyTo
        /// </summary>
        [DataMember(Name="replyTo", EmitDefaultValue=false)]
        public ConversationsMessageReplyTo ReplyTo { get; set; }

        /// <summary>
        /// An array containing details of the carbon copy (CC) recipients (applicable only to messages in email threads).
        /// </summary>
        /// <value>An array containing details of the carbon copy (CC) recipients (applicable only to messages in email threads).</value>
        [DataMember(Name="cc", EmitDefaultValue=false)]
        public List<ConversationsMessageTo> Cc { get; set; }

        /// <summary>
        /// An array containing details of the blind carbon copy (BCC) recipients (applicable only to messages in email threads).
        /// </summary>
        /// <value>An array containing details of the blind carbon copy (BCC) recipients (applicable only to messages in email threads).</value>
        [DataMember(Name="bcc", EmitDefaultValue=false)]
        public List<ConversationsMessageTo> Bcc { get; set; }

        /// <summary>
        /// The ID of the message assigned by the integration source.
        /// </summary>
        /// <value>The ID of the message assigned by the integration source.</value>
        [DataMember(Name="sourceMessageId", EmitDefaultValue=false)]
        public string SourceMessageId { get; set; }

        /// <summary>
        /// Gets or Sets ForwardedToSourceStatus
        /// </summary>
        [DataMember(Name="forwardedToSourceStatus", EmitDefaultValue=false)]
        public ConversationsMessageForwardedToSourceStatus ForwardedToSourceStatus { get; set; }

        /// <summary>
        /// Integration details.
        /// </summary>
        /// <value>Integration details.</value>
        [DataMember(Name="integrations", EmitDefaultValue=false)]
        public Object Integrations { get; set; }

        /// <summary>
        /// &#x60;true&#x60; for automated messages generated by an AI bot.
        /// </summary>
        /// <value>&#x60;true&#x60; for automated messages generated by an AI bot.</value>
        [DataMember(Name="isBot", EmitDefaultValue=false)]
        public bool? IsBot { get; set; }

        /// <summary>
        /// An array of file attachments.
        /// </summary>
        /// <value>An array of file attachments.</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<ConversationsMessageAttachments> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationsMessage {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  RawUnsafeHtml: ").Append(RawUnsafeHtml).Append("\n");
            sb.Append("  VisitorId: ").Append(VisitorId).Append("\n");
            sb.Append("  AgentId: ").Append(AgentId).Append("\n");
            sb.Append("  AgentName: ").Append(AgentName).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  IsPushed: ").Append(IsPushed).Append("\n");
            sb.Append("  IsTrigger: ").Append(IsTrigger).Append("\n");
            sb.Append("  IsMissed: ").Append(IsMissed).Append("\n");
            sb.Append("  IsMissedByVisitor: ").Append(IsMissedByVisitor).Append("\n");
            sb.Append("  AgentUserpic: ").Append(AgentUserpic).Append("\n");
            sb.Append("  ReceivedFrom: ").Append(ReceivedFrom).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  SourceMessageId: ").Append(SourceMessageId).Append("\n");
            sb.Append("  ForwardedToSourceStatus: ").Append(ForwardedToSourceStatus).Append("\n");
            sb.Append("  Integrations: ").Append(Integrations).Append("\n");
            sb.Append("  IsBot: ").Append(IsBot).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationsMessage);
        }

        /// <summary>
        /// Returns true if ConversationsMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationsMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationsMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Html == input.Html ||
                    (this.Html != null &&
                    this.Html.Equals(input.Html))
                ) && 
                (
                    this.RawUnsafeHtml == input.RawUnsafeHtml ||
                    (this.RawUnsafeHtml != null &&
                    this.RawUnsafeHtml.Equals(input.RawUnsafeHtml))
                ) && 
                (
                    this.VisitorId == input.VisitorId ||
                    (this.VisitorId != null &&
                    this.VisitorId.Equals(input.VisitorId))
                ) && 
                (
                    this.AgentId == input.AgentId ||
                    (this.AgentId != null &&
                    this.AgentId.Equals(input.AgentId))
                ) && 
                (
                    this.AgentName == input.AgentName ||
                    (this.AgentName != null &&
                    this.AgentName.Equals(input.AgentName))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.IsPushed == input.IsPushed ||
                    (this.IsPushed != null &&
                    this.IsPushed.Equals(input.IsPushed))
                ) && 
                (
                    this.IsTrigger == input.IsTrigger ||
                    (this.IsTrigger != null &&
                    this.IsTrigger.Equals(input.IsTrigger))
                ) && 
                (
                    this.IsMissed == input.IsMissed ||
                    (this.IsMissed != null &&
                    this.IsMissed.Equals(input.IsMissed))
                ) && 
                (
                    this.IsMissedByVisitor == input.IsMissedByVisitor ||
                    (this.IsMissedByVisitor != null &&
                    this.IsMissedByVisitor.Equals(input.IsMissedByVisitor))
                ) && 
                (
                    this.AgentUserpic == input.AgentUserpic ||
                    (this.AgentUserpic != null &&
                    this.AgentUserpic.Equals(input.AgentUserpic))
                ) && 
                (
                    this.ReceivedFrom == input.ReceivedFrom ||
                    (this.ReceivedFrom != null &&
                    this.ReceivedFrom.Equals(input.ReceivedFrom))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.ReplyTo == input.ReplyTo ||
                    (this.ReplyTo != null &&
                    this.ReplyTo.Equals(input.ReplyTo))
                ) && 
                (
                    this.Cc == input.Cc ||
                    this.Cc != null &&
                    this.Cc.SequenceEqual(input.Cc)
                ) && 
                (
                    this.Bcc == input.Bcc ||
                    this.Bcc != null &&
                    this.Bcc.SequenceEqual(input.Bcc)
                ) && 
                (
                    this.SourceMessageId == input.SourceMessageId ||
                    (this.SourceMessageId != null &&
                    this.SourceMessageId.Equals(input.SourceMessageId))
                ) && 
                (
                    this.ForwardedToSourceStatus == input.ForwardedToSourceStatus ||
                    (this.ForwardedToSourceStatus != null &&
                    this.ForwardedToSourceStatus.Equals(input.ForwardedToSourceStatus))
                ) && 
                (
                    this.Integrations == input.Integrations ||
                    (this.Integrations != null &&
                    this.Integrations.Equals(input.Integrations))
                ) && 
                (
                    this.IsBot == input.IsBot ||
                    (this.IsBot != null &&
                    this.IsBot.Equals(input.IsBot))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Html != null)
                    hashCode = hashCode * 59 + this.Html.GetHashCode();
                if (this.RawUnsafeHtml != null)
                    hashCode = hashCode * 59 + this.RawUnsafeHtml.GetHashCode();
                if (this.VisitorId != null)
                    hashCode = hashCode * 59 + this.VisitorId.GetHashCode();
                if (this.AgentId != null)
                    hashCode = hashCode * 59 + this.AgentId.GetHashCode();
                if (this.AgentName != null)
                    hashCode = hashCode * 59 + this.AgentName.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.IsPushed != null)
                    hashCode = hashCode * 59 + this.IsPushed.GetHashCode();
                if (this.IsTrigger != null)
                    hashCode = hashCode * 59 + this.IsTrigger.GetHashCode();
                if (this.IsMissed != null)
                    hashCode = hashCode * 59 + this.IsMissed.GetHashCode();
                if (this.IsMissedByVisitor != null)
                    hashCode = hashCode * 59 + this.IsMissedByVisitor.GetHashCode();
                if (this.AgentUserpic != null)
                    hashCode = hashCode * 59 + this.AgentUserpic.GetHashCode();
                if (this.ReceivedFrom != null)
                    hashCode = hashCode * 59 + this.ReceivedFrom.GetHashCode();
                if (this.File != null)
                    hashCode = hashCode * 59 + this.File.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ReplyTo != null)
                    hashCode = hashCode * 59 + this.ReplyTo.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Bcc != null)
                    hashCode = hashCode * 59 + this.Bcc.GetHashCode();
                if (this.SourceMessageId != null)
                    hashCode = hashCode * 59 + this.SourceMessageId.GetHashCode();
                if (this.ForwardedToSourceStatus != null)
                    hashCode = hashCode * 59 + this.ForwardedToSourceStatus.GetHashCode();
                if (this.Integrations != null)
                    hashCode = hashCode * 59 + this.Integrations.GetHashCode();
                if (this.IsBot != null)
                    hashCode = hashCode * 59 + this.IsBot.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                return hashCode;
            }
        }
    }

}
