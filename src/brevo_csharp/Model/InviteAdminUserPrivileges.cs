/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Privileges given to the user
    /// </summary>
    [DataContract]
    public partial class InviteAdminUserPrivileges :  IEquatable<InviteAdminUserPrivileges>
    {
        /// <summary>
        /// Feature name
        /// </summary>
        /// <value>Feature name</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FeatureEnum
        {
            
            /// <summary>
            /// Enum Myplan for value: my_plan
            /// </summary>
            [EnumMember(Value = "my_plan")]
            Myplan = 1,
            
            /// <summary>
            /// Enum Api for value: api
            /// </summary>
            [EnumMember(Value = "api")]
            Api = 2,
            
            /// <summary>
            /// Enum Usermanagement for value: user_management
            /// </summary>
            [EnumMember(Value = "user_management")]
            Usermanagement = 3,
            
            /// <summary>
            /// Enum Appmanagement for value: app_management
            /// </summary>
            [EnumMember(Value = "app_management")]
            Appmanagement = 4,
            
            /// <summary>
            /// Enum Suborganizationgroups for value: sub_organization_groups
            /// </summary>
            [EnumMember(Value = "sub_organization_groups")]
            Suborganizationgroups = 5,
            
            /// <summary>
            /// Enum Createsuborganizations for value: create_sub_organizations
            /// </summary>
            [EnumMember(Value = "create_sub_organizations")]
            Createsuborganizations = 6,
            
            /// <summary>
            /// Enum Managesuborganizations for value: manage_sub_organizations
            /// </summary>
            [EnumMember(Value = "manage_sub_organizations")]
            Managesuborganizations = 7,
            
            /// <summary>
            /// Enum Analytics for value: analytics
            /// </summary>
            [EnumMember(Value = "analytics")]
            Analytics = 8,
            
            /// <summary>
            /// Enum Security for value: security
            /// </summary>
            [EnumMember(Value = "security")]
            Security = 9
        }

        /// <summary>
        /// Feature name
        /// </summary>
        /// <value>Feature name</value>
        [DataMember(Name="feature", EmitDefaultValue=false)]
        public FeatureEnum? Feature { get; set; }
        /// <summary>
        /// Defines Permissions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PermissionsEnum
        {
            
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 2,
            
            /// <summary>
            /// Enum Create for value: create
            /// </summary>
            [EnumMember(Value = "create")]
            Create = 3,
            
            /// <summary>
            /// Enum Editdelete for value: edit_delete
            /// </summary>
            [EnumMember(Value = "edit_delete")]
            Editdelete = 4,
            
            /// <summary>
            /// Enum Downloaddata for value: download_data
            /// </summary>
            [EnumMember(Value = "download_data")]
            Downloaddata = 5,
            
            /// <summary>
            /// Enum Createalerts for value: create_alerts
            /// </summary>
            [EnumMember(Value = "create_alerts")]
            Createalerts = 6
        }


        /// <summary>
        /// Permissions for a given feature
        /// </summary>
        /// <value>Permissions for a given feature</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<PermissionsEnum> Permissions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteAdminUserPrivileges" /> class.
        /// </summary>
        /// <param name="feature">Feature name.</param>
        /// <param name="permissions">Permissions for a given feature.</param>
        public InviteAdminUserPrivileges(FeatureEnum? feature = default(FeatureEnum?), List<PermissionsEnum> permissions = default(List<PermissionsEnum>))
        {
            this.Feature = feature;
            this.Permissions = permissions;
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InviteAdminUserPrivileges {\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InviteAdminUserPrivileges);
        }

        /// <summary>
        /// Returns true if InviteAdminUserPrivileges instances are equal
        /// </summary>
        /// <param name="input">Instance of InviteAdminUserPrivileges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InviteAdminUserPrivileges input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Feature == input.Feature ||
                    (this.Feature != null &&
                    this.Feature.Equals(input.Feature))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Feature != null)
                    hashCode = hashCode * 59 + this.Feature.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                return hashCode;
            }
        }
    }

}
