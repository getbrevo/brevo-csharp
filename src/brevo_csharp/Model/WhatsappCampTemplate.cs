/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// WhatsappCampTemplate
    /// </summary>
    [DataContract]
    public partial class WhatsappCampTemplate :  IEquatable<WhatsappCampTemplate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappCampTemplate" /> class.
        /// </summary>
        /// <param name="name">name of the template.</param>
        /// <param name="category">description of the template.</param>
        /// <param name="language">language of the template.</param>
        /// <param name="containsButton">containsButton.</param>
        /// <param name="displayHeader">displayHeader.</param>
        /// <param name="headerType">type of header.</param>
        /// <param name="components">array of component item objects.</param>
        /// <param name="headerVariables">array of variables item object.</param>
        /// <param name="bodyVariables">array of variables item variables.</param>
        /// <param name="buttonType">buttonType.</param>
        /// <param name="hideFooter">hideFooter.</param>
        public WhatsappCampTemplate(string name = default(string), string category = default(string), string language = default(string), bool? containsButton = default(bool?), bool? displayHeader = default(bool?), string headerType = default(string), List<ComponentItems> components = default(List<ComponentItems>), List<VariablesItems> headerVariables = default(List<VariablesItems>), List<VariablesItems> bodyVariables = default(List<VariablesItems>), string buttonType = default(string), bool? hideFooter = default(bool?))
        {
            this.Name = name;
            this.Category = category;
            this.Language = language;
            this.ContainsButton = containsButton;
            this.DisplayHeader = displayHeader;
            this.HeaderType = headerType;
            this.Components = components;
            this.HeaderVariables = headerVariables;
            this.BodyVariables = bodyVariables;
            this.ButtonType = buttonType;
            this.HideFooter = hideFooter;
        }
        
        /// <summary>
        /// name of the template
        /// </summary>
        /// <value>name of the template</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// description of the template
        /// </summary>
        /// <value>description of the template</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// language of the template
        /// </summary>
        /// <value>language of the template</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets ContainsButton
        /// </summary>
        [DataMember(Name="contains_button", EmitDefaultValue=false)]
        public bool? ContainsButton { get; set; }

        /// <summary>
        /// Gets or Sets DisplayHeader
        /// </summary>
        [DataMember(Name="display_header", EmitDefaultValue=false)]
        public bool? DisplayHeader { get; set; }

        /// <summary>
        /// type of header
        /// </summary>
        /// <value>type of header</value>
        [DataMember(Name="header_type", EmitDefaultValue=false)]
        public string HeaderType { get; set; }

        /// <summary>
        /// array of component item objects
        /// </summary>
        /// <value>array of component item objects</value>
        [DataMember(Name="components", EmitDefaultValue=false)]
        public List<ComponentItems> Components { get; set; }

        /// <summary>
        /// array of variables item object
        /// </summary>
        /// <value>array of variables item object</value>
        [DataMember(Name="header_variables", EmitDefaultValue=false)]
        public List<VariablesItems> HeaderVariables { get; set; }

        /// <summary>
        /// array of variables item variables
        /// </summary>
        /// <value>array of variables item variables</value>
        [DataMember(Name="body_variables", EmitDefaultValue=false)]
        public List<VariablesItems> BodyVariables { get; set; }

        /// <summary>
        /// Gets or Sets ButtonType
        /// </summary>
        [DataMember(Name="button_type", EmitDefaultValue=false)]
        public string ButtonType { get; set; }

        /// <summary>
        /// Gets or Sets HideFooter
        /// </summary>
        [DataMember(Name="hide_footer", EmitDefaultValue=false)]
        public bool? HideFooter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WhatsappCampTemplate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ContainsButton: ").Append(ContainsButton).Append("\n");
            sb.Append("  DisplayHeader: ").Append(DisplayHeader).Append("\n");
            sb.Append("  HeaderType: ").Append(HeaderType).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  HeaderVariables: ").Append(HeaderVariables).Append("\n");
            sb.Append("  BodyVariables: ").Append(BodyVariables).Append("\n");
            sb.Append("  ButtonType: ").Append(ButtonType).Append("\n");
            sb.Append("  HideFooter: ").Append(HideFooter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WhatsappCampTemplate);
        }

        /// <summary>
        /// Returns true if WhatsappCampTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of WhatsappCampTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WhatsappCampTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.ContainsButton == input.ContainsButton ||
                    (this.ContainsButton != null &&
                    this.ContainsButton.Equals(input.ContainsButton))
                ) && 
                (
                    this.DisplayHeader == input.DisplayHeader ||
                    (this.DisplayHeader != null &&
                    this.DisplayHeader.Equals(input.DisplayHeader))
                ) && 
                (
                    this.HeaderType == input.HeaderType ||
                    (this.HeaderType != null &&
                    this.HeaderType.Equals(input.HeaderType))
                ) && 
                (
                    this.Components == input.Components ||
                    this.Components != null &&
                    this.Components.SequenceEqual(input.Components)
                ) && 
                (
                    this.HeaderVariables == input.HeaderVariables ||
                    this.HeaderVariables != null &&
                    this.HeaderVariables.SequenceEqual(input.HeaderVariables)
                ) && 
                (
                    this.BodyVariables == input.BodyVariables ||
                    this.BodyVariables != null &&
                    this.BodyVariables.SequenceEqual(input.BodyVariables)
                ) && 
                (
                    this.ButtonType == input.ButtonType ||
                    (this.ButtonType != null &&
                    this.ButtonType.Equals(input.ButtonType))
                ) && 
                (
                    this.HideFooter == input.HideFooter ||
                    (this.HideFooter != null &&
                    this.HideFooter.Equals(input.HideFooter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.ContainsButton != null)
                    hashCode = hashCode * 59 + this.ContainsButton.GetHashCode();
                if (this.DisplayHeader != null)
                    hashCode = hashCode * 59 + this.DisplayHeader.GetHashCode();
                if (this.HeaderType != null)
                    hashCode = hashCode * 59 + this.HeaderType.GetHashCode();
                if (this.Components != null)
                    hashCode = hashCode * 59 + this.Components.GetHashCode();
                if (this.HeaderVariables != null)
                    hashCode = hashCode * 59 + this.HeaderVariables.GetHashCode();
                if (this.BodyVariables != null)
                    hashCode = hashCode * 59 + this.BodyVariables.GetHashCode();
                if (this.ButtonType != null)
                    hashCode = hashCode * 59 + this.ButtonType.GetHashCode();
                if (this.HideFooter != null)
                    hashCode = hashCode * 59 + this.HideFooter.GetHashCode();
                return hashCode;
            }
        }
    }

}
