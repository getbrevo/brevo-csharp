/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// image info is passed in case the file is an image
    /// </summary>
    [DataContract]
    public partial class ConversationsMessageFileImageInfo :  IEquatable<ConversationsMessageFileImageInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationsMessageFileImageInfo" /> class.
        /// </summary>
        /// <param name="width">Width of the image.</param>
        /// <param name="height">height of the image.</param>
        /// <param name="previewUrl">URL of the preview.</param>
        public ConversationsMessageFileImageInfo(long? width = default(long?), long? height = default(long?), string previewUrl = default(string))
        {
            this.Width = width;
            this.Height = height;
            this.PreviewUrl = previewUrl;
        }
        
        /// <summary>
        /// Width of the image
        /// </summary>
        /// <value>Width of the image</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public long? Width { get; set; }

        /// <summary>
        /// height of the image
        /// </summary>
        /// <value>height of the image</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public long? Height { get; set; }

        /// <summary>
        /// URL of the preview
        /// </summary>
        /// <value>URL of the preview</value>
        [DataMember(Name="previewUrl", EmitDefaultValue=false)]
        public string PreviewUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConversationsMessageFileImageInfo {\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  PreviewUrl: ").Append(PreviewUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversationsMessageFileImageInfo);
        }

        /// <summary>
        /// Returns true if ConversationsMessageFileImageInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversationsMessageFileImageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversationsMessageFileImageInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.PreviewUrl == input.PreviewUrl ||
                    (this.PreviewUrl != null &&
                    this.PreviewUrl.Equals(input.PreviewUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.PreviewUrl != null)
                    hashCode = hashCode * 59 + this.PreviewUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}
