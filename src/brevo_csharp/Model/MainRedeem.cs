/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// MainRedeem
    /// </summary>
    [DataContract]
    public partial class MainRedeem :  IEquatable<MainRedeem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainRedeem" /> class.
        /// </summary>
        /// <param name="cancelledAt">Timestamp when the redemption was cancelled.</param>
        /// <param name="completedAt">Timestamp when the redemption was completed.</param>
        /// <param name="contactId">Unique identifier for the contact.</param>
        /// <param name="createdAt">Timestamp when the redemption was created.</param>
        /// <param name="debitTransactionId">Unique identifier for the debit transaction.</param>
        /// <param name="expiresAt">Timestamp when the redemption expires.</param>
        /// <param name="id">Unique identifier for the redemption.</param>
        /// <param name="loyaltyProgramId">Unique identifier for the loyalty program.</param>
        /// <param name="meta">Additional metadata associated with the redemption.</param>
        /// <param name="rejectReason">Reason for rejection if the redemption was rejected.</param>
        /// <param name="rejectedAt">Timestamp when the redemption was rejected.</param>
        /// <param name="rewardAttributionId">Unique identifier for the reward attribution.</param>
        /// <param name="status">Current status of the redemption.</param>
        /// <param name="updatedAt">Timestamp when the redemption was last updated.</param>
        public MainRedeem(DateTime? cancelledAt = default(DateTime?), DateTime? completedAt = default(DateTime?), long? contactId = default(long?), DateTime? createdAt = default(DateTime?), Guid? debitTransactionId = default(Guid?), DateTime? expiresAt = default(DateTime?), Guid? id = default(Guid?), Guid? loyaltyProgramId = default(Guid?), Dictionary<string, Object> meta = default(Dictionary<string, Object>), string rejectReason = default(string), DateTime? rejectedAt = default(DateTime?), Guid? rewardAttributionId = default(Guid?), string status = default(string), DateTime? updatedAt = default(DateTime?))
        {
            this.CancelledAt = cancelledAt;
            this.CompletedAt = completedAt;
            this.ContactId = contactId;
            this.CreatedAt = createdAt;
            this.DebitTransactionId = debitTransactionId;
            this.ExpiresAt = expiresAt;
            this.Id = id;
            this.LoyaltyProgramId = loyaltyProgramId;
            this.Meta = meta;
            this.RejectReason = rejectReason;
            this.RejectedAt = rejectedAt;
            this.RewardAttributionId = rewardAttributionId;
            this.Status = status;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Timestamp when the redemption was cancelled
        /// </summary>
        /// <value>Timestamp when the redemption was cancelled</value>
        [DataMember(Name="cancelledAt", EmitDefaultValue=false)]
        public DateTime? CancelledAt { get; set; }

        /// <summary>
        /// Timestamp when the redemption was completed
        /// </summary>
        /// <value>Timestamp when the redemption was completed</value>
        [DataMember(Name="completedAt", EmitDefaultValue=false)]
        public DateTime? CompletedAt { get; set; }

        /// <summary>
        /// Unique identifier for the contact
        /// </summary>
        /// <value>Unique identifier for the contact</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public long? ContactId { get; set; }

        /// <summary>
        /// Timestamp when the redemption was created
        /// </summary>
        /// <value>Timestamp when the redemption was created</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Unique identifier for the debit transaction
        /// </summary>
        /// <value>Unique identifier for the debit transaction</value>
        [DataMember(Name="debitTransactionId", EmitDefaultValue=false)]
        public Guid? DebitTransactionId { get; set; }

        /// <summary>
        /// Timestamp when the redemption expires
        /// </summary>
        /// <value>Timestamp when the redemption expires</value>
        [DataMember(Name="expiresAt", EmitDefaultValue=false)]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Unique identifier for the redemption
        /// </summary>
        /// <value>Unique identifier for the redemption</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Unique identifier for the loyalty program
        /// </summary>
        /// <value>Unique identifier for the loyalty program</value>
        [DataMember(Name="loyaltyProgramId", EmitDefaultValue=false)]
        public Guid? LoyaltyProgramId { get; set; }

        /// <summary>
        /// Additional metadata associated with the redemption
        /// </summary>
        /// <value>Additional metadata associated with the redemption</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Dictionary<string, Object> Meta { get; set; }

        /// <summary>
        /// Reason for rejection if the redemption was rejected
        /// </summary>
        /// <value>Reason for rejection if the redemption was rejected</value>
        [DataMember(Name="rejectReason", EmitDefaultValue=false)]
        public string RejectReason { get; set; }

        /// <summary>
        /// Timestamp when the redemption was rejected
        /// </summary>
        /// <value>Timestamp when the redemption was rejected</value>
        [DataMember(Name="rejectedAt", EmitDefaultValue=false)]
        public DateTime? RejectedAt { get; set; }

        /// <summary>
        /// Unique identifier for the reward attribution
        /// </summary>
        /// <value>Unique identifier for the reward attribution</value>
        [DataMember(Name="rewardAttributionId", EmitDefaultValue=false)]
        public Guid? RewardAttributionId { get; set; }

        /// <summary>
        /// Current status of the redemption
        /// </summary>
        /// <value>Current status of the redemption</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Timestamp when the redemption was last updated
        /// </summary>
        /// <value>Timestamp when the redemption was last updated</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainRedeem {\n");
            sb.Append("  CancelledAt: ").Append(CancelledAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DebitTransactionId: ").Append(DebitTransactionId).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LoyaltyProgramId: ").Append(LoyaltyProgramId).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  RejectReason: ").Append(RejectReason).Append("\n");
            sb.Append("  RejectedAt: ").Append(RejectedAt).Append("\n");
            sb.Append("  RewardAttributionId: ").Append(RewardAttributionId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainRedeem);
        }

        /// <summary>
        /// Returns true if MainRedeem instances are equal
        /// </summary>
        /// <param name="input">Instance of MainRedeem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainRedeem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CancelledAt == input.CancelledAt ||
                    (this.CancelledAt != null &&
                    this.CancelledAt.Equals(input.CancelledAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DebitTransactionId == input.DebitTransactionId ||
                    (this.DebitTransactionId != null &&
                    this.DebitTransactionId.Equals(input.DebitTransactionId))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LoyaltyProgramId == input.LoyaltyProgramId ||
                    (this.LoyaltyProgramId != null &&
                    this.LoyaltyProgramId.Equals(input.LoyaltyProgramId))
                ) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                ) && 
                (
                    this.RejectReason == input.RejectReason ||
                    (this.RejectReason != null &&
                    this.RejectReason.Equals(input.RejectReason))
                ) && 
                (
                    this.RejectedAt == input.RejectedAt ||
                    (this.RejectedAt != null &&
                    this.RejectedAt.Equals(input.RejectedAt))
                ) && 
                (
                    this.RewardAttributionId == input.RewardAttributionId ||
                    (this.RewardAttributionId != null &&
                    this.RewardAttributionId.Equals(input.RewardAttributionId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CancelledAt != null)
                    hashCode = hashCode * 59 + this.CancelledAt.GetHashCode();
                if (this.CompletedAt != null)
                    hashCode = hashCode * 59 + this.CompletedAt.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DebitTransactionId != null)
                    hashCode = hashCode * 59 + this.DebitTransactionId.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LoyaltyProgramId != null)
                    hashCode = hashCode * 59 + this.LoyaltyProgramId.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.RejectReason != null)
                    hashCode = hashCode * 59 + this.RejectReason.GetHashCode();
                if (this.RejectedAt != null)
                    hashCode = hashCode * 59 + this.RejectedAt.GetHashCode();
                if (this.RewardAttributionId != null)
                    hashCode = hashCode * 59 + this.RewardAttributionId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
