/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// SendSms
    /// </summary>
    [DataContract]
    public partial class SendSms :  IEquatable<SendSms>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSms" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendSms() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSms" /> class.
        /// </summary>
        /// <param name="reference">reference (required).</param>
        /// <param name="messageId">messageId (required).</param>
        /// <param name="smsCount">Count of SMS&#39;s to send multiple text messages.</param>
        /// <param name="usedCredits">SMS credits used per text message.</param>
        /// <param name="remainingCredits">Remaining SMS credits of the user.</param>
        public SendSms(string reference = default(string), long? messageId = default(long?), long? smsCount = default(long?), float? usedCredits = default(float?), float? remainingCredits = default(float?))
        {
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new InvalidDataException("reference is a required property for SendSms and cannot be null");
            }
            else
            {
                this.Reference = reference;
            }
            // to ensure "messageId" is required (not null)
            if (messageId == null)
            {
                throw new InvalidDataException("messageId is a required property for SendSms and cannot be null");
            }
            else
            {
                this.MessageId = messageId;
            }
            this.SmsCount = smsCount;
            this.UsedCredits = usedCredits;
            this.RemainingCredits = remainingCredits;
        }
        
        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [DataMember(Name="messageId", EmitDefaultValue=false)]
        public long? MessageId { get; set; }

        /// <summary>
        /// Count of SMS&#39;s to send multiple text messages
        /// </summary>
        /// <value>Count of SMS&#39;s to send multiple text messages</value>
        [DataMember(Name="smsCount", EmitDefaultValue=false)]
        public long? SmsCount { get; set; }

        /// <summary>
        /// SMS credits used per text message
        /// </summary>
        /// <value>SMS credits used per text message</value>
        [DataMember(Name="usedCredits", EmitDefaultValue=false)]
        public float? UsedCredits { get; set; }

        /// <summary>
        /// Remaining SMS credits of the user
        /// </summary>
        /// <value>Remaining SMS credits of the user</value>
        [DataMember(Name="remainingCredits", EmitDefaultValue=false)]
        public float? RemainingCredits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendSms {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  SmsCount: ").Append(SmsCount).Append("\n");
            sb.Append("  UsedCredits: ").Append(UsedCredits).Append("\n");
            sb.Append("  RemainingCredits: ").Append(RemainingCredits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendSms);
        }

        /// <summary>
        /// Returns true if SendSms instances are equal
        /// </summary>
        /// <param name="input">Instance of SendSms to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendSms input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                ) && 
                (
                    this.SmsCount == input.SmsCount ||
                    (this.SmsCount != null &&
                    this.SmsCount.Equals(input.SmsCount))
                ) && 
                (
                    this.UsedCredits == input.UsedCredits ||
                    (this.UsedCredits != null &&
                    this.UsedCredits.Equals(input.UsedCredits))
                ) && 
                (
                    this.RemainingCredits == input.RemainingCredits ||
                    (this.RemainingCredits != null &&
                    this.RemainingCredits.Equals(input.RemainingCredits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.MessageId != null)
                    hashCode = hashCode * 59 + this.MessageId.GetHashCode();
                if (this.SmsCount != null)
                    hashCode = hashCode * 59 + this.SmsCount.GetHashCode();
                if (this.UsedCredits != null)
                    hashCode = hashCode * 59 + this.UsedCredits.GetHashCode();
                if (this.RemainingCredits != null)
                    hashCode = hashCode * 59 + this.RemainingCredits.GetHashCode();
                return hashCode;
            }
        }
    }

}
