/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// RequestContactImport
    /// </summary>
    [DataContract]
    public partial class RequestContactImport :  IEquatable<RequestContactImport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestContactImport" /> class.
        /// </summary>
        /// <param name="fileUrl">Mandatory if fileBody or jsonBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv, .json.</param>
        /// <param name="fileBody">Mandatory if fileUrl and jsonBody is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files..</param>
        /// <param name="jsonBody">**Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files. .</param>
        /// <param name="listIds">Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7]..</param>
        /// <param name="notifyUrl">URL that will be called once the import process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479.</param>
        /// <param name="newList">newList.</param>
        /// <param name="emailBlacklist">To blacklist all the contacts for email (default to false).</param>
        /// <param name="disableNotification">To disable email notification (default to false).</param>
        /// <param name="smsBlacklist">To blacklist all the contacts for sms (default to false).</param>
        /// <param name="updateExistingContacts">To facilitate the choice to update the existing contacts (default to true).</param>
        /// <param name="emptyContactsAttributes">To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes &#x3D; true means the empty fields in your import will erase any attribute that currently contain data in Brevo, &amp; emptyContactsAttributes &#x3D; false means the empty fields will not affect your existing data ( only available if &#x60;updateExistingContacts&#x60; set to true ) (default to false).</param>
        public RequestContactImport(string fileUrl = default(string), string fileBody = default(string), List<RequestContactImportJsonBody> jsonBody = default(List<RequestContactImportJsonBody>), List<long?> listIds = default(List<long?>), string notifyUrl = default(string), RequestContactImportNewList newList = default(RequestContactImportNewList), bool? emailBlacklist = false, bool? disableNotification = false, bool? smsBlacklist = false, bool? updateExistingContacts = true, bool? emptyContactsAttributes = false)
        {
            this.FileUrl = fileUrl;
            this.FileBody = fileBody;
            this.JsonBody = jsonBody;
            this.ListIds = listIds;
            this.NotifyUrl = notifyUrl;
            this.NewList = newList;
            // use default value if no "emailBlacklist" provided
            if (emailBlacklist == null)
            {
                this.EmailBlacklist = false;
            }
            else
            {
                this.EmailBlacklist = emailBlacklist;
            }
            // use default value if no "disableNotification" provided
            if (disableNotification == null)
            {
                this.DisableNotification = false;
            }
            else
            {
                this.DisableNotification = disableNotification;
            }
            // use default value if no "smsBlacklist" provided
            if (smsBlacklist == null)
            {
                this.SmsBlacklist = false;
            }
            else
            {
                this.SmsBlacklist = smsBlacklist;
            }
            // use default value if no "updateExistingContacts" provided
            if (updateExistingContacts == null)
            {
                this.UpdateExistingContacts = true;
            }
            else
            {
                this.UpdateExistingContacts = updateExistingContacts;
            }
            // use default value if no "emptyContactsAttributes" provided
            if (emptyContactsAttributes == null)
            {
                this.EmptyContactsAttributes = false;
            }
            else
            {
                this.EmptyContactsAttributes = emptyContactsAttributes;
            }
        }
        
        /// <summary>
        /// Mandatory if fileBody or jsonBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv, .json
        /// </summary>
        /// <value>Mandatory if fileBody or jsonBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv, .json</value>
        [DataMember(Name="fileUrl", EmitDefaultValue=false)]
        public string FileUrl { get; set; }

        /// <summary>
        /// Mandatory if fileUrl and jsonBody is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.
        /// </summary>
        /// <value>Mandatory if fileUrl and jsonBody is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.</value>
        [DataMember(Name="fileBody", EmitDefaultValue=false)]
        public string FileBody { get; set; }

        /// <summary>
        /// **Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files. 
        /// </summary>
        /// <value>**Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files. </value>
        [DataMember(Name="jsonBody", EmitDefaultValue=false)]
        public List<RequestContactImportJsonBody> JsonBody { get; set; }

        /// <summary>
        /// Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7].
        /// </summary>
        /// <value>Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7].</value>
        [DataMember(Name="listIds", EmitDefaultValue=false)]
        public List<long?> ListIds { get; set; }

        /// <summary>
        /// URL that will be called once the import process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479
        /// </summary>
        /// <value>URL that will be called once the import process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479</value>
        [DataMember(Name="notifyUrl", EmitDefaultValue=false)]
        public string NotifyUrl { get; set; }

        /// <summary>
        /// Gets or Sets NewList
        /// </summary>
        [DataMember(Name="newList", EmitDefaultValue=false)]
        public RequestContactImportNewList NewList { get; set; }

        /// <summary>
        /// To blacklist all the contacts for email
        /// </summary>
        /// <value>To blacklist all the contacts for email</value>
        [DataMember(Name="emailBlacklist", EmitDefaultValue=false)]
        public bool? EmailBlacklist { get; set; }

        /// <summary>
        /// To disable email notification
        /// </summary>
        /// <value>To disable email notification</value>
        [DataMember(Name="disableNotification", EmitDefaultValue=false)]
        public bool? DisableNotification { get; set; }

        /// <summary>
        /// To blacklist all the contacts for sms
        /// </summary>
        /// <value>To blacklist all the contacts for sms</value>
        [DataMember(Name="smsBlacklist", EmitDefaultValue=false)]
        public bool? SmsBlacklist { get; set; }

        /// <summary>
        /// To facilitate the choice to update the existing contacts
        /// </summary>
        /// <value>To facilitate the choice to update the existing contacts</value>
        [DataMember(Name="updateExistingContacts", EmitDefaultValue=false)]
        public bool? UpdateExistingContacts { get; set; }

        /// <summary>
        /// To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes &#x3D; true means the empty fields in your import will erase any attribute that currently contain data in Brevo, &amp; emptyContactsAttributes &#x3D; false means the empty fields will not affect your existing data ( only available if &#x60;updateExistingContacts&#x60; set to true )
        /// </summary>
        /// <value>To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes &#x3D; true means the empty fields in your import will erase any attribute that currently contain data in Brevo, &amp; emptyContactsAttributes &#x3D; false means the empty fields will not affect your existing data ( only available if &#x60;updateExistingContacts&#x60; set to true )</value>
        [DataMember(Name="emptyContactsAttributes", EmitDefaultValue=false)]
        public bool? EmptyContactsAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestContactImport {\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("  FileBody: ").Append(FileBody).Append("\n");
            sb.Append("  JsonBody: ").Append(JsonBody).Append("\n");
            sb.Append("  ListIds: ").Append(ListIds).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  NewList: ").Append(NewList).Append("\n");
            sb.Append("  EmailBlacklist: ").Append(EmailBlacklist).Append("\n");
            sb.Append("  DisableNotification: ").Append(DisableNotification).Append("\n");
            sb.Append("  SmsBlacklist: ").Append(SmsBlacklist).Append("\n");
            sb.Append("  UpdateExistingContacts: ").Append(UpdateExistingContacts).Append("\n");
            sb.Append("  EmptyContactsAttributes: ").Append(EmptyContactsAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestContactImport);
        }

        /// <summary>
        /// Returns true if RequestContactImport instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestContactImport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestContactImport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileUrl == input.FileUrl ||
                    (this.FileUrl != null &&
                    this.FileUrl.Equals(input.FileUrl))
                ) && 
                (
                    this.FileBody == input.FileBody ||
                    (this.FileBody != null &&
                    this.FileBody.Equals(input.FileBody))
                ) && 
                (
                    this.JsonBody == input.JsonBody ||
                    this.JsonBody != null &&
                    this.JsonBody.SequenceEqual(input.JsonBody)
                ) && 
                (
                    this.ListIds == input.ListIds ||
                    this.ListIds != null &&
                    this.ListIds.SequenceEqual(input.ListIds)
                ) && 
                (
                    this.NotifyUrl == input.NotifyUrl ||
                    (this.NotifyUrl != null &&
                    this.NotifyUrl.Equals(input.NotifyUrl))
                ) && 
                (
                    this.NewList == input.NewList ||
                    (this.NewList != null &&
                    this.NewList.Equals(input.NewList))
                ) && 
                (
                    this.EmailBlacklist == input.EmailBlacklist ||
                    (this.EmailBlacklist != null &&
                    this.EmailBlacklist.Equals(input.EmailBlacklist))
                ) && 
                (
                    this.DisableNotification == input.DisableNotification ||
                    (this.DisableNotification != null &&
                    this.DisableNotification.Equals(input.DisableNotification))
                ) && 
                (
                    this.SmsBlacklist == input.SmsBlacklist ||
                    (this.SmsBlacklist != null &&
                    this.SmsBlacklist.Equals(input.SmsBlacklist))
                ) && 
                (
                    this.UpdateExistingContacts == input.UpdateExistingContacts ||
                    (this.UpdateExistingContacts != null &&
                    this.UpdateExistingContacts.Equals(input.UpdateExistingContacts))
                ) && 
                (
                    this.EmptyContactsAttributes == input.EmptyContactsAttributes ||
                    (this.EmptyContactsAttributes != null &&
                    this.EmptyContactsAttributes.Equals(input.EmptyContactsAttributes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileUrl != null)
                    hashCode = hashCode * 59 + this.FileUrl.GetHashCode();
                if (this.FileBody != null)
                    hashCode = hashCode * 59 + this.FileBody.GetHashCode();
                if (this.JsonBody != null)
                    hashCode = hashCode * 59 + this.JsonBody.GetHashCode();
                if (this.ListIds != null)
                    hashCode = hashCode * 59 + this.ListIds.GetHashCode();
                if (this.NotifyUrl != null)
                    hashCode = hashCode * 59 + this.NotifyUrl.GetHashCode();
                if (this.NewList != null)
                    hashCode = hashCode * 59 + this.NewList.GetHashCode();
                if (this.EmailBlacklist != null)
                    hashCode = hashCode * 59 + this.EmailBlacklist.GetHashCode();
                if (this.DisableNotification != null)
                    hashCode = hashCode * 59 + this.DisableNotification.GetHashCode();
                if (this.SmsBlacklist != null)
                    hashCode = hashCode * 59 + this.SmsBlacklist.GetHashCode();
                if (this.UpdateExistingContacts != null)
                    hashCode = hashCode * 59 + this.UpdateExistingContacts.GetHashCode();
                if (this.EmptyContactsAttributes != null)
                    hashCode = hashCode * 59 + this.EmptyContactsAttributes.GetHashCode();
                return hashCode;
            }
        }
    }

}
