/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetWhatsappEventReportEvents
    /// </summary>
    [DataContract]
    public partial class GetWhatsappEventReportEvents :  IEquatable<GetWhatsappEventReportEvents>
    {
        /// <summary>
        /// Event which occurred
        /// </summary>
        /// <value>Event which occurred</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventEnum
        {
            
            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            [EnumMember(Value = "sent")]
            Sent = 1,
            
            /// <summary>
            /// Enum Delivered for value: delivered
            /// </summary>
            [EnumMember(Value = "delivered")]
            Delivered = 2,
            
            /// <summary>
            /// Enum Read for value: read
            /// </summary>
            [EnumMember(Value = "read")]
            Read = 3,
            
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 4,
            
            /// <summary>
            /// Enum Unsubscribe for value: unsubscribe
            /// </summary>
            [EnumMember(Value = "unsubscribe")]
            Unsubscribe = 5,
            
            /// <summary>
            /// Enum Reply for value: reply
            /// </summary>
            [EnumMember(Value = "reply")]
            Reply = 6,
            
            /// <summary>
            /// Enum SoftBounce for value: soft-bounce
            /// </summary>
            [EnumMember(Value = "soft-bounce")]
            SoftBounce = 7
        }

        /// <summary>
        /// Event which occurred
        /// </summary>
        /// <value>Event which occurred</value>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public EventEnum Event { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWhatsappEventReportEvents" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetWhatsappEventReportEvents() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWhatsappEventReportEvents" /> class.
        /// </summary>
        /// <param name="contactNumber">WhatsApp Number with country code. Example, 85264318721 (required).</param>
        /// <param name="date">UTC date-time on which the event has been generated (required).</param>
        /// <param name="messageId">Message ID which generated the event (required).</param>
        /// <param name="_event">Event which occurred (required).</param>
        /// <param name="reason">Reason for the event (will be there in case of &#x60;error&#x60; and &#x60;soft-bounce&#x60; events).</param>
        /// <param name="body">Text of the reply (will be there only in case of &#x60;reply&#x60; event with text).</param>
        /// <param name="mediaUrl">Url of the media reply (will be there only in case of &#x60;reply&#x60; event with media).</param>
        /// <param name="senderNumber">WhatsApp Number with country code. Example, 85264318721 (required).</param>
        public GetWhatsappEventReportEvents(string contactNumber = default(string), string date = default(string), string messageId = default(string), EventEnum _event = default(EventEnum), string reason = default(string), string body = default(string), string mediaUrl = default(string), string senderNumber = default(string))
        {
            // to ensure "contactNumber" is required (not null)
            if (contactNumber == null)
            {
                throw new InvalidDataException("contactNumber is a required property for GetWhatsappEventReportEvents and cannot be null");
            }
            else
            {
                this.ContactNumber = contactNumber;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for GetWhatsappEventReportEvents and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "messageId" is required (not null)
            if (messageId == null)
            {
                throw new InvalidDataException("messageId is a required property for GetWhatsappEventReportEvents and cannot be null");
            }
            else
            {
                this.MessageId = messageId;
            }
            // to ensure "_event" is required (not null)
            if (_event == null)
            {
                throw new InvalidDataException("_event is a required property for GetWhatsappEventReportEvents and cannot be null");
            }
            else
            {
                this.Event = _event;
            }
            // to ensure "senderNumber" is required (not null)
            if (senderNumber == null)
            {
                throw new InvalidDataException("senderNumber is a required property for GetWhatsappEventReportEvents and cannot be null");
            }
            else
            {
                this.SenderNumber = senderNumber;
            }
            this.Reason = reason;
            this.Body = body;
            this.MediaUrl = mediaUrl;
        }
        
        /// <summary>
        /// WhatsApp Number with country code. Example, 85264318721
        /// </summary>
        /// <value>WhatsApp Number with country code. Example, 85264318721</value>
        [DataMember(Name="contactNumber", EmitDefaultValue=false)]
        public string ContactNumber { get; set; }

        /// <summary>
        /// UTC date-time on which the event has been generated
        /// </summary>
        /// <value>UTC date-time on which the event has been generated</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Message ID which generated the event
        /// </summary>
        /// <value>Message ID which generated the event</value>
        [DataMember(Name="messageId", EmitDefaultValue=false)]
        public string MessageId { get; set; }


        /// <summary>
        /// Reason for the event (will be there in case of &#x60;error&#x60; and &#x60;soft-bounce&#x60; events)
        /// </summary>
        /// <value>Reason for the event (will be there in case of &#x60;error&#x60; and &#x60;soft-bounce&#x60; events)</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Text of the reply (will be there only in case of &#x60;reply&#x60; event with text)
        /// </summary>
        /// <value>Text of the reply (will be there only in case of &#x60;reply&#x60; event with text)</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Url of the media reply (will be there only in case of &#x60;reply&#x60; event with media)
        /// </summary>
        /// <value>Url of the media reply (will be there only in case of &#x60;reply&#x60; event with media)</value>
        [DataMember(Name="mediaUrl", EmitDefaultValue=false)]
        public string MediaUrl { get; set; }

        /// <summary>
        /// WhatsApp Number with country code. Example, 85264318721
        /// </summary>
        /// <value>WhatsApp Number with country code. Example, 85264318721</value>
        [DataMember(Name="senderNumber", EmitDefaultValue=false)]
        public string SenderNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetWhatsappEventReportEvents {\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  MediaUrl: ").Append(MediaUrl).Append("\n");
            sb.Append("  SenderNumber: ").Append(SenderNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetWhatsappEventReportEvents);
        }

        /// <summary>
        /// Returns true if GetWhatsappEventReportEvents instances are equal
        /// </summary>
        /// <param name="input">Instance of GetWhatsappEventReportEvents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetWhatsappEventReportEvents input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.MediaUrl == input.MediaUrl ||
                    (this.MediaUrl != null &&
                    this.MediaUrl.Equals(input.MediaUrl))
                ) && 
                (
                    this.SenderNumber == input.SenderNumber ||
                    (this.SenderNumber != null &&
                    this.SenderNumber.Equals(input.SenderNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactNumber != null)
                    hashCode = hashCode * 59 + this.ContactNumber.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.MessageId != null)
                    hashCode = hashCode * 59 + this.MessageId.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.MediaUrl != null)
                    hashCode = hashCode * 59 + this.MediaUrl.GetHashCode();
                if (this.SenderNumber != null)
                    hashCode = hashCode * 59 + this.SenderNumber.GetHashCode();
                return hashCode;
            }
        }
    }

}
