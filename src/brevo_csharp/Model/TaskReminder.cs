/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Task reminder date/time for a task
    /// </summary>
    [DataContract]
    public partial class TaskReminder :  IEquatable<TaskReminder>
    {
        /// <summary>
        /// Unit of time before reminder is to be sent
        /// </summary>
        /// <value>Unit of time before reminder is to be sent</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            
            /// <summary>
            /// Enum Minutes for value: minutes
            /// </summary>
            [EnumMember(Value = "minutes")]
            Minutes = 1,
            
            /// <summary>
            /// Enum Hours for value: hours
            /// </summary>
            [EnumMember(Value = "hours")]
            Hours = 2,
            
            /// <summary>
            /// Enum Weeks for value: weeks
            /// </summary>
            [EnumMember(Value = "weeks")]
            Weeks = 3,
            
            /// <summary>
            /// Enum Days for value: days
            /// </summary>
            [EnumMember(Value = "days")]
            Days = 4
        }

        /// <summary>
        /// Unit of time before reminder is to be sent
        /// </summary>
        /// <value>Unit of time before reminder is to be sent</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public UnitEnum Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskReminder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskReminder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskReminder" /> class.
        /// </summary>
        /// <param name="value">Value of time unit before reminder is to be sent (required).</param>
        /// <param name="unit">Unit of time before reminder is to be sent (required).</param>
        /// <param name="types">Type of task reminder e.g email, push (required).</param>
        public TaskReminder(int? value = default(int?), UnitEnum unit = default(UnitEnum), List<string> types = default(List<string>))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for TaskReminder and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new InvalidDataException("unit is a required property for TaskReminder and cannot be null");
            }
            else
            {
                this.Unit = unit;
            }
            // to ensure "types" is required (not null)
            if (types == null)
            {
                throw new InvalidDataException("types is a required property for TaskReminder and cannot be null");
            }
            else
            {
                this.Types = types;
            }
        }
        
        /// <summary>
        /// Value of time unit before reminder is to be sent
        /// </summary>
        /// <value>Value of time unit before reminder is to be sent</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public int? Value { get; set; }


        /// <summary>
        /// Type of task reminder e.g email, push
        /// </summary>
        /// <value>Type of task reminder e.g email, push</value>
        [DataMember(Name="types", EmitDefaultValue=false)]
        public List<string> Types { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskReminder {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskReminder);
        }

        /// <summary>
        /// Returns true if TaskReminder instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskReminder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskReminder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Types == input.Types ||
                    this.Types != null &&
                    this.Types.SequenceEqual(input.Types)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.Types != null)
                    hashCode = hashCode * 59 + this.Types.GetHashCode();
                return hashCode;
            }
        }
    }

}
