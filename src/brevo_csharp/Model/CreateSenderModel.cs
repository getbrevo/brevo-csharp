/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// CreateSenderModel
    /// </summary>
    [DataContract]
    public partial class CreateSenderModel :  IEquatable<CreateSenderModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSenderModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSenderModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSenderModel" /> class.
        /// </summary>
        /// <param name="id">ID of the Sender created (required).</param>
        /// <param name="spfError">Status of SPF configuration for the sender (true &#x3D; SPF not well configured, false &#x3D; SPF well configured).</param>
        /// <param name="dkimError">Status of DKIM configuration for the sender (true &#x3D; DKIM not well configured, false &#x3D; DKIM well configured).</param>
        public CreateSenderModel(long? id = default(long?), bool? spfError = default(bool?), bool? dkimError = default(bool?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for CreateSenderModel and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.SpfError = spfError;
            this.DkimError = dkimError;
        }
        
        /// <summary>
        /// ID of the Sender created
        /// </summary>
        /// <value>ID of the Sender created</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Status of SPF configuration for the sender (true &#x3D; SPF not well configured, false &#x3D; SPF well configured)
        /// </summary>
        /// <value>Status of SPF configuration for the sender (true &#x3D; SPF not well configured, false &#x3D; SPF well configured)</value>
        [DataMember(Name="spfError", EmitDefaultValue=false)]
        public bool? SpfError { get; set; }

        /// <summary>
        /// Status of DKIM configuration for the sender (true &#x3D; DKIM not well configured, false &#x3D; DKIM well configured)
        /// </summary>
        /// <value>Status of DKIM configuration for the sender (true &#x3D; DKIM not well configured, false &#x3D; DKIM well configured)</value>
        [DataMember(Name="dkimError", EmitDefaultValue=false)]
        public bool? DkimError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSenderModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SpfError: ").Append(SpfError).Append("\n");
            sb.Append("  DkimError: ").Append(DkimError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSenderModel);
        }

        /// <summary>
        /// Returns true if CreateSenderModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSenderModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSenderModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SpfError == input.SpfError ||
                    (this.SpfError != null &&
                    this.SpfError.Equals(input.SpfError))
                ) && 
                (
                    this.DkimError == input.DkimError ||
                    (this.DkimError != null &&
                    this.DkimError.Equals(input.DkimError))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SpfError != null)
                    hashCode = hashCode * 59 + this.SpfError.GetHashCode();
                if (this.DkimError != null)
                    hashCode = hashCode * 59 + this.DkimError.GetHashCode();
                return hashCode;
            }
        }
    }

}
