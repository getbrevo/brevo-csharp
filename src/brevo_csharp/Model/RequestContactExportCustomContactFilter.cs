/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Set the filter for the contacts to be exported.
    /// </summary>
    [DataContract]
    public partial class RequestContactExportCustomContactFilter :  IEquatable<RequestContactExportCustomContactFilter>
    {
        /// <summary>
        /// Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed &amp; unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only. 
        /// </summary>
        /// <value>Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed &amp; unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionForContactsEnum
        {
            
            /// <summary>
            /// Enum AllContacts for value: allContacts
            /// </summary>
            [EnumMember(Value = "allContacts")]
            AllContacts = 1,
            
            /// <summary>
            /// Enum Subscribed for value: subscribed
            /// </summary>
            [EnumMember(Value = "subscribed")]
            Subscribed = 2,
            
            /// <summary>
            /// Enum Unsubscribed for value: unsubscribed
            /// </summary>
            [EnumMember(Value = "unsubscribed")]
            Unsubscribed = 3,
            
            /// <summary>
            /// Enum UnsubscribedPerList for value: unsubscribedPerList
            /// </summary>
            [EnumMember(Value = "unsubscribedPerList")]
            UnsubscribedPerList = 4
        }

        /// <summary>
        /// Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed &amp; unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only. 
        /// </summary>
        /// <value>Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed &amp; unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only. </value>
        [DataMember(Name="actionForContacts", EmitDefaultValue=false)]
        public ActionForContactsEnum? ActionForContacts { get; set; }
        /// <summary>
        /// Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers &amp; nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers &amp; nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces &amp; softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s). 
        /// </summary>
        /// <value>Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers &amp; nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers &amp; nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces &amp; softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s). </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionForEmailCampaignsEnum
        {
            
            /// <summary>
            /// Enum Openers for value: openers
            /// </summary>
            [EnumMember(Value = "openers")]
            Openers = 1,
            
            /// <summary>
            /// Enum NonOpeners for value: nonOpeners
            /// </summary>
            [EnumMember(Value = "nonOpeners")]
            NonOpeners = 2,
            
            /// <summary>
            /// Enum Clickers for value: clickers
            /// </summary>
            [EnumMember(Value = "clickers")]
            Clickers = 3,
            
            /// <summary>
            /// Enum NonClickers for value: nonClickers
            /// </summary>
            [EnumMember(Value = "nonClickers")]
            NonClickers = 4,
            
            /// <summary>
            /// Enum Unsubscribed for value: unsubscribed
            /// </summary>
            [EnumMember(Value = "unsubscribed")]
            Unsubscribed = 5,
            
            /// <summary>
            /// Enum HardBounces for value: hardBounces
            /// </summary>
            [EnumMember(Value = "hardBounces")]
            HardBounces = 6,
            
            /// <summary>
            /// Enum SoftBounces for value: softBounces
            /// </summary>
            [EnumMember(Value = "softBounces")]
            SoftBounces = 7
        }

        /// <summary>
        /// Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers &amp; nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers &amp; nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces &amp; softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s). 
        /// </summary>
        /// <value>Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers &amp; nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers &amp; nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces &amp; softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s). </value>
        [DataMember(Name="actionForEmailCampaigns", EmitDefaultValue=false)]
        public ActionForEmailCampaignsEnum? ActionForEmailCampaigns { get; set; }
        /// <summary>
        /// Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces &amp; softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns. 
        /// </summary>
        /// <value>Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces &amp; softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionForSmsCampaignsEnum
        {
            
            /// <summary>
            /// Enum HardBounces for value: hardBounces
            /// </summary>
            [EnumMember(Value = "hardBounces")]
            HardBounces = 1,
            
            /// <summary>
            /// Enum SoftBounces for value: softBounces
            /// </summary>
            [EnumMember(Value = "softBounces")]
            SoftBounces = 2,
            
            /// <summary>
            /// Enum Unsubscribed for value: unsubscribed
            /// </summary>
            [EnumMember(Value = "unsubscribed")]
            Unsubscribed = 3
        }

        /// <summary>
        /// Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces &amp; softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns. 
        /// </summary>
        /// <value>Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces &amp; softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns. </value>
        [DataMember(Name="actionForSmsCampaigns", EmitDefaultValue=false)]
        public ActionForSmsCampaignsEnum? ActionForSmsCampaigns { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestContactExportCustomContactFilter" /> class.
        /// </summary>
        /// <param name="actionForContacts">Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed &amp; unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only. .</param>
        /// <param name="actionForEmailCampaigns">Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers &amp; nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers &amp; nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces &amp; softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s). .</param>
        /// <param name="actionForSmsCampaigns">Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces &amp; softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns. .</param>
        /// <param name="listId">ID of the list. This is mandatory if actionForContacts is specified and segmentId is not provided. Either segmentId or listId must be included..</param>
        /// <param name="segmentId">ID of the segment. This is mandatory if actionForContacts is specified and listId is not provided. Either segmentId or listId must be included. .</param>
        /// <param name="emailCampaignId">Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter..</param>
        /// <param name="smsCampaignId">Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter..</param>
        public RequestContactExportCustomContactFilter(ActionForContactsEnum? actionForContacts = default(ActionForContactsEnum?), ActionForEmailCampaignsEnum? actionForEmailCampaigns = default(ActionForEmailCampaignsEnum?), ActionForSmsCampaignsEnum? actionForSmsCampaigns = default(ActionForSmsCampaignsEnum?), long? listId = default(long?), long? segmentId = default(long?), long? emailCampaignId = default(long?), long? smsCampaignId = default(long?))
        {
            this.ActionForContacts = actionForContacts;
            this.ActionForEmailCampaigns = actionForEmailCampaigns;
            this.ActionForSmsCampaigns = actionForSmsCampaigns;
            this.ListId = listId;
            this.SegmentId = segmentId;
            this.EmailCampaignId = emailCampaignId;
            this.SmsCampaignId = smsCampaignId;
        }
        



        /// <summary>
        /// ID of the list. This is mandatory if actionForContacts is specified and segmentId is not provided. Either segmentId or listId must be included.
        /// </summary>
        /// <value>ID of the list. This is mandatory if actionForContacts is specified and segmentId is not provided. Either segmentId or listId must be included.</value>
        [DataMember(Name="listId", EmitDefaultValue=false)]
        public long? ListId { get; set; }

        /// <summary>
        /// ID of the segment. This is mandatory if actionForContacts is specified and listId is not provided. Either segmentId or listId must be included. 
        /// </summary>
        /// <value>ID of the segment. This is mandatory if actionForContacts is specified and listId is not provided. Either segmentId or listId must be included. </value>
        [DataMember(Name="segmentId", EmitDefaultValue=false)]
        public long? SegmentId { get; set; }

        /// <summary>
        /// Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter.
        /// </summary>
        /// <value>Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter.</value>
        [DataMember(Name="emailCampaignId", EmitDefaultValue=false)]
        public long? EmailCampaignId { get; set; }

        /// <summary>
        /// Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.
        /// </summary>
        /// <value>Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.</value>
        [DataMember(Name="smsCampaignId", EmitDefaultValue=false)]
        public long? SmsCampaignId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestContactExportCustomContactFilter {\n");
            sb.Append("  ActionForContacts: ").Append(ActionForContacts).Append("\n");
            sb.Append("  ActionForEmailCampaigns: ").Append(ActionForEmailCampaigns).Append("\n");
            sb.Append("  ActionForSmsCampaigns: ").Append(ActionForSmsCampaigns).Append("\n");
            sb.Append("  ListId: ").Append(ListId).Append("\n");
            sb.Append("  SegmentId: ").Append(SegmentId).Append("\n");
            sb.Append("  EmailCampaignId: ").Append(EmailCampaignId).Append("\n");
            sb.Append("  SmsCampaignId: ").Append(SmsCampaignId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestContactExportCustomContactFilter);
        }

        /// <summary>
        /// Returns true if RequestContactExportCustomContactFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestContactExportCustomContactFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestContactExportCustomContactFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActionForContacts == input.ActionForContacts ||
                    (this.ActionForContacts != null &&
                    this.ActionForContacts.Equals(input.ActionForContacts))
                ) && 
                (
                    this.ActionForEmailCampaigns == input.ActionForEmailCampaigns ||
                    (this.ActionForEmailCampaigns != null &&
                    this.ActionForEmailCampaigns.Equals(input.ActionForEmailCampaigns))
                ) && 
                (
                    this.ActionForSmsCampaigns == input.ActionForSmsCampaigns ||
                    (this.ActionForSmsCampaigns != null &&
                    this.ActionForSmsCampaigns.Equals(input.ActionForSmsCampaigns))
                ) && 
                (
                    this.ListId == input.ListId ||
                    (this.ListId != null &&
                    this.ListId.Equals(input.ListId))
                ) && 
                (
                    this.SegmentId == input.SegmentId ||
                    (this.SegmentId != null &&
                    this.SegmentId.Equals(input.SegmentId))
                ) && 
                (
                    this.EmailCampaignId == input.EmailCampaignId ||
                    (this.EmailCampaignId != null &&
                    this.EmailCampaignId.Equals(input.EmailCampaignId))
                ) && 
                (
                    this.SmsCampaignId == input.SmsCampaignId ||
                    (this.SmsCampaignId != null &&
                    this.SmsCampaignId.Equals(input.SmsCampaignId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionForContacts != null)
                    hashCode = hashCode * 59 + this.ActionForContacts.GetHashCode();
                if (this.ActionForEmailCampaigns != null)
                    hashCode = hashCode * 59 + this.ActionForEmailCampaigns.GetHashCode();
                if (this.ActionForSmsCampaigns != null)
                    hashCode = hashCode * 59 + this.ActionForSmsCampaigns.GetHashCode();
                if (this.ListId != null)
                    hashCode = hashCode * 59 + this.ListId.GetHashCode();
                if (this.SegmentId != null)
                    hashCode = hashCode * 59 + this.SegmentId.GetHashCode();
                if (this.EmailCampaignId != null)
                    hashCode = hashCode * 59 + this.EmailCampaignId.GetHashCode();
                if (this.SmsCampaignId != null)
                    hashCode = hashCode * 59 + this.SmsCampaignId.GetHashCode();
                return hashCode;
            }
        }
    }

}
