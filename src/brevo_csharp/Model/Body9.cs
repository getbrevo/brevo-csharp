/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// Body9
    /// </summary>
    [DataContract]
    public partial class Body9 :  IEquatable<Body9>
    {
        /// <summary>
        /// The type of attribute (must be one of the defined enums)
        /// </summary>
        /// <value>The type of attribute (must be one of the defined enums)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttributeTypeEnum
        {
            
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,
            
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 2,
            
            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 3,
            
            /// <summary>
            /// Enum SingleSelect for value: single-select
            /// </summary>
            [EnumMember(Value = "single-select")]
            SingleSelect = 4,
            
            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 5,
            
            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 6,
            
            /// <summary>
            /// Enum MultiChoice for value: multi-choice
            /// </summary>
            [EnumMember(Value = "multi-choice")]
            MultiChoice = 7
        }

        /// <summary>
        /// The type of attribute (must be one of the defined enums)
        /// </summary>
        /// <value>The type of attribute (must be one of the defined enums)</value>
        [DataMember(Name="attributeType", EmitDefaultValue=false)]
        public AttributeTypeEnum AttributeType { get; set; }
        /// <summary>
        /// The type of object the attribute belongs to (prefilled with &#x60;companies&#x60;or &#x60;deal&#x60;, mandatory)
        /// </summary>
        /// <value>The type of object the attribute belongs to (prefilled with &#x60;companies&#x60;or &#x60;deal&#x60;, mandatory)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectTypeEnum
        {
            
            /// <summary>
            /// Enum Companies for value: companies
            /// </summary>
            [EnumMember(Value = "companies")]
            Companies = 1,
            
            /// <summary>
            /// Enum Deals for value: deals
            /// </summary>
            [EnumMember(Value = "deals")]
            Deals = 2
        }

        /// <summary>
        /// The type of object the attribute belongs to (prefilled with &#x60;companies&#x60;or &#x60;deal&#x60;, mandatory)
        /// </summary>
        /// <value>The type of object the attribute belongs to (prefilled with &#x60;companies&#x60;or &#x60;deal&#x60;, mandatory)</value>
        [DataMember(Name="objectType", EmitDefaultValue=false)]
        public ObjectTypeEnum ObjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body9" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Body9() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body9" /> class.
        /// </summary>
        /// <param name="label">The label for the attribute (max 50 characters, cannot be empty) (required).</param>
        /// <param name="attributeType">The type of attribute (must be one of the defined enums) (required).</param>
        /// <param name="description">A description of the attribute.</param>
        /// <param name="optionsLabels">Options for multi-choice or single-select attributes.</param>
        /// <param name="objectType">The type of object the attribute belongs to (prefilled with &#x60;companies&#x60;or &#x60;deal&#x60;, mandatory) (required).</param>
        public Body9(string label = default(string), AttributeTypeEnum attributeType = default(AttributeTypeEnum), string description = default(string), List<string> optionsLabels = default(List<string>), ObjectTypeEnum objectType = default(ObjectTypeEnum))
        {
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new InvalidDataException("label is a required property for Body9 and cannot be null");
            }
            else
            {
                this.Label = label;
            }
            // to ensure "attributeType" is required (not null)
            if (attributeType == null)
            {
                throw new InvalidDataException("attributeType is a required property for Body9 and cannot be null");
            }
            else
            {
                this.AttributeType = attributeType;
            }
            // to ensure "objectType" is required (not null)
            if (objectType == null)
            {
                throw new InvalidDataException("objectType is a required property for Body9 and cannot be null");
            }
            else
            {
                this.ObjectType = objectType;
            }
            this.Description = description;
            this.OptionsLabels = optionsLabels;
        }
        
        /// <summary>
        /// The label for the attribute (max 50 characters, cannot be empty)
        /// </summary>
        /// <value>The label for the attribute (max 50 characters, cannot be empty)</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }


        /// <summary>
        /// A description of the attribute
        /// </summary>
        /// <value>A description of the attribute</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Options for multi-choice or single-select attributes
        /// </summary>
        /// <value>Options for multi-choice or single-select attributes</value>
        [DataMember(Name="optionsLabels", EmitDefaultValue=false)]
        public List<string> OptionsLabels { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body9 {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  AttributeType: ").Append(AttributeType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  OptionsLabels: ").Append(OptionsLabels).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body9);
        }

        /// <summary>
        /// Returns true if Body9 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body9 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body9 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.AttributeType == input.AttributeType ||
                    (this.AttributeType != null &&
                    this.AttributeType.Equals(input.AttributeType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.OptionsLabels == input.OptionsLabels ||
                    this.OptionsLabels != null &&
                    this.OptionsLabels.SequenceEqual(input.OptionsLabels)
                ) && 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.AttributeType != null)
                    hashCode = hashCode * 59 + this.AttributeType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.OptionsLabels != null)
                    hashCode = hashCode * 59 + this.OptionsLabels.GetHashCode();
                if (this.ObjectType != null)
                    hashCode = hashCode * 59 + this.ObjectType.GetHashCode();
                return hashCode;
            }
        }
    }

}
