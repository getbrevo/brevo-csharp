/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// GetProcess
    /// </summary>
    [DataContract]
    public partial class GetProcess :  IEquatable<GetProcess>
    {
        /// <summary>
        /// Status of the process
        /// </summary>
        /// <value>Status of the process</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 1,
            
            /// <summary>
            /// Enum Inprocess for value: in_process
            /// </summary>
            [EnumMember(Value = "in_process")]
            Inprocess = 2,
            
            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 3
        }

        /// <summary>
        /// Status of the process
        /// </summary>
        /// <value>Status of the process</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProcess" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetProcess() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProcess" /> class.
        /// </summary>
        /// <param name="id">Id of the process (required).</param>
        /// <param name="status">Status of the process (required).</param>
        /// <param name="name">Process name (required).</param>
        /// <param name="exportUrl">URL on which send export the of contacts once the process is completed.</param>
        public GetProcess(long? id = default(long?), StatusEnum status = default(StatusEnum), string name = default(string), string exportUrl = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for GetProcess and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for GetProcess and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GetProcess and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.ExportUrl = exportUrl;
        }
        
        /// <summary>
        /// Id of the process
        /// </summary>
        /// <value>Id of the process</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }


        /// <summary>
        /// Process name
        /// </summary>
        /// <value>Process name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// URL on which send export the of contacts once the process is completed
        /// </summary>
        /// <value>URL on which send export the of contacts once the process is completed</value>
        [DataMember(Name="export_url", EmitDefaultValue=false)]
        public string ExportUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetProcess {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExportUrl: ").Append(ExportUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProcess);
        }

        /// <summary>
        /// Returns true if GetProcess instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProcess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProcess input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ExportUrl == input.ExportUrl ||
                    (this.ExportUrl != null &&
                    this.ExportUrl.Equals(input.ExportUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ExportUrl != null)
                    hashCode = hashCode * 59 + this.ExportUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}
