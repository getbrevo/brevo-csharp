/* 
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = brevo_csharp.Client.SwaggerDateConverter;

namespace brevo_csharp.Model
{
    /// <summary>
    /// MainAttributeRewardPayload
    /// </summary>
    [DataContract]
    public partial class MainAttributeRewardPayload :  IEquatable<MainAttributeRewardPayload>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainAttributeRewardPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MainAttributeRewardPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MainAttributeRewardPayload" /> class.
        /// </summary>
        /// <param name="value">Value of the selected reward config.</param>
        /// <param name="code">Code generated to attribute reward to a contact.</param>
        /// <param name="contactId">Contact to attribute the reward.</param>
        /// <param name="expirationDate">Reward expiration date.</param>
        /// <param name="loyaltySubscriptionId">One of contactId or loyaltySubscriptionId is required.</param>
        /// <param name="meta">Offer meta information (key/value object).</param>
        /// <param name="rewardId">Reward id (required).</param>
        public MainAttributeRewardPayload(decimal? value = default(decimal?), string code = default(string), long? contactId = default(long?), string expirationDate = default(string), string loyaltySubscriptionId = default(string), Dictionary<string, Object> meta = default(Dictionary<string, Object>), Guid? rewardId = default(Guid?))
        {
            // to ensure "rewardId" is required (not null)
            if (rewardId == null)
            {
                throw new InvalidDataException("rewardId is a required property for MainAttributeRewardPayload and cannot be null");
            }
            else
            {
                this.RewardId = rewardId;
            }
            this.Value = value;
            this.Code = code;
            this.ContactId = contactId;
            this.ExpirationDate = expirationDate;
            this.LoyaltySubscriptionId = loyaltySubscriptionId;
            this.Meta = meta;
        }
        
        /// <summary>
        /// Value of the selected reward config
        /// </summary>
        /// <value>Value of the selected reward config</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal? Value { get; set; }

        /// <summary>
        /// Code generated to attribute reward to a contact
        /// </summary>
        /// <value>Code generated to attribute reward to a contact</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Contact to attribute the reward
        /// </summary>
        /// <value>Contact to attribute the reward</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public long? ContactId { get; set; }

        /// <summary>
        /// Reward expiration date
        /// </summary>
        /// <value>Reward expiration date</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// One of contactId or loyaltySubscriptionId is required
        /// </summary>
        /// <value>One of contactId or loyaltySubscriptionId is required</value>
        [DataMember(Name="loyaltySubscriptionId", EmitDefaultValue=false)]
        public string LoyaltySubscriptionId { get; set; }

        /// <summary>
        /// Offer meta information (key/value object)
        /// </summary>
        /// <value>Offer meta information (key/value object)</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Dictionary<string, Object> Meta { get; set; }

        /// <summary>
        /// Reward id
        /// </summary>
        /// <value>Reward id</value>
        [DataMember(Name="rewardId", EmitDefaultValue=false)]
        public Guid? RewardId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainAttributeRewardPayload {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  LoyaltySubscriptionId: ").Append(LoyaltySubscriptionId).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  RewardId: ").Append(RewardId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainAttributeRewardPayload);
        }

        /// <summary>
        /// Returns true if MainAttributeRewardPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of MainAttributeRewardPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainAttributeRewardPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.LoyaltySubscriptionId == input.LoyaltySubscriptionId ||
                    (this.LoyaltySubscriptionId != null &&
                    this.LoyaltySubscriptionId.Equals(input.LoyaltySubscriptionId))
                ) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                ) && 
                (
                    this.RewardId == input.RewardId ||
                    (this.RewardId != null &&
                    this.RewardId.Equals(input.RewardId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.LoyaltySubscriptionId != null)
                    hashCode = hashCode * 59 + this.LoyaltySubscriptionId.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.RewardId != null)
                    hashCode = hashCode * 59 + this.RewardId.GetHashCode();
                return hashCode;
            }
        }
    }

}
